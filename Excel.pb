;Generated by PB Type Library Importer Version: 1.0

EnableExplicit

XIncludeFile "ExcelAutoComplete.pb"
XIncludeFile "Excel.pbi"
XIncludeFile "COMHelper.pb"

CompilerIf #PB_Compiler_Thread
	Threaded.COM_INVOKE_ERROR _g_Excel_error

CompilerElse
	Global.COM_INVOKE_ERROR _g_Excel_error
CompilerEndIf

ProcedureDLL.l Excel_GetLastError()
	ProcedureReturn _g_Excel_error\scode
EndProcedure

ProcedureDLL.s Excel_GetLastErrorDescription()
	ProcedureReturn _g_Excel_error\description
EndProcedure

ProcedureDLL.l Excel_GetLastArgumentError()
	ProcedureReturn _g_Excel_error\argError
EndProcedure

DataSection
	CLSID_Application:
	Data.l $00024500
	Data.w $0000, $0000
	Data.b $C0, $00, $00, $00, $00, $00, $00, $46
EndDataSection

DataSection
	IID__Application:
	Data.l $000208D5
	Data.w $0000, $0000
	Data.b $C0, $00, $00, $00, $00, $00, $00, $46
EndDataSection

ProcedureDLL.i Excel_Application()
	Protected.IDispatch excel

	If CoCreateInstance_(?CLSID_Application, #Null, #CLSCTX_LOCAL_SERVER, ?IID__Application, @excel) = #S_OK
		ProcedureReturn excel
	EndIf
EndProcedure

;- -------------------------
;- Excel_Adjustments
;- -------------------------
ProcedureDLL.i Excel_Adjustments_Get_Application(Adjustments.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Adjustments, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Adjustments_Get_Creator(Adjustments.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Adjustments, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Adjustments_Get_Parent(Adjustments.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Adjustments, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Adjustments_Get_Count(Adjustments.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Adjustments, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Adjustments_Get_Item(Adjustments.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyFloat(Adjustments, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Adjustments_Put_Item(Adjustments.IDispatch, Index.l, Item.f)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Item
	args(1)\vt = #VT_I4 : args(1)\lVal = Index
	COM_PutProperty(Adjustments, @"Item", @args(), 2, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CalloutFormat
;- -------------------------
ProcedureDLL.i Excel_CalloutFormat_Get_Application(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalloutFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_Creator(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalloutFormat_Get_Parent(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalloutFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_AutomaticLength(CalloutFormat.IDispatch)
	COM_CallFunction(CalloutFormat, @"AutomaticLength", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_CustomDrop(CalloutFormat.IDispatch, Drop.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Drop
	COM_CallFunction(CalloutFormat, @"CustomDrop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_CustomLength(CalloutFormat.IDispatch, Length.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Length
	COM_CallFunction(CalloutFormat, @"CustomLength", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_PresetDrop(CalloutFormat.IDispatch, DropType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = DropType
	COM_CallFunction(CalloutFormat, @"PresetDrop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_Accent(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"Accent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_Accent(CalloutFormat.IDispatch, Accent.l)
	COM_PutPropertyLong(CalloutFormat, @"Accent", Accent, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_Angle(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"Angle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_Angle(CalloutFormat.IDispatch, Angle.l)
	COM_PutPropertyLong(CalloutFormat, @"Angle", Angle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_AutoAttach(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"AutoAttach", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_AutoAttach(CalloutFormat.IDispatch, AutoAttach.l)
	COM_PutPropertyLong(CalloutFormat, @"AutoAttach", AutoAttach, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_AutoLength(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"AutoLength", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_Border(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_Border(CalloutFormat.IDispatch, Border.l)
	COM_PutPropertyLong(CalloutFormat, @"Border", Border, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_CalloutFormat_Get_Drop(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(CalloutFormat, @"Drop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_DropType(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"DropType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_CalloutFormat_Get_Gap(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(CalloutFormat, @"Gap", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_Gap(CalloutFormat.IDispatch, Gap.f)
	COM_PutPropertyFloat(CalloutFormat, @"Gap", Gap, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_CalloutFormat_Get_Length(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(CalloutFormat, @"Length", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Get_Type(CalloutFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalloutFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalloutFormat_Put_Type(CalloutFormat.IDispatch, Type.l)
	COM_PutPropertyLong(CalloutFormat, @"Type", Type, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorFormat
;- -------------------------
ProcedureDLL.i Excel_ColorFormat_Get_Application(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Get_Creator(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorFormat_Get_Parent(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Get_RGB(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorFormat, @"RGB", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Put_RGB(ColorFormat.IDispatch, RGB.l)
	COM_PutPropertyLong(ColorFormat, @"RGB", RGB, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Get_SchemeColor(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorFormat, @"SchemeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Put_SchemeColor(ColorFormat.IDispatch, SchemeColor.l)
	COM_PutPropertyLong(ColorFormat, @"SchemeColor", SchemeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Get_Type(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ColorFormat_Get_TintAndShade(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ColorFormat, @"TintAndShade", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Put_TintAndShade(ColorFormat.IDispatch, TintAndShade.f)
	COM_PutPropertyFloat(ColorFormat, @"TintAndShade", TintAndShade, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Get_ObjectThemeColor(ColorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorFormat, @"ObjectThemeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorFormat_Put_ObjectThemeColor(ColorFormat.IDispatch, ObjectThemeColor.l)
	COM_PutPropertyLong(ColorFormat, @"ObjectThemeColor", ObjectThemeColor, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LineFormat
;- -------------------------
ProcedureDLL.i Excel_LineFormat_Get_Application(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LineFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_Creator(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LineFormat_Get_Parent(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LineFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LineFormat_Get_BackColor(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LineFormat, @"BackColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_BackColor(LineFormat.IDispatch, BackColor.IDispatch)
	COM_PutPropertyDispatch(LineFormat, @"BackColor", BackColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_BeginArrowheadLength(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"BeginArrowheadLength", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_BeginArrowheadLength(LineFormat.IDispatch, BeginArrowheadLength.l)
	COM_PutPropertyLong(LineFormat, @"BeginArrowheadLength", BeginArrowheadLength, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_BeginArrowheadStyle(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"BeginArrowheadStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_BeginArrowheadStyle(LineFormat.IDispatch, BeginArrowheadStyle.l)
	COM_PutPropertyLong(LineFormat, @"BeginArrowheadStyle", BeginArrowheadStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_BeginArrowheadWidth(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"BeginArrowheadWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_BeginArrowheadWidth(LineFormat.IDispatch, BeginArrowheadWidth.l)
	COM_PutPropertyLong(LineFormat, @"BeginArrowheadWidth", BeginArrowheadWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_DashStyle(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"DashStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_DashStyle(LineFormat.IDispatch, DashStyle.l)
	COM_PutPropertyLong(LineFormat, @"DashStyle", DashStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_EndArrowheadLength(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"EndArrowheadLength", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_EndArrowheadLength(LineFormat.IDispatch, EndArrowheadLength.l)
	COM_PutPropertyLong(LineFormat, @"EndArrowheadLength", EndArrowheadLength, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_EndArrowheadStyle(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"EndArrowheadStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_EndArrowheadStyle(LineFormat.IDispatch, EndArrowheadStyle.l)
	COM_PutPropertyLong(LineFormat, @"EndArrowheadStyle", EndArrowheadStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_EndArrowheadWidth(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"EndArrowheadWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_EndArrowheadWidth(LineFormat.IDispatch, EndArrowheadWidth.l)
	COM_PutPropertyLong(LineFormat, @"EndArrowheadWidth", EndArrowheadWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LineFormat_Get_ForeColor(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LineFormat, @"ForeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_ForeColor(LineFormat.IDispatch, ForeColor.IDispatch)
	COM_PutPropertyDispatch(LineFormat, @"ForeColor", ForeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_Pattern(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"Pattern", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_Pattern(LineFormat.IDispatch, Pattern.l)
	COM_PutPropertyLong(LineFormat, @"Pattern", Pattern, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_Style(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"Style", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_Style(LineFormat.IDispatch, Style.l)
	COM_PutPropertyLong(LineFormat, @"Style", Style, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_LineFormat_Get_Transparency(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(LineFormat, @"Transparency", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_Transparency(LineFormat.IDispatch, Transparency.f)
	COM_PutPropertyFloat(LineFormat, @"Transparency", Transparency, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Get_Visible(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LineFormat, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_Visible(LineFormat.IDispatch, Visible.l)
	COM_PutPropertyLong(LineFormat, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_LineFormat_Get_Weight(LineFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(LineFormat, @"Weight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LineFormat_Put_Weight(LineFormat.IDispatch, Weight.f)
	COM_PutPropertyFloat(LineFormat, @"Weight", Weight, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ShapeNode
;- -------------------------
ProcedureDLL.i Excel_ShapeNode_Get_Application(ShapeNode.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeNode, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNode_Get_Creator(ShapeNode.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeNode, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeNode_Get_Parent(ShapeNode.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeNode, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNode_Get_EditingType(ShapeNode.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeNode, @"EditingType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNode_Get_Points(ShapeNode.IDispatch, *result.VARIANT)
	COM_GetProperty(ShapeNode, @"Points", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNode_Get_SegmentType(ShapeNode.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeNode, @"SegmentType", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ShapeNodes
;- -------------------------
ProcedureDLL.i Excel_ShapeNodes_Get_Application(ShapeNodes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeNodes, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_Get_Creator(ShapeNodes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeNodes, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeNodes_Get_Parent(ShapeNodes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeNodes, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_Get_Count(ShapeNodes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeNodes, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeNodes_Item(ShapeNodes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ShapeNodes, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeNodes_Get__NewEnum(ShapeNodes.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ShapeNodes, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_Delete(ShapeNodes.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	COM_CallFunction(ShapeNodes, @"Delete", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_Insert(ShapeNodes.IDispatch, Index.l, SegmentType.l, EditingType.l, X1.f, Y1.f, X2.f, Y2.f, X3.f, Y3.f)
	Dim args.VARIANT(8)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Y3
	args(1)\vt = #VT_R4 : args(1)\fltVal = X3
	args(2)\vt = #VT_R4 : args(2)\fltVal = Y2
	args(3)\vt = #VT_R4 : args(3)\fltVal = X2
	args(4)\vt = #VT_R4 : args(4)\fltVal = Y1
	args(5)\vt = #VT_R4 : args(5)\fltVal = X1
	args(6)\vt = #VT_I4 : args(6)\lVal = EditingType
	args(7)\vt = #VT_I4 : args(7)\lVal = SegmentType
	args(8)\vt = #VT_I4 : args(8)\lVal = Index
	COM_CallFunction(ShapeNodes, @"Insert", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_SetEditingType(ShapeNodes.IDispatch, Index.l, EditingType.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = EditingType
	args(1)\vt = #VT_I4 : args(1)\lVal = Index
	COM_CallFunction(ShapeNodes, @"SetEditingType", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_SetPosition(ShapeNodes.IDispatch, Index.l, X1.f, Y1.f)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Y1
	args(1)\vt = #VT_R4 : args(1)\fltVal = X1
	args(2)\vt = #VT_I4 : args(2)\lVal = Index
	COM_CallFunction(ShapeNodes, @"SetPosition", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeNodes_SetSegmentType(ShapeNodes.IDispatch, Index.l, SegmentType.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = SegmentType
	args(1)\vt = #VT_I4 : args(1)\lVal = Index
	COM_CallFunction(ShapeNodes, @"SetSegmentType", @args(), 2, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PictureFormat
;- -------------------------
ProcedureDLL.i Excel_PictureFormat_Get_Application(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PictureFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Get_Creator(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PictureFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PictureFormat_Get_Parent(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PictureFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_IncrementBrightness(PictureFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(PictureFormat, @"IncrementBrightness", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_IncrementContrast(PictureFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(PictureFormat, @"IncrementContrast", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_Brightness(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"Brightness", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_Brightness(PictureFormat.IDispatch, Brightness.f)
	COM_PutPropertyFloat(PictureFormat, @"Brightness", Brightness, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Get_ColorType(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PictureFormat, @"ColorType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_ColorType(PictureFormat.IDispatch, ColorType.l)
	COM_PutPropertyLong(PictureFormat, @"ColorType", ColorType, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_Contrast(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"Contrast", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_Contrast(PictureFormat.IDispatch, Contrast.f)
	COM_PutPropertyFloat(PictureFormat, @"Contrast", Contrast, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_CropBottom(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"CropBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_CropBottom(PictureFormat.IDispatch, CropBottom.f)
	COM_PutPropertyFloat(PictureFormat, @"CropBottom", CropBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_CropLeft(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"CropLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_CropLeft(PictureFormat.IDispatch, CropLeft.f)
	COM_PutPropertyFloat(PictureFormat, @"CropLeft", CropLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_CropRight(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"CropRight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_CropRight(PictureFormat.IDispatch, CropRight.f)
	COM_PutPropertyFloat(PictureFormat, @"CropRight", CropRight, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_PictureFormat_Get_CropTop(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(PictureFormat, @"CropTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_CropTop(PictureFormat.IDispatch, CropTop.f)
	COM_PutPropertyFloat(PictureFormat, @"CropTop", CropTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Get_TransparencyColor(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PictureFormat, @"TransparencyColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_TransparencyColor(PictureFormat.IDispatch, TransparencyColor.l)
	COM_PutPropertyLong(PictureFormat, @"TransparencyColor", TransparencyColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Get_TransparentBackground(PictureFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PictureFormat, @"TransparentBackground", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PictureFormat_Put_TransparentBackground(PictureFormat.IDispatch, TransparentBackground.l)
	COM_PutPropertyLong(PictureFormat, @"TransparentBackground", TransparentBackground, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ShadowFormat
;- -------------------------
ProcedureDLL.i Excel_ShadowFormat_Get_Application(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShadowFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_Creator(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShadowFormat_Get_Parent(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShadowFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_IncrementOffsetX(ShadowFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShadowFormat, @"IncrementOffsetX", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_IncrementOffsetY(ShadowFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShadowFormat, @"IncrementOffsetY", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShadowFormat_Get_ForeColor(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShadowFormat, @"ForeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_ForeColor(ShadowFormat.IDispatch, ForeColor.IDispatch)
	COM_PutPropertyDispatch(ShadowFormat, @"ForeColor", ForeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_Obscured(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"Obscured", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Obscured(ShadowFormat.IDispatch, Obscured.l)
	COM_PutPropertyLong(ShadowFormat, @"Obscured", Obscured, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShadowFormat_Get_OffsetX(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShadowFormat, @"OffsetX", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_OffsetX(ShadowFormat.IDispatch, OffsetX.f)
	COM_PutPropertyFloat(ShadowFormat, @"OffsetX", OffsetX, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShadowFormat_Get_OffsetY(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShadowFormat, @"OffsetY", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_OffsetY(ShadowFormat.IDispatch, OffsetY.f)
	COM_PutPropertyFloat(ShadowFormat, @"OffsetY", OffsetY, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShadowFormat_Get_Transparency(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShadowFormat, @"Transparency", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Transparency(ShadowFormat.IDispatch, Transparency.f)
	COM_PutPropertyFloat(ShadowFormat, @"Transparency", Transparency, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_Type(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Type(ShadowFormat.IDispatch, Type.l)
	COM_PutPropertyLong(ShadowFormat, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_Visible(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Visible(ShadowFormat.IDispatch, Visible.l)
	COM_PutPropertyLong(ShadowFormat, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_Style(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"Style", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Style(ShadowFormat.IDispatch, Style.l)
	COM_PutPropertyLong(ShadowFormat, @"Style", Style, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShadowFormat_Get_Blur(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShadowFormat, @"Blur", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Blur(ShadowFormat.IDispatch, Blur.f)
	COM_PutPropertyFloat(ShadowFormat, @"Blur", Blur, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShadowFormat_Get_Size(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShadowFormat, @"Size", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_Size(ShadowFormat.IDispatch, Size.f)
	COM_PutPropertyFloat(ShadowFormat, @"Size", Size, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Get_RotateWithShape(ShadowFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShadowFormat, @"RotateWithShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShadowFormat_Put_RotateWithShape(ShadowFormat.IDispatch, RotateWithShape.l)
	COM_PutPropertyLong(ShadowFormat, @"RotateWithShape", RotateWithShape, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TextEffectFormat
;- -------------------------
ProcedureDLL.i Excel_TextEffectFormat_Get_Application(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextEffectFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_Creator(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextEffectFormat_Get_Parent(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextEffectFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_ToggleVerticalText(TextEffectFormat.IDispatch)
	COM_CallFunction(TextEffectFormat, @"ToggleVerticalText", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_Alignment(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"Alignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_Alignment(TextEffectFormat.IDispatch, Alignment.l)
	COM_PutPropertyLong(TextEffectFormat, @"Alignment", Alignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_FontBold(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"FontBold", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_FontBold(TextEffectFormat.IDispatch, FontBold.l)
	COM_PutPropertyLong(TextEffectFormat, @"FontBold", FontBold, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_FontItalic(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"FontItalic", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_FontItalic(TextEffectFormat.IDispatch, FontItalic.l)
	COM_PutPropertyLong(TextEffectFormat, @"FontItalic", FontItalic, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TextEffectFormat_Get_FontName(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(TextEffectFormat, @"FontName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_FontName(TextEffectFormat.IDispatch, FontName.s)
	COM_PutPropertyString(TextEffectFormat, @"FontName", FontName, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextEffectFormat_Get_FontSize(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextEffectFormat, @"FontSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_FontSize(TextEffectFormat.IDispatch, FontSize.f)
	COM_PutPropertyFloat(TextEffectFormat, @"FontSize", FontSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_KernedPairs(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"KernedPairs", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_KernedPairs(TextEffectFormat.IDispatch, KernedPairs.l)
	COM_PutPropertyLong(TextEffectFormat, @"KernedPairs", KernedPairs, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_NormalizedHeight(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"NormalizedHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_NormalizedHeight(TextEffectFormat.IDispatch, NormalizedHeight.l)
	COM_PutPropertyLong(TextEffectFormat, @"NormalizedHeight", NormalizedHeight, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_PresetShape(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"PresetShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_PresetShape(TextEffectFormat.IDispatch, PresetShape.l)
	COM_PutPropertyLong(TextEffectFormat, @"PresetShape", PresetShape, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_PresetTextEffect(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"PresetTextEffect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_PresetTextEffect(TextEffectFormat.IDispatch, PresetTextEffect.l)
	COM_PutPropertyLong(TextEffectFormat, @"PresetTextEffect", PresetTextEffect, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Get_RotatedChars(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextEffectFormat, @"RotatedChars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_RotatedChars(TextEffectFormat.IDispatch, RotatedChars.l)
	COM_PutPropertyLong(TextEffectFormat, @"RotatedChars", RotatedChars, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TextEffectFormat_Get_Text(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(TextEffectFormat, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_Text(TextEffectFormat.IDispatch, Text.s)
	COM_PutPropertyString(TextEffectFormat, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextEffectFormat_Get_Tracking(TextEffectFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextEffectFormat, @"Tracking", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextEffectFormat_Put_Tracking(TextEffectFormat.IDispatch, Tracking.f)
	COM_PutPropertyFloat(TextEffectFormat, @"Tracking", Tracking, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ThreeDFormat
;- -------------------------
ProcedureDLL.i Excel_ThreeDFormat_Get_Application(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ThreeDFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_Creator(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ThreeDFormat_Get_Parent(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ThreeDFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_IncrementRotationX(ThreeDFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ThreeDFormat, @"IncrementRotationX", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_IncrementRotationY(ThreeDFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ThreeDFormat, @"IncrementRotationY", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_ResetRotation(ThreeDFormat.IDispatch)
	COM_CallFunction(ThreeDFormat, @"ResetRotation", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_SetThreeDFormat(ThreeDFormat.IDispatch, PresetThreeDFormat.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = PresetThreeDFormat
	COM_CallFunction(ThreeDFormat, @"SetThreeDFormat", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_SetExtrusionDirection(ThreeDFormat.IDispatch, PresetExtrusionDirection.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = PresetExtrusionDirection
	COM_CallFunction(ThreeDFormat, @"SetExtrusionDirection", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_Depth(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"Depth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_Depth(ThreeDFormat.IDispatch, Depth.f)
	COM_PutPropertyFloat(ThreeDFormat, @"Depth", Depth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ThreeDFormat_Get_ExtrusionColor(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ThreeDFormat, @"ExtrusionColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_ExtrusionColorType(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"ExtrusionColorType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_ExtrusionColorType(ThreeDFormat.IDispatch, ExtrusionColorType.l)
	COM_PutPropertyLong(ThreeDFormat, @"ExtrusionColorType", ExtrusionColorType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_Perspective(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"Perspective", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_Perspective(ThreeDFormat.IDispatch, Perspective.l)
	COM_PutPropertyLong(ThreeDFormat, @"Perspective", Perspective, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetExtrusionDirection(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetExtrusionDirection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetLightingDirection(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetLightingDirection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_PresetLightingDirection(ThreeDFormat.IDispatch, PresetLightingDirection.l)
	COM_PutPropertyLong(ThreeDFormat, @"PresetLightingDirection", PresetLightingDirection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetLightingSoftness(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetLightingSoftness", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_PresetLightingSoftness(ThreeDFormat.IDispatch, PresetLightingSoftness.l)
	COM_PutPropertyLong(ThreeDFormat, @"PresetLightingSoftness", PresetLightingSoftness, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetMaterial(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetMaterial", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_PresetMaterial(ThreeDFormat.IDispatch, PresetMaterial.l)
	COM_PutPropertyLong(ThreeDFormat, @"PresetMaterial", PresetMaterial, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetThreeDFormat(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetThreeDFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_RotationX(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"RotationX", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_RotationX(ThreeDFormat.IDispatch, RotationX.f)
	COM_PutPropertyFloat(ThreeDFormat, @"RotationX", RotationX, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_RotationY(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"RotationY", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_RotationY(ThreeDFormat.IDispatch, RotationY.f)
	COM_PutPropertyFloat(ThreeDFormat, @"RotationY", RotationY, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_Visible(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_Visible(ThreeDFormat.IDispatch, Visible.l)
	COM_PutPropertyLong(ThreeDFormat, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_SetPresetCamera(ThreeDFormat.IDispatch, PresetCamera.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = PresetCamera
	COM_CallFunction(ThreeDFormat, @"SetPresetCamera", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_IncrementRotationZ(ThreeDFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ThreeDFormat, @"IncrementRotationZ", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_IncrementRotationHorizontal(ThreeDFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ThreeDFormat, @"IncrementRotationHorizontal", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_IncrementRotationVertical(ThreeDFormat.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ThreeDFormat, @"IncrementRotationVertical", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetLighting(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetLighting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_PresetLighting(ThreeDFormat.IDispatch, PresetLighting.l)
	COM_PutPropertyLong(ThreeDFormat, @"PresetLighting", PresetLighting, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_Z(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"Z", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_Z(ThreeDFormat.IDispatch, Z.f)
	COM_PutPropertyFloat(ThreeDFormat, @"Z", Z, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_BevelTopType(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"BevelTopType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelTopType(ThreeDFormat.IDispatch, BevelTopType.l)
	COM_PutPropertyLong(ThreeDFormat, @"BevelTopType", BevelTopType, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_BevelTopInset(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"BevelTopInset", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelTopInset(ThreeDFormat.IDispatch, BevelTopInset.f)
	COM_PutPropertyFloat(ThreeDFormat, @"BevelTopInset", BevelTopInset, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_BevelTopDepth(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"BevelTopDepth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelTopDepth(ThreeDFormat.IDispatch, BevelTopDepth.f)
	COM_PutPropertyFloat(ThreeDFormat, @"BevelTopDepth", BevelTopDepth, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_BevelBottomType(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"BevelBottomType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelBottomType(ThreeDFormat.IDispatch, BevelBottomType.l)
	COM_PutPropertyLong(ThreeDFormat, @"BevelBottomType", BevelBottomType, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_BevelBottomInset(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"BevelBottomInset", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelBottomInset(ThreeDFormat.IDispatch, BevelBottomInset.f)
	COM_PutPropertyFloat(ThreeDFormat, @"BevelBottomInset", BevelBottomInset, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_BevelBottomDepth(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"BevelBottomDepth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_BevelBottomDepth(ThreeDFormat.IDispatch, BevelBottomDepth.f)
	COM_PutPropertyFloat(ThreeDFormat, @"BevelBottomDepth", BevelBottomDepth, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_PresetCamera(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"PresetCamera", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_RotationZ(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"RotationZ", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_RotationZ(ThreeDFormat.IDispatch, RotationZ.f)
	COM_PutPropertyFloat(ThreeDFormat, @"RotationZ", RotationZ, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_ContourWidth(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"ContourWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_ContourWidth(ThreeDFormat.IDispatch, ContourWidth.f)
	COM_PutPropertyFloat(ThreeDFormat, @"ContourWidth", ContourWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ThreeDFormat_Get_ContourColor(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ThreeDFormat, @"ContourColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_FieldOfView(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"FieldOfView", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_FieldOfView(ThreeDFormat.IDispatch, FieldOfView.f)
	COM_PutPropertyFloat(ThreeDFormat, @"FieldOfView", FieldOfView, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Get_ProjectText(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ThreeDFormat, @"ProjectText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_ProjectText(ThreeDFormat.IDispatch, ProjectText.l)
	COM_PutPropertyLong(ThreeDFormat, @"ProjectText", ProjectText, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ThreeDFormat_Get_LightAngle(ThreeDFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ThreeDFormat, @"LightAngle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ThreeDFormat_Put_LightAngle(ThreeDFormat.IDispatch, LightAngle.f)
	COM_PutPropertyFloat(ThreeDFormat, @"LightAngle", LightAngle, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FillFormat
;- -------------------------
ProcedureDLL.i Excel_FillFormat_Get_Application(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FillFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_Creator(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FillFormat_Get_Parent(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FillFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Background(FillFormat.IDispatch)
	COM_CallFunction(FillFormat, @"Background", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_OneColorGradient(FillFormat.IDispatch, Style.l, Variant.l, Degree.f)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Degree
	args(1)\vt = #VT_I4 : args(1)\lVal = Variant
	args(2)\vt = #VT_I4 : args(2)\lVal = Style
	COM_CallFunction(FillFormat, @"OneColorGradient", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Patterned(FillFormat.IDispatch, Pattern.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Pattern
	COM_CallFunction(FillFormat, @"Patterned", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_PresetGradient(FillFormat.IDispatch, Style.l, Variant.l, PresetGradientType.l)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_I4 : args(0)\lVal = PresetGradientType
	args(1)\vt = #VT_I4 : args(1)\lVal = Variant
	args(2)\vt = #VT_I4 : args(2)\lVal = Style
	COM_CallFunction(FillFormat, @"PresetGradient", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_PresetTextured(FillFormat.IDispatch, PresetTexture.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = PresetTexture
	COM_CallFunction(FillFormat, @"PresetTextured", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Solid(FillFormat.IDispatch)
	COM_CallFunction(FillFormat, @"Solid", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_TwoColorGradient(FillFormat.IDispatch, Style.l, Variant.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Variant
	args(1)\vt = #VT_I4 : args(1)\lVal = Style
	COM_CallFunction(FillFormat, @"TwoColorGradient", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_UserPicture(FillFormat.IDispatch, PictureFile.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(PictureFile)
	COM_CallFunction(FillFormat, @"UserPicture", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_FillFormat_UserTextured(FillFormat.IDispatch, TextureFile.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(TextureFile)
	COM_CallFunction(FillFormat, @"UserTextured", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.i Excel_FillFormat_Get_BackColor(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FillFormat, @"BackColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_BackColor(FillFormat.IDispatch, BackColor.IDispatch)
	COM_PutPropertyDispatch(FillFormat, @"BackColor", BackColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FillFormat_Get_ForeColor(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FillFormat, @"ForeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_ForeColor(FillFormat.IDispatch, ForeColor.IDispatch)
	COM_PutPropertyDispatch(FillFormat, @"ForeColor", ForeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_GradientColorType(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"GradientColorType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_GradientDegree(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"GradientDegree", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_GradientStyle(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"GradientStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_GradientVariant(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"GradientVariant", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_Pattern(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"Pattern", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_PresetGradientType(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"PresetGradientType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_PresetTexture(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"PresetTexture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FillFormat_Get_TextureName(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(FillFormat, @"TextureName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_TextureType(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"TextureType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_Transparency(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"Transparency", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_Transparency(FillFormat.IDispatch, Transparency.f)
	COM_PutPropertyFloat(FillFormat, @"Transparency", Transparency, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_Type(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_Visible(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_Visible(FillFormat.IDispatch, Visible.l)
	COM_PutPropertyLong(FillFormat, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FillFormat_Get_GradientStops(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FillFormat, @"GradientStops", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_TextureOffsetX(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"TextureOffsetX", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureOffsetX(FillFormat.IDispatch, TextureOffsetX.f)
	COM_PutPropertyFloat(FillFormat, @"TextureOffsetX", TextureOffsetX, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_TextureOffsetY(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"TextureOffsetY", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureOffsetY(FillFormat.IDispatch, TextureOffsetY.f)
	COM_PutPropertyFloat(FillFormat, @"TextureOffsetY", TextureOffsetY, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_TextureAlignment(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"TextureAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureAlignment(FillFormat.IDispatch, TextureAlignment.l)
	COM_PutPropertyLong(FillFormat, @"TextureAlignment", TextureAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_TextureHorizontalScale(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"TextureHorizontalScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureHorizontalScale(FillFormat.IDispatch, TextureHorizontalScale.f)
	COM_PutPropertyFloat(FillFormat, @"TextureHorizontalScale", TextureHorizontalScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_FillFormat_Get_TextureVerticalScale(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(FillFormat, @"TextureVerticalScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureVerticalScale(FillFormat.IDispatch, TextureVerticalScale.f)
	COM_PutPropertyFloat(FillFormat, @"TextureVerticalScale", TextureVerticalScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_TextureTile(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"TextureTile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_TextureTile(FillFormat.IDispatch, TextureTile.l)
	COM_PutPropertyLong(FillFormat, @"TextureTile", TextureTile, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Get_RotateWithObject(FillFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FillFormat, @"RotateWithObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FillFormat_Put_RotateWithObject(FillFormat.IDispatch, RotateWithObject.l)
	COM_PutPropertyLong(FillFormat, @"RotateWithObject", RotateWithObject, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IRTDUpdateEvent
;- -------------------------
ProcedureDLL.l Excel_IRTDUpdateEvent_UpdateNotify(IRTDUpdateEvent.IDispatch)
	COM_CallFunction(IRTDUpdateEvent, @"UpdateNotify", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRTDUpdateEvent_Get_HeartbeatInterval(IRTDUpdateEvent.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IRTDUpdateEvent, @"HeartbeatInterval", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRTDUpdateEvent_Put_HeartbeatInterval(IRTDUpdateEvent.IDispatch, HeartbeatInterval.l)
	COM_PutPropertyLong(IRTDUpdateEvent, @"HeartbeatInterval", HeartbeatInterval, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRTDUpdateEvent_Disconnect(IRTDUpdateEvent.IDispatch)
	COM_CallFunction(IRTDUpdateEvent, @"Disconnect", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IRtdServer
;- -------------------------
ProcedureDLL.l Excel_IRtdServer_ServerStart(IRtdServer.IDispatch, CallbackObject.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = CallbackObject
	ProcedureReturn COM_CallFunctionLong(IRtdServer, @"ServerStart", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRtdServer_ConnectData(IRtdServer.IDispatch, TopicID.l, *Strings.SAFEARRAY, GetNewValues.w, *result.VARIANT)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = GetNewValues
	args(1)\vt = #VT_SAFEARRAY : args(1)\parray = *Strings
	args(2)\vt = #VT_I4 : args(2)\lVal = TopicID
	COM_CallFunction(IRtdServer, @"ConnectData", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IRtdServer_RefreshData(IRtdServer.IDispatch, TopicCount.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = TopicCount
	ProcedureReturn COM_CallFunctionSafeArray(IRtdServer, @"RefreshData", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRtdServer_DisconnectData(IRtdServer.IDispatch, TopicID.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = TopicID
	COM_CallFunction(IRtdServer, @"DisconnectData", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRtdServer_Heartbeat(IRtdServer.IDispatch)
	ProcedureReturn COM_CallFunctionLong(IRtdServer, @"Heartbeat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IRtdServer_ServerTerminate(IRtdServer.IDispatch)
	COM_CallFunction(IRtdServer, @"ServerTerminate", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TextFrame2
;- -------------------------
ProcedureDLL.i Excel_TextFrame2_Get_Application(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_Creator(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame2_Get_Parent(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame2_Get_MarginBottom(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame2, @"MarginBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_MarginBottom(TextFrame2.IDispatch, MarginBottom.f)
	COM_PutPropertyFloat(TextFrame2, @"MarginBottom", MarginBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame2_Get_MarginLeft(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame2, @"MarginLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_MarginLeft(TextFrame2.IDispatch, MarginLeft.f)
	COM_PutPropertyFloat(TextFrame2, @"MarginLeft", MarginLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame2_Get_MarginRight(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame2, @"MarginRight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_MarginRight(TextFrame2.IDispatch, MarginRight.f)
	COM_PutPropertyFloat(TextFrame2, @"MarginRight", MarginRight, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame2_Get_MarginTop(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame2, @"MarginTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_MarginTop(TextFrame2.IDispatch, MarginTop.f)
	COM_PutPropertyFloat(TextFrame2, @"MarginTop", MarginTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_Orientation(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_Orientation(TextFrame2.IDispatch, Orientation.l)
	COM_PutPropertyLong(TextFrame2, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_HorizontalAnchor(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"HorizontalAnchor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_HorizontalAnchor(TextFrame2.IDispatch, HorizontalAnchor.l)
	COM_PutPropertyLong(TextFrame2, @"HorizontalAnchor", HorizontalAnchor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_VerticalAnchor(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"VerticalAnchor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_VerticalAnchor(TextFrame2.IDispatch, VerticalAnchor.l)
	COM_PutPropertyLong(TextFrame2, @"VerticalAnchor", VerticalAnchor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_PathFormat(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"PathFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_PathFormat(TextFrame2.IDispatch, PathFormat.l)
	COM_PutPropertyLong(TextFrame2, @"PathFormat", PathFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_WarpFormat(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"WarpFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_WarpFormat(TextFrame2.IDispatch, WarpFormat.l)
	COM_PutPropertyLong(TextFrame2, @"WarpFormat", WarpFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_WordArtformat(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"WordArtformat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_WordArtformat(TextFrame2.IDispatch, WordArtformat.l)
	COM_PutPropertyLong(TextFrame2, @"WordArtformat", WordArtformat, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_WordWrap(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"WordWrap", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_WordWrap(TextFrame2.IDispatch, WordWrap.l)
	COM_PutPropertyLong(TextFrame2, @"WordWrap", WordWrap, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_AutoSize(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"AutoSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Put_AutoSize(TextFrame2.IDispatch, AutoSize.l)
	COM_PutPropertyLong(TextFrame2, @"AutoSize", AutoSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame2_Get_ThreeD(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"ThreeD", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_Get_HasText(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame2, @"HasText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame2_Get_TextRange(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"TextRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame2_Get_Column(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"Column", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame2_Get_Ruler(TextFrame2.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame2, @"Ruler", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame2_DeleteText(TextFrame2.IDispatch)
	COM_CallFunction(TextFrame2, @"DeleteText", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Application
;- -------------------------
ProcedureDLL.i Excel_Application_Get_Application(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Creator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Parent(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveCell(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveChart(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveChart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveDialog(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveDialog", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveMenuBar(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveMenuBar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_ActivePrinter(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"ActivePrinter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ActivePrinter(Application.IDispatch, ActivePrinter.s)
	COM_PutPropertyString(Application, @"ActivePrinter", ActivePrinter, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveSheet(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveSheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveWindow(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ActiveWorkbook(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ActiveWorkbook", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_AddIns(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"AddIns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Assistant(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Assistant", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Calculate(Application.IDispatch)
	COM_CallFunction(Application, @"Calculate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Cells(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Cells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Charts(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Charts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Columns(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Columns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_CommandBars(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"CommandBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_DDEAppReturnCode(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"DDEAppReturnCode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_DDEExecute(Application.IDispatch, Channel.l, String.s)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(String)
	args(1)\vt = #VT_I4 : args(1)\lVal = Channel
	COM_CallFunction(Application, @"DDEExecute", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_Application_DDEInitiate(Application.IDispatch, App.s, Topic.s)
	Dim args.VARIANT(1)
	Protected.l r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Topic)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(App)
	r = COM_CallFunctionLong(Application, @"DDEInitiate", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Application_DDEPoke(Application.IDispatch, Channel.l, *Item.VARIANT, *_Data.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*_Data, @args(0))
	COM_VarClone(*Item, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Channel
	COM_CallFunction(Application, @"DDEPoke", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_DDERequest(Application.IDispatch, Channel.l, Item.s, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Item)
	args(1)\vt = #VT_I4 : args(1)\lVal = Channel
	COM_CallFunction(Application, @"DDERequest", @args(), 2, *result, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_Application_DDETerminate(Application.IDispatch, Channel.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Channel
	COM_CallFunction(Application, @"DDETerminate", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_DialogSheets(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"DialogSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Evaluate(Application.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Application, @"Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application__Evaluate(Application.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Application, @"_Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_ExecuteExcel4Macro(Application.IDispatch, String.s, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(String)
	COM_CallFunction(Application, @"ExecuteExcel4Macro", @args(), 1, *result, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.i Excel_Application_Intersect(Application.IDispatch, Arg1.IDispatch, Arg2.IDispatch, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	args(28)\vt = #VT_DISPATCH : args(28)\pdispVal = Arg2
	args(29)\vt = #VT_DISPATCH : args(29)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDispatch(Application, @"Intersect", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_MenuBars(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"MenuBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Modules(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Modules", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Names(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Names", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Range(Application.IDispatch, *Cell1.VARIANT, *Cell2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Cell2, @args(0))
	COM_VarClone(*Cell1, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Range", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Rows(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Rows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Run(Application.IDispatch, *Macro.VARIANT, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(30)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_VarClone(*Macro, @args(30))
	COM_CallFunction(Application, @"Run", @args(), 31, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application__Run2(Application.IDispatch, *Macro.VARIANT, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(30)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_VarClone(*Macro, @args(30))
	COM_CallFunction(Application, @"_Run2", @args(), 31, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Selection(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Selection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_SendKeys(Application.IDispatch, *Keys.VARIANT, *Wait.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Wait, @args(0))
	COM_VarClone(*Keys, @args(1))
	COM_CallFunction(Application, @"SendKeys", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Sheets(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Sheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ShortcutMenus(Application.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ShortcutMenus", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ThisWorkbook(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ThisWorkbook", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Toolbars(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Toolbars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Union(Application.IDispatch, Arg1.IDispatch, Arg2.IDispatch, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	args(28)\vt = #VT_DISPATCH : args(28)\pdispVal = Arg2
	args(29)\vt = #VT_DISPATCH : args(29)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDispatch(Application, @"Union", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Windows(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Windows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Workbooks(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Workbooks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_WorksheetFunction(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"WorksheetFunction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Worksheets(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Worksheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Excel4IntlMacroSheets(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Excel4IntlMacroSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Excel4MacroSheets(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Excel4MacroSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_ActivateMicrosoftApp(Application.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	COM_CallFunction(Application, @"ActivateMicrosoftApp", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_AddChartAutoFormat(Application.IDispatch, *Chart.VARIANT, Name.s, *Description.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Description, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	COM_VarClone(*Chart, @args(2))
	COM_CallFunction(Application, @"AddChartAutoFormat", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_Application_AddCustomList(Application.IDispatch, *ListArray.VARIANT, *ByRow.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ByRow, @args(0))
	COM_VarClone(*ListArray, @args(1))
	COM_CallFunction(Application, @"AddCustomList", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_AlertBeforeOverwriting(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"AlertBeforeOverwriting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AlertBeforeOverwriting(Application.IDispatch, AlertBeforeOverwriting.w)
	COM_PutPropertyBool(Application, @"AlertBeforeOverwriting", AlertBeforeOverwriting, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_AltStartupPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"AltStartupPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AltStartupPath(Application.IDispatch, AltStartupPath.s)
	COM_PutPropertyString(Application, @"AltStartupPath", AltStartupPath, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_AskToUpdateLinks(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"AskToUpdateLinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AskToUpdateLinks(Application.IDispatch, AskToUpdateLinks.w)
	COM_PutPropertyBool(Application, @"AskToUpdateLinks", AskToUpdateLinks, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableAnimations(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableAnimations", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableAnimations(Application.IDispatch, EnableAnimations.w)
	COM_PutPropertyBool(Application, @"EnableAnimations", EnableAnimations, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_AutoCorrect(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"AutoCorrect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Build(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Build", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_CalculateBeforeSave(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"CalculateBeforeSave", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CalculateBeforeSave(Application.IDispatch, CalculateBeforeSave.w)
	COM_PutPropertyBool(Application, @"CalculateBeforeSave", CalculateBeforeSave, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Calculation(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Calculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Calculation(Application.IDispatch, Calculation.l)
	COM_PutPropertyLong(Application, @"Calculation", Calculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Caller(Application.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Application, @"Caller", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_CanPlaySounds(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"CanPlaySounds", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_CanRecordSounds(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"CanRecordSounds", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_Caption(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Caption(Application.IDispatch, Caption.s)
	COM_PutPropertyString(Application, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_CellDragAndDrop(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"CellDragAndDrop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CellDragAndDrop(Application.IDispatch, CellDragAndDrop.w)
	COM_PutPropertyBool(Application, @"CellDragAndDrop", CellDragAndDrop, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_CentimetersToPoints(Application.IDispatch, Centimeters.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Centimeters
	ProcedureReturn COM_CallFunctionDouble(Application, @"CentimetersToPoints", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_CheckSpelling(Application.IDispatch, Word.s, *CustomDictionary.VARIANT, *IgnoreUppercase.VARIANT)
	Dim args.VARIANT(2)
	Protected.w r
	COM_VarClone(*IgnoreUppercase, @args(0))
	COM_VarClone(*CustomDictionary, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Word)
	r = COM_CallFunctionBool(Application, @"CheckSpelling", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Application_Get_ClipboardFormats(Application.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Application, @"ClipboardFormats", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayClipboardWindow(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayClipboardWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayClipboardWindow(Application.IDispatch, DisplayClipboardWindow.w)
	COM_PutPropertyBool(Application, @"DisplayClipboardWindow", DisplayClipboardWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ColorButtons(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ColorButtons", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ColorButtons(Application.IDispatch, ColorButtons.w)
	COM_PutPropertyBool(Application, @"ColorButtons", ColorButtons, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CommandUnderlines(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CommandUnderlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CommandUnderlines(Application.IDispatch, CommandUnderlines.l)
	COM_PutPropertyLong(Application, @"CommandUnderlines", CommandUnderlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ConstrainNumeric(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ConstrainNumeric", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ConstrainNumeric(Application.IDispatch, ConstrainNumeric.w)
	COM_PutPropertyBool(Application, @"ConstrainNumeric", ConstrainNumeric, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_ConvertFormula(Application.IDispatch, *Formula.VARIANT, FromReferenceStyle.l, *ToReferenceStyle.VARIANT, *ToAbsolute.VARIANT, *RelativeTo.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*RelativeTo, @args(0))
	COM_VarClone(*ToAbsolute, @args(1))
	COM_VarClone(*ToReferenceStyle, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = FromReferenceStyle
	COM_VarClone(*Formula, @args(4))
	COM_CallFunction(Application, @"ConvertFormula", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_CopyObjectsWithCells(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"CopyObjectsWithCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CopyObjectsWithCells(Application.IDispatch, CopyObjectsWithCells.w)
	COM_PutPropertyBool(Application, @"CopyObjectsWithCells", CopyObjectsWithCells, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Cursor(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Cursor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Cursor(Application.IDispatch, Cursor.l)
	COM_PutPropertyLong(Application, @"Cursor", Cursor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CustomListCount(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CustomListCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CutCopyMode(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CutCopyMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CutCopyMode(Application.IDispatch, CutCopyMode.l)
	COM_PutPropertyLong(Application, @"CutCopyMode", CutCopyMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_DataEntryMode(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"DataEntryMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DataEntryMode(Application.IDispatch, DataEntryMode.l)
	COM_PutPropertyLong(Application, @"DataEntryMode", DataEntryMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy1(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(Application, @"Dummy1", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy2(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*Arg8, @args(0))
	COM_VarClone(*Arg7, @args(1))
	COM_VarClone(*Arg6, @args(2))
	COM_VarClone(*Arg5, @args(3))
	COM_VarClone(*Arg4, @args(4))
	COM_VarClone(*Arg3, @args(5))
	COM_VarClone(*Arg2, @args(6))
	COM_VarClone(*Arg1, @args(7))
	COM_CallFunction(Application, @"Dummy2", @args(), 8, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy3(Application.IDispatch, *result.VARIANT)
	COM_CallFunction(Application, @"Dummy3", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy4(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *result.VARIANT)
	Dim args.VARIANT(14)
	COM_VarClone(*Arg15, @args(0))
	COM_VarClone(*Arg14, @args(1))
	COM_VarClone(*Arg13, @args(2))
	COM_VarClone(*Arg12, @args(3))
	COM_VarClone(*Arg11, @args(4))
	COM_VarClone(*Arg10, @args(5))
	COM_VarClone(*Arg9, @args(6))
	COM_VarClone(*Arg8, @args(7))
	COM_VarClone(*Arg7, @args(8))
	COM_VarClone(*Arg6, @args(9))
	COM_VarClone(*Arg5, @args(10))
	COM_VarClone(*Arg4, @args(11))
	COM_VarClone(*Arg3, @args(12))
	COM_VarClone(*Arg2, @args(13))
	COM_VarClone(*Arg1, @args(14))
	COM_CallFunction(Application, @"Dummy4", @args(), 15, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy5(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *result.VARIANT)
	Dim args.VARIANT(12)
	COM_VarClone(*Arg13, @args(0))
	COM_VarClone(*Arg12, @args(1))
	COM_VarClone(*Arg11, @args(2))
	COM_VarClone(*Arg10, @args(3))
	COM_VarClone(*Arg9, @args(4))
	COM_VarClone(*Arg8, @args(5))
	COM_VarClone(*Arg7, @args(6))
	COM_VarClone(*Arg6, @args(7))
	COM_VarClone(*Arg5, @args(8))
	COM_VarClone(*Arg4, @args(9))
	COM_VarClone(*Arg3, @args(10))
	COM_VarClone(*Arg2, @args(11))
	COM_VarClone(*Arg1, @args(12))
	COM_CallFunction(Application, @"Dummy5", @args(), 13, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy6(Application.IDispatch, *result.VARIANT)
	COM_CallFunction(Application, @"Dummy6", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy7(Application.IDispatch, *result.VARIANT)
	COM_CallFunction(Application, @"Dummy7", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy8(Application.IDispatch, *Arg1.VARIANT, *result.VARIANT)
	COM_CallFunction(Application, @"Dummy8", *Arg1, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy9(Application.IDispatch, *result.VARIANT)
	COM_CallFunction(Application, @"Dummy9", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Dummy10(Application.IDispatch, *arg.VARIANT)
	ProcedureReturn COM_CallFunctionBool(Application, @"Dummy10", *arg, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy11(Application.IDispatch)
	COM_CallFunction(Application, @"Dummy11", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get__Default(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_DefaultFilePath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"DefaultFilePath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DefaultFilePath(Application.IDispatch, DefaultFilePath.s)
	COM_PutPropertyString(Application, @"DefaultFilePath", DefaultFilePath, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_DeleteChartAutoFormat(Application.IDispatch, Name.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Application, @"DeleteChartAutoFormat", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_Application_DeleteCustomList(Application.IDispatch, ListNum.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ListNum
	COM_CallFunction(Application, @"DeleteCustomList", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Dialogs(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Dialogs", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayAlerts(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayAlerts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayAlerts(Application.IDispatch, DisplayAlerts.w)
	COM_PutPropertyBool(Application, @"DisplayAlerts", DisplayAlerts, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayFormulaBar(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayFormulaBar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayFormulaBar(Application.IDispatch, DisplayFormulaBar.w)
	COM_PutPropertyBool(Application, @"DisplayFormulaBar", DisplayFormulaBar, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayFullScreen(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayFullScreen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayFullScreen(Application.IDispatch, DisplayFullScreen.w)
	COM_PutPropertyBool(Application, @"DisplayFullScreen", DisplayFullScreen, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayNoteIndicator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayNoteIndicator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayNoteIndicator(Application.IDispatch, DisplayNoteIndicator.w)
	COM_PutPropertyBool(Application, @"DisplayNoteIndicator", DisplayNoteIndicator, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_DisplayCommentIndicator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"DisplayCommentIndicator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayCommentIndicator(Application.IDispatch, DisplayCommentIndicator.l)
	COM_PutPropertyLong(Application, @"DisplayCommentIndicator", DisplayCommentIndicator, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayExcel4Menus(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayExcel4Menus", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayExcel4Menus(Application.IDispatch, DisplayExcel4Menus.w)
	COM_PutPropertyBool(Application, @"DisplayExcel4Menus", DisplayExcel4Menus, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayRecentFiles(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayRecentFiles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayRecentFiles(Application.IDispatch, DisplayRecentFiles.w)
	COM_PutPropertyBool(Application, @"DisplayRecentFiles", DisplayRecentFiles, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayScrollBars(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayScrollBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayScrollBars(Application.IDispatch, DisplayScrollBars.w)
	COM_PutPropertyBool(Application, @"DisplayScrollBars", DisplayScrollBars, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayStatusBar(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayStatusBar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayStatusBar(Application.IDispatch, DisplayStatusBar.w)
	COM_PutPropertyBool(Application, @"DisplayStatusBar", DisplayStatusBar, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_DoubleClick(Application.IDispatch)
	COM_CallFunction(Application, @"DoubleClick", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EditDirectlyInCell(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EditDirectlyInCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EditDirectlyInCell(Application.IDispatch, EditDirectlyInCell.w)
	COM_PutPropertyBool(Application, @"EditDirectlyInCell", EditDirectlyInCell, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableAutoComplete(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableAutoComplete", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableAutoComplete(Application.IDispatch, EnableAutoComplete.w)
	COM_PutPropertyBool(Application, @"EnableAutoComplete", EnableAutoComplete, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_EnableCancelKey(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"EnableCancelKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableCancelKey(Application.IDispatch, EnableCancelKey.l)
	COM_PutPropertyLong(Application, @"EnableCancelKey", EnableCancelKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableSound(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableSound", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableSound(Application.IDispatch, EnableSound.w)
	COM_PutPropertyBool(Application, @"EnableSound", EnableSound, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableTipWizard(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableTipWizard", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableTipWizard(Application.IDispatch, EnableTipWizard.w)
	COM_PutPropertyBool(Application, @"EnableTipWizard", EnableTipWizard, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_FileConverters(Application.IDispatch, *Index1.VARIANT, *Index2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Index2, @args(0))
	COM_VarClone(*Index1, @args(1))
	COM_GetProperty(Application, @"FileConverters", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_FileSearch(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"FileSearch", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_FileFind(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"FileFind", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application__FindFile(Application.IDispatch)
	COM_CallFunction(Application, @"_FindFile", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_FixedDecimal(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"FixedDecimal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_FixedDecimal(Application.IDispatch, FixedDecimal.w)
	COM_PutPropertyBool(Application, @"FixedDecimal", FixedDecimal, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_FixedDecimalPlaces(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"FixedDecimalPlaces", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_FixedDecimalPlaces(Application.IDispatch, FixedDecimalPlaces.l)
	COM_PutPropertyLong(Application, @"FixedDecimalPlaces", FixedDecimalPlaces, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_GetCustomListContents(Application.IDispatch, ListNum.l, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ListNum
	COM_CallFunction(Application, @"GetCustomListContents", @args(), 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_GetCustomListNum(Application.IDispatch, *ListArray.VARIANT)
	ProcedureReturn COM_CallFunctionLong(Application, @"GetCustomListNum", *ListArray, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_GetOpenFilename(Application.IDispatch, *FileFilter.VARIANT, *FilterIndex.VARIANT, *Title.VARIANT, *ButtonText.VARIANT, *MultiSelect.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*MultiSelect, @args(0))
	COM_VarClone(*ButtonText, @args(1))
	COM_VarClone(*Title, @args(2))
	COM_VarClone(*FilterIndex, @args(3))
	COM_VarClone(*FileFilter, @args(4))
	COM_CallFunction(Application, @"GetOpenFilename", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_GetSaveAsFilename(Application.IDispatch, *InitialFilename.VARIANT, *FileFilter.VARIANT, *FilterIndex.VARIANT, *Title.VARIANT, *ButtonText.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*ButtonText, @args(0))
	COM_VarClone(*Title, @args(1))
	COM_VarClone(*FilterIndex, @args(2))
	COM_VarClone(*FileFilter, @args(3))
	COM_VarClone(*InitialFilename, @args(4))
	COM_CallFunction(Application, @"GetSaveAsFilename", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Goto(Application.IDispatch, *Reference.VARIANT, *Scroll.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Scroll, @args(0))
	COM_VarClone(*Reference, @args(1))
	COM_CallFunction(Application, @"Goto", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_Height(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Height(Application.IDispatch, Height.d)
	COM_PutPropertyDouble(Application, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Help(Application.IDispatch, *HelpFile.VARIANT, *HelpContextID.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*HelpContextID, @args(0))
	COM_VarClone(*HelpFile, @args(1))
	COM_CallFunction(Application, @"Help", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_IgnoreRemoteRequests(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"IgnoreRemoteRequests", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_IgnoreRemoteRequests(Application.IDispatch, IgnoreRemoteRequests.w)
	COM_PutPropertyBool(Application, @"IgnoreRemoteRequests", IgnoreRemoteRequests, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_InchesToPoints(Application.IDispatch, Inches.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Inches
	ProcedureReturn COM_CallFunctionDouble(Application, @"InchesToPoints", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_InputBox(Application.IDispatch, Prompt.s, *Title.VARIANT, *Default.VARIANT, *Left.VARIANT, *Top.VARIANT, *HelpFile.VARIANT, *HelpContextID.VARIANT, *Type.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*HelpContextID, @args(1))
	COM_VarClone(*HelpFile, @args(2))
	COM_VarClone(*Top, @args(3))
	COM_VarClone(*Left, @args(4))
	COM_VarClone(*Default, @args(5))
	COM_VarClone(*Title, @args(6))
	args(7)\vt = #VT_BSTR : args(7)\bstrVal = SysAllocString_(Prompt)
	COM_CallFunction(Application, @"InputBox", @args(), 8, *result, @_g_Excel_error)
	VariantClear_(@args(7))
EndProcedure

ProcedureDLL.w Excel_Application_Get_Interactive(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"Interactive", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Interactive(Application.IDispatch, Interactive.w)
	COM_PutPropertyBool(Application, @"Interactive", Interactive, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_International(Application.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Application, @"International", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_Iteration(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"Iteration", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Iteration(Application.IDispatch, Iteration.w)
	COM_PutPropertyBool(Application, @"Iteration", Iteration, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_LargeButtons(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"LargeButtons", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_LargeButtons(Application.IDispatch, LargeButtons.w)
	COM_PutPropertyBool(Application, @"LargeButtons", LargeButtons, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_Left(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Left(Application.IDispatch, Left.d)
	COM_PutPropertyDouble(Application, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_LibraryPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"LibraryPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_MacroOptions(Application.IDispatch, *Macro.VARIANT, *Description.VARIANT, *HasMenu.VARIANT, *MenuText.VARIANT, *HasShortcutKey.VARIANT, *ShortcutKey.VARIANT, *Category.VARIANT, *StatusBar.VARIANT, *HelpContextID.VARIANT, *HelpFile.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*HelpFile, @args(0))
	COM_VarClone(*HelpContextID, @args(1))
	COM_VarClone(*StatusBar, @args(2))
	COM_VarClone(*Category, @args(3))
	COM_VarClone(*ShortcutKey, @args(4))
	COM_VarClone(*HasShortcutKey, @args(5))
	COM_VarClone(*MenuText, @args(6))
	COM_VarClone(*HasMenu, @args(7))
	COM_VarClone(*Description, @args(8))
	COM_VarClone(*Macro, @args(9))
	COM_CallFunction(Application, @"MacroOptions", @args(), 10, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_MailLogoff(Application.IDispatch)
	COM_CallFunction(Application, @"MailLogoff", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_MailLogon(Application.IDispatch, *Name.VARIANT, *Password.VARIANT, *DownloadNewMail.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*DownloadNewMail, @args(0))
	COM_VarClone(*Password, @args(1))
	COM_VarClone(*Name, @args(2))
	COM_CallFunction(Application, @"MailLogon", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MailSession(Application.IDispatch, *result.VARIANT)
	COM_GetProperty(Application, @"MailSession", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MailSystem(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MailSystem", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_MathCoprocessorAvailable(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"MathCoprocessorAvailable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_MaxChange(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"MaxChange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MaxChange(Application.IDispatch, MaxChange.d)
	COM_PutPropertyDouble(Application, @"MaxChange", MaxChange, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MaxIterations(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MaxIterations", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MaxIterations(Application.IDispatch, MaxIterations.l)
	COM_PutPropertyLong(Application, @"MaxIterations", MaxIterations, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MemoryFree(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MemoryFree", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MemoryTotal(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MemoryTotal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MemoryUsed(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MemoryUsed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_MouseAvailable(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"MouseAvailable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_MoveAfterReturn(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"MoveAfterReturn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MoveAfterReturn(Application.IDispatch, MoveAfterReturn.w)
	COM_PutPropertyBool(Application, @"MoveAfterReturn", MoveAfterReturn, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MoveAfterReturnDirection(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MoveAfterReturnDirection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MoveAfterReturnDirection(Application.IDispatch, MoveAfterReturnDirection.l)
	COM_PutPropertyLong(Application, @"MoveAfterReturnDirection", MoveAfterReturnDirection, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_RecentFiles(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"RecentFiles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_Name(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_NextLetter(Application.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Application, @"NextLetter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_NetworkTemplatesPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"NetworkTemplatesPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ODBCErrors(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ODBCErrors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_ODBCTimeout(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"ODBCTimeout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ODBCTimeout(Application.IDispatch, ODBCTimeout.l)
	COM_PutPropertyLong(Application, @"ODBCTimeout", ODBCTimeout, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnCalculate(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnCalculate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnCalculate(Application.IDispatch, OnCalculate.s)
	COM_PutPropertyString(Application, @"OnCalculate", OnCalculate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnData(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnData(Application.IDispatch, OnData.s)
	COM_PutPropertyString(Application, @"OnData", OnData, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnDoubleClick(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnDoubleClick", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnDoubleClick(Application.IDispatch, OnDoubleClick.s)
	COM_PutPropertyString(Application, @"OnDoubleClick", OnDoubleClick, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnEntry(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnEntry", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnEntry(Application.IDispatch, OnEntry.s)
	COM_PutPropertyString(Application, @"OnEntry", OnEntry, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_OnKey(Application.IDispatch, Key.s, *_Procedure.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*_Procedure, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Key)
	COM_CallFunction(Application, @"OnKey", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_Application_OnRepeat(Application.IDispatch, Text.s, _Procedure.s)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(_Procedure)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Text)
	COM_CallFunction(Application, @"OnRepeat", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnSheetActivate(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnSheetActivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnSheetActivate(Application.IDispatch, OnSheetActivate.s)
	COM_PutPropertyString(Application, @"OnSheetActivate", OnSheetActivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnSheetDeactivate(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnSheetDeactivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnSheetDeactivate(Application.IDispatch, OnSheetDeactivate.s)
	COM_PutPropertyString(Application, @"OnSheetDeactivate", OnSheetDeactivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_OnTime(Application.IDispatch, *EarliestTime.VARIANT, _Procedure.s, *LatestTime.VARIANT, *Schedule.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Schedule, @args(0))
	COM_VarClone(*LatestTime, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(_Procedure)
	COM_VarClone(*EarliestTime, @args(3))
	COM_CallFunction(Application, @"OnTime", @args(), 4, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.l Excel_Application_OnUndo(Application.IDispatch, Text.s, _Procedure.s)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(_Procedure)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Text)
	COM_CallFunction(Application, @"OnUndo", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.s Excel_Application_Get_OnWindow(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OnWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_OnWindow(Application.IDispatch, OnWindow.s)
	COM_PutPropertyString(Application, @"OnWindow", OnWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OperatingSystem(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OperatingSystem", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_OrganizationName(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"OrganizationName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_Path(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"Path", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_PathSeparator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"PathSeparator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_PreviousSelections(Application.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Application, @"PreviousSelections", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_PivotTableSelection(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"PivotTableSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_PivotTableSelection(Application.IDispatch, PivotTableSelection.w)
	COM_PutPropertyBool(Application, @"PivotTableSelection", PivotTableSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_PromptForSummaryInfo(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"PromptForSummaryInfo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_PromptForSummaryInfo(Application.IDispatch, PromptForSummaryInfo.w)
	COM_PutPropertyBool(Application, @"PromptForSummaryInfo", PromptForSummaryInfo, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Quit(Application.IDispatch)
	COM_CallFunction(Application, @"Quit", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_RecordMacro(Application.IDispatch, *BasicCode.VARIANT, *XlmCode.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*XlmCode, @args(0))
	COM_VarClone(*BasicCode, @args(1))
	COM_CallFunction(Application, @"RecordMacro", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_RecordRelative(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"RecordRelative", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_ReferenceStyle(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"ReferenceStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ReferenceStyle(Application.IDispatch, ReferenceStyle.l)
	COM_PutPropertyLong(Application, @"ReferenceStyle", ReferenceStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_RegisteredFunctions(Application.IDispatch, *Index1.VARIANT, *Index2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Index2, @args(0))
	COM_VarClone(*Index1, @args(1))
	COM_GetProperty(Application, @"RegisteredFunctions", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_RegisterXLL(Application.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	Protected.w r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionBool(Application, @"RegisterXLL", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Application_Repeat(Application.IDispatch)
	COM_CallFunction(Application, @"Repeat", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_ResetTipWizard(Application.IDispatch)
	COM_CallFunction(Application, @"ResetTipWizard", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_RollZoom(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"RollZoom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_RollZoom(Application.IDispatch, RollZoom.w)
	COM_PutPropertyBool(Application, @"RollZoom", RollZoom, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Save(Application.IDispatch, *Filename.VARIANT)
	COM_CallFunction(Application, @"Save", *Filename, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_SaveWorkspace(Application.IDispatch, *Filename.VARIANT)
	COM_CallFunction(Application, @"SaveWorkspace", *Filename, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ScreenUpdating(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ScreenUpdating", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ScreenUpdating(Application.IDispatch, ScreenUpdating.w)
	COM_PutPropertyBool(Application, @"ScreenUpdating", ScreenUpdating, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_SetDefaultChart(Application.IDispatch, *FormatName.VARIANT, *Gallery.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Gallery, @args(0))
	COM_VarClone(*FormatName, @args(1))
	COM_CallFunction(Application, @"SetDefaultChart", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_SheetsInNewWorkbook(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"SheetsInNewWorkbook", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_SheetsInNewWorkbook(Application.IDispatch, SheetsInNewWorkbook.l)
	COM_PutPropertyLong(Application, @"SheetsInNewWorkbook", SheetsInNewWorkbook, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowChartTipNames(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowChartTipNames", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowChartTipNames(Application.IDispatch, ShowChartTipNames.w)
	COM_PutPropertyBool(Application, @"ShowChartTipNames", ShowChartTipNames, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowChartTipValues(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowChartTipValues", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowChartTipValues(Application.IDispatch, ShowChartTipValues.w)
	COM_PutPropertyBool(Application, @"ShowChartTipValues", ShowChartTipValues, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_StandardFont(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"StandardFont", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_StandardFont(Application.IDispatch, StandardFont.s)
	COM_PutPropertyString(Application, @"StandardFont", StandardFont, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_StandardFontSize(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"StandardFontSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_StandardFontSize(Application.IDispatch, StandardFontSize.d)
	COM_PutPropertyDouble(Application, @"StandardFontSize", StandardFontSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_StartupPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"StartupPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_StatusBar(Application.IDispatch, *result.VARIANT)
	COM_GetProperty(Application, @"StatusBar", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_StatusBar(Application.IDispatch, *StatusBar.VARIANT)
	COM_PutProperty(Application, @"StatusBar", *StatusBar, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_TemplatesPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"TemplatesPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowToolTips(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowToolTips", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowToolTips(Application.IDispatch, ShowToolTips.w)
	COM_PutPropertyBool(Application, @"ShowToolTips", ShowToolTips, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_Top(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Top(Application.IDispatch, Top.d)
	COM_PutPropertyDouble(Application, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_DefaultSaveFormat(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"DefaultSaveFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DefaultSaveFormat(Application.IDispatch, DefaultSaveFormat.l)
	COM_PutPropertyLong(Application, @"DefaultSaveFormat", DefaultSaveFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_TransitionMenuKey(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"TransitionMenuKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_TransitionMenuKey(Application.IDispatch, TransitionMenuKey.s)
	COM_PutPropertyString(Application, @"TransitionMenuKey", TransitionMenuKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_TransitionMenuKeyAction(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"TransitionMenuKeyAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_TransitionMenuKeyAction(Application.IDispatch, TransitionMenuKeyAction.l)
	COM_PutPropertyLong(Application, @"TransitionMenuKeyAction", TransitionMenuKeyAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_TransitionNavigKeys(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"TransitionNavigKeys", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_TransitionNavigKeys(Application.IDispatch, TransitionNavigKeys.w)
	COM_PutPropertyBool(Application, @"TransitionNavigKeys", TransitionNavigKeys, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Undo(Application.IDispatch)
	COM_CallFunction(Application, @"Undo", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_UsableHeight(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"UsableHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_UsableWidth(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"UsableWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_UserControl(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"UserControl", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_UserControl(Application.IDispatch, UserControl.w)
	COM_PutPropertyBool(Application, @"UserControl", UserControl, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_UserName(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"UserName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_UserName(Application.IDispatch, UserName.s)
	COM_PutPropertyString(Application, @"UserName", UserName, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_Value(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_VBE(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"VBE", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_Version(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"Version", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_Visible(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Visible(Application.IDispatch, Visible.w)
	COM_PutPropertyBool(Application, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Volatile(Application.IDispatch, *Volatile.VARIANT)
	COM_CallFunction(Application, @"Volatile", *Volatile, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application__Wait(Application.IDispatch, *Time.VARIANT)
	COM_CallFunction(Application, @"_Wait", *Time, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Application_Get_Width(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Application, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_Width(Application.IDispatch, Width.d)
	COM_PutPropertyDouble(Application, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_WindowsForPens(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"WindowsForPens", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_WindowState(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"WindowState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_WindowState(Application.IDispatch, WindowState.l)
	COM_PutPropertyLong(Application, @"WindowState", WindowState, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_UILanguage(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"UILanguage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_UILanguage(Application.IDispatch, UILanguage.l)
	COM_PutPropertyLong(Application, @"UILanguage", UILanguage, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_DefaultSheetDirection(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"DefaultSheetDirection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DefaultSheetDirection(Application.IDispatch, DefaultSheetDirection.l)
	COM_PutPropertyLong(Application, @"DefaultSheetDirection", DefaultSheetDirection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CursorMovement(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CursorMovement", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CursorMovement(Application.IDispatch, CursorMovement.l)
	COM_PutPropertyLong(Application, @"CursorMovement", CursorMovement, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ControlCharacters(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ControlCharacters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ControlCharacters(Application.IDispatch, ControlCharacters.w)
	COM_PutPropertyBool(Application, @"ControlCharacters", ControlCharacters, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application__WSFunction(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(Application, @"_WSFunction", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableEvents(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableEvents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableEvents(Application.IDispatch, EnableEvents.w)
	COM_PutPropertyBool(Application, @"EnableEvents", EnableEvents, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayInfoWindow(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayInfoWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayInfoWindow(Application.IDispatch, DisplayInfoWindow.w)
	COM_PutPropertyBool(Application, @"DisplayInfoWindow", DisplayInfoWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Wait(Application.IDispatch, *Time.VARIANT)
	ProcedureReturn COM_CallFunctionBool(Application, @"Wait", *Time, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ExtendList(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ExtendList", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ExtendList(Application.IDispatch, ExtendList.w)
	COM_PutPropertyBool(Application, @"ExtendList", ExtendList, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_OLEDBErrors(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"OLEDBErrors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_GetPhonetic(Application.IDispatch, *Text.VARIANT)
	ProcedureReturn COM_CallFunctionString(Application, @"GetPhonetic", *Text, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_COMAddIns(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"COMAddIns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_DefaultWebOptions(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"DefaultWebOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_ProductCode(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"ProductCode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_UserLibraryPath(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"UserLibraryPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_AutoPercentEntry(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"AutoPercentEntry", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AutoPercentEntry(Application.IDispatch, AutoPercentEntry.w)
	COM_PutPropertyBool(Application, @"AutoPercentEntry", AutoPercentEntry, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_LanguageSettings(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"LanguageSettings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Dummy101(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Dummy101", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy12(Application.IDispatch, p1.IDispatch, p2.IDispatch)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = p2
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = p1
	COM_CallFunction(Application, @"Dummy12", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_AnswerWizard(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"AnswerWizard", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_CalculateFull(Application.IDispatch)
	COM_CallFunction(Application, @"CalculateFull", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_FindFile(Application.IDispatch)
	ProcedureReturn COM_CallFunctionBool(Application, @"FindFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CalculationVersion(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CalculationVersion", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowWindowsInTaskbar(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowWindowsInTaskbar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowWindowsInTaskbar(Application.IDispatch, ShowWindowsInTaskbar.w)
	COM_PutPropertyBool(Application, @"ShowWindowsInTaskbar", ShowWindowsInTaskbar, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_FeatureInstall(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"FeatureInstall", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_FeatureInstall(Application.IDispatch, FeatureInstall.l)
	COM_PutPropertyLong(Application, @"FeatureInstall", FeatureInstall, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_Ready(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"Ready", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy13(Application.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(Application, @"Dummy13", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_FindFormat(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"FindFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_FindFormat_(Application.IDispatch, FindFormat.IDispatch)
	COM_PutPropertyDispatch(Application, @"FindFormat", FindFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ReplaceFormat(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ReplaceFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ReplaceFormat_(Application.IDispatch, ReplaceFormat.IDispatch)
	COM_PutPropertyDispatch(Application, @"ReplaceFormat", ReplaceFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_UsedObjects(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"UsedObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CalculationState(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CalculationState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_CalculationInterruptKey(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"CalculationInterruptKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_CalculationInterruptKey(Application.IDispatch, CalculationInterruptKey.l)
	COM_PutPropertyLong(Application, @"CalculationInterruptKey", CalculationInterruptKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Watches(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Watches", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayFunctionToolTips(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayFunctionToolTips", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayFunctionToolTips(Application.IDispatch, DisplayFunctionToolTips.w)
	COM_PutPropertyBool(Application, @"DisplayFunctionToolTips", DisplayFunctionToolTips, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_AutomationSecurity(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"AutomationSecurity", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AutomationSecurity(Application.IDispatch, AutomationSecurity.l)
	COM_PutPropertyLong(Application, @"AutomationSecurity", AutomationSecurity, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_FileDialog(Application.IDispatch, fileDialogType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = fileDialogType
	ProcedureReturn COM_GetPropertyDispatch(Application, @"FileDialog", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy14(Application.IDispatch)
	COM_CallFunction(Application, @"Dummy14", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_CalculateFullRebuild(Application.IDispatch)
	COM_CallFunction(Application, @"CalculateFullRebuild", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayPasteOptions(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayPasteOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayPasteOptions(Application.IDispatch, DisplayPasteOptions.w)
	COM_PutPropertyBool(Application, @"DisplayPasteOptions", DisplayPasteOptions, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayInsertOptions(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayInsertOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayInsertOptions(Application.IDispatch, DisplayInsertOptions.w)
	COM_PutPropertyBool(Application, @"DisplayInsertOptions", DisplayInsertOptions, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_GenerateGetPivotData(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"GenerateGetPivotData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_GenerateGetPivotData(Application.IDispatch, GenerateGetPivotData.w)
	COM_PutPropertyBool(Application, @"GenerateGetPivotData", GenerateGetPivotData, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_AutoRecover(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"AutoRecover", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Hwnd(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Hwnd", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_Hinstance(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"Hinstance", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_CheckAbort(Application.IDispatch, *KeepAbort.VARIANT)
	COM_CallFunction(Application, @"CheckAbort", *KeepAbort, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ErrorCheckingOptions(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ErrorCheckingOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_AutoFormatAsYouTypeReplaceHyperlinks(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"AutoFormatAsYouTypeReplaceHyperlinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AutoFormatAsYouTypeReplaceHyperlinks(Application.IDispatch, AutoFormatAsYouTypeReplaceHyperlinks.w)
	COM_PutPropertyBool(Application, @"AutoFormatAsYouTypeReplaceHyperlinks", AutoFormatAsYouTypeReplaceHyperlinks, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_SmartTagRecognizers(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"SmartTagRecognizers", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_NewWorkbook(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"NewWorkbook", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_SpellingOptions(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"SpellingOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Speech(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Speech", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_MapPaperSize(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"MapPaperSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MapPaperSize(Application.IDispatch, MapPaperSize.w)
	COM_PutPropertyBool(Application, @"MapPaperSize", MapPaperSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowStartupDialog(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowStartupDialog", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowStartupDialog(Application.IDispatch, ShowStartupDialog.w)
	COM_PutPropertyBool(Application, @"ShowStartupDialog", ShowStartupDialog, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_DecimalSeparator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"DecimalSeparator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DecimalSeparator(Application.IDispatch, DecimalSeparator.s)
	COM_PutPropertyString(Application, @"DecimalSeparator", DecimalSeparator, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Application_Get_ThousandsSeparator(Application.IDispatch)
	ProcedureReturn COM_GetPropertyString(Application, @"ThousandsSeparator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ThousandsSeparator(Application.IDispatch, ThousandsSeparator.s)
	COM_PutPropertyString(Application, @"ThousandsSeparator", ThousandsSeparator, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_UseSystemSeparators(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"UseSystemSeparators", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_UseSystemSeparators(Application.IDispatch, UseSystemSeparators.w)
	COM_PutPropertyBool(Application, @"UseSystemSeparators", UseSystemSeparators, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_ThisCell(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"ThisCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_RTD(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"RTD", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayDocumentActionTaskPane(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayDocumentActionTaskPane", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayDocumentActionTaskPane(Application.IDispatch, DisplayDocumentActionTaskPane.w)
	COM_PutPropertyBool(Application, @"DisplayDocumentActionTaskPane", DisplayDocumentActionTaskPane, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_DisplayXMLSourcePane(Application.IDispatch, *XmlMap.VARIANT)
	COM_CallFunction(Application, @"DisplayXMLSourcePane", *XmlMap, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ArbitraryXMLSupportAvailable(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ArbitraryXMLSupportAvailable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Support(Application.IDispatch, Object.IDispatch, ID.l, *arg.VARIANT, *result.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*arg, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = ID
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Object
	COM_CallFunction(Application, @"Support", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Dummy20(Application.IDispatch, grfCompareFunctions.l, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = grfCompareFunctions
	COM_CallFunction(Application, @"Dummy20", @args(), 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_MeasurementUnit(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"MeasurementUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_MeasurementUnit(Application.IDispatch, MeasurementUnit.l)
	COM_PutPropertyLong(Application, @"MeasurementUnit", MeasurementUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowSelectionFloaties(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowSelectionFloaties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowSelectionFloaties(Application.IDispatch, ShowSelectionFloaties.w)
	COM_PutPropertyBool(Application, @"ShowSelectionFloaties", ShowSelectionFloaties, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowMenuFloaties(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowMenuFloaties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowMenuFloaties(Application.IDispatch, ShowMenuFloaties.w)
	COM_PutPropertyBool(Application, @"ShowMenuFloaties", ShowMenuFloaties, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_ShowDevTools(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"ShowDevTools", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_ShowDevTools(Application.IDispatch, ShowDevTools.w)
	COM_PutPropertyBool(Application, @"ShowDevTools", ShowDevTools, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableLivePreview(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableLivePreview", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableLivePreview(Application.IDispatch, EnableLivePreview.w)
	COM_PutPropertyBool(Application, @"EnableLivePreview", EnableLivePreview, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayDocumentInformationPanel(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayDocumentInformationPanel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayDocumentInformationPanel(Application.IDispatch, DisplayDocumentInformationPanel.w)
	COM_PutPropertyBool(Application, @"DisplayDocumentInformationPanel", DisplayDocumentInformationPanel, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_AlwaysUseClearType(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"AlwaysUseClearType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_AlwaysUseClearType(Application.IDispatch, AlwaysUseClearType.w)
	COM_PutPropertyBool(Application, @"AlwaysUseClearType", AlwaysUseClearType, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_WarnOnFunctionNameConflict(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"WarnOnFunctionNameConflict", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_WarnOnFunctionNameConflict(Application.IDispatch, WarnOnFunctionNameConflict.w)
	COM_PutPropertyBool(Application, @"WarnOnFunctionNameConflict", WarnOnFunctionNameConflict, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_FormulaBarHeight(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"FormulaBarHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_FormulaBarHeight(Application.IDispatch, FormulaBarHeight.l)
	COM_PutPropertyLong(Application, @"FormulaBarHeight", FormulaBarHeight, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DisplayFormulaAutoComplete(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DisplayFormulaAutoComplete", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DisplayFormulaAutoComplete(Application.IDispatch, DisplayFormulaAutoComplete.w)
	COM_PutPropertyBool(Application, @"DisplayFormulaAutoComplete", DisplayFormulaAutoComplete, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_GenerateTableRefs(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"GenerateTableRefs", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_GenerateTableRefs(Application.IDispatch, GenerateTableRefs.l)
	COM_PutPropertyLong(Application, @"GenerateTableRefs", GenerateTableRefs, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_Assistance(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"Assistance", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_CalculateUntilAsyncQueriesDone(Application.IDispatch)
	COM_CallFunction(Application, @"CalculateUntilAsyncQueriesDone", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_EnableLargeOperationAlert(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"EnableLargeOperationAlert", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_EnableLargeOperationAlert(Application.IDispatch, EnableLargeOperationAlert.w)
	COM_PutPropertyBool(Application, @"EnableLargeOperationAlert", EnableLargeOperationAlert, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Get_LargeOperationCellThousandCount(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"LargeOperationCellThousandCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_LargeOperationCellThousandCount(Application.IDispatch, LargeOperationCellThousandCount.l)
	COM_PutPropertyLong(Application, @"LargeOperationCellThousandCount", LargeOperationCellThousandCount, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_DeferAsyncQueries(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"DeferAsyncQueries", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_DeferAsyncQueries(Application.IDispatch, DeferAsyncQueries.w)
	COM_PutPropertyBool(Application, @"DeferAsyncQueries", DeferAsyncQueries, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_MultiThreadedCalculation(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"MultiThreadedCalculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_SharePointVersion(Application.IDispatch, bstrUrl.s)
	Dim args.VARIANT(0)
	Protected.l r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(bstrUrl)
	r = COM_CallFunctionLong(Application, @"SharePointVersion", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Application_Get_ActiveEncryptionSession(Application.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Application, @"ActiveEncryptionSession", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Application_Get_HighQualityModeForGraphics(Application.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Application, @"HighQualityModeForGraphics", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Application_Put_HighQualityModeForGraphics(Application.IDispatch, HighQualityModeForGraphics.w)
	COM_PutPropertyBool(Application, @"HighQualityModeForGraphics", HighQualityModeForGraphics, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Application_Get_FileExportConverters(Application.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Application, @"FileExportConverters", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Chart
;- -------------------------
ProcedureDLL.i Excel_Chart_Get_Application(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Creator(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Parent(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Activate(Chart.IDispatch)
	COM_CallFunction(Chart, @"Activate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Copy(Chart.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Chart, @"Copy", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Delete(Chart.IDispatch)
	COM_CallFunction(Chart, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get_CodeName(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get__CodeName(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"_CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put__CodeName(Chart.IDispatch, _CodeName.s)
	COM_PutPropertyString(Chart, @"_CodeName", _CodeName, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Index(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Move(Chart.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Chart, @"Move", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get_Name(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Name(Chart.IDispatch, Name.s)
	COM_PutPropertyString(Chart, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Next(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Next", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get_OnDoubleClick(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"OnDoubleClick", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_OnDoubleClick(Chart.IDispatch, OnDoubleClick.s)
	COM_PutPropertyString(Chart, @"OnDoubleClick", OnDoubleClick, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get_OnSheetActivate(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"OnSheetActivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_OnSheetActivate(Chart.IDispatch, OnSheetActivate.s)
	COM_PutPropertyString(Chart, @"OnSheetActivate", OnSheetActivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Chart_Get_OnSheetDeactivate(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyString(Chart, @"OnSheetDeactivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_OnSheetDeactivate(Chart.IDispatch, OnSheetDeactivate.s)
	COM_PutPropertyString(Chart, @"OnSheetDeactivate", OnSheetDeactivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_PageSetup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"PageSetup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Previous(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Previous", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart___PrintOut(Chart.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Chart, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_PrintPreview(Chart.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Chart, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__Protect(Chart.IDispatch, *Password.VARIANT, *DrawingObjects.VARIANT, *Contents.VARIANT, *Scenarios.VARIANT, *UserInterfaceOnly.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*UserInterfaceOnly, @args(0))
	COM_VarClone(*Scenarios, @args(1))
	COM_VarClone(*Contents, @args(2))
	COM_VarClone(*DrawingObjects, @args(3))
	COM_VarClone(*Password, @args(4))
	COM_CallFunction(Chart, @"_Protect", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectContents(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectContents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectDrawingObjects(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectDrawingObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectionMode(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectionMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__Dummy23(Chart.IDispatch)
	COM_CallFunction(Chart, @"_Dummy23", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__SaveAs(Chart.IDispatch, Filename.s, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*TextVisualLayout, @args(0))
	COM_VarClone(*TextCodepage, @args(1))
	COM_VarClone(*AddToMru, @args(2))
	COM_VarClone(*CreateBackup, @args(3))
	COM_VarClone(*ReadOnlyRecommended, @args(4))
	COM_VarClone(*WriteResPassword, @args(5))
	COM_VarClone(*Password, @args(6))
	COM_VarClone(*FileFormat, @args(7))
	args(8)\vt = #VT_BSTR : args(8)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Chart, @"_SaveAs", @args(), 9, 0, @_g_Excel_error)
	VariantClear_(@args(8))
EndProcedure

ProcedureDLL.l Excel_Chart_Select(Chart.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Chart, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Unprotect(Chart.IDispatch, *Password.VARIANT)
	COM_CallFunction(Chart, @"Unprotect", *Password, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Visible(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Visible(Chart.IDispatch, Visible.l)
	COM_PutPropertyLong(Chart, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Shapes(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Shapes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__ApplyDataLabels(Chart.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*HasLeaderLines, @args(0))
	COM_VarClone(*AutoText, @args(1))
	COM_VarClone(*LegendKey, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Type
	COM_CallFunction(Chart, @"_ApplyDataLabels", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Arcs(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Arcs", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Area3DGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Area3DGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_AreaGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"AreaGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_AutoFormat(Chart.IDispatch, Gallery.l, *Format.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Format, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Gallery
	COM_CallFunction(Chart, @"AutoFormat", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_AutoScaling(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"AutoScaling", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_AutoScaling(Chart.IDispatch, AutoScaling.w)
	COM_PutPropertyBool(Chart, @"AutoScaling", AutoScaling, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Axes(Chart.IDispatch, *Type.VARIANT, AxisGroup.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = AxisGroup
	COM_VarClone(*Type, @args(1))
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Axes", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_SetBackgroundPicture(Chart.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Chart, @"SetBackgroundPicture", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Bar3DGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Bar3DGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_BarGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"BarGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Buttons(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Buttons", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_ChartArea(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"ChartArea", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_ChartGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"ChartGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_ChartObjects(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"ChartObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_ChartTitle(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"ChartTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ChartWizard(Chart.IDispatch, *Source.VARIANT, *Gallery.VARIANT, *Format.VARIANT, *PlotBy.VARIANT, *CategoryLabels.VARIANT, *SeriesLabels.VARIANT, *HasLegend.VARIANT, *Title.VARIANT, *CategoryTitle.VARIANT, *ValueTitle.VARIANT, *ExtraTitle.VARIANT)
	Dim args.VARIANT(10)
	COM_VarClone(*ExtraTitle, @args(0))
	COM_VarClone(*ValueTitle, @args(1))
	COM_VarClone(*CategoryTitle, @args(2))
	COM_VarClone(*Title, @args(3))
	COM_VarClone(*HasLegend, @args(4))
	COM_VarClone(*SeriesLabels, @args(5))
	COM_VarClone(*CategoryLabels, @args(6))
	COM_VarClone(*PlotBy, @args(7))
	COM_VarClone(*Format, @args(8))
	COM_VarClone(*Gallery, @args(9))
	COM_VarClone(*Source, @args(10))
	COM_CallFunction(Chart, @"ChartWizard", @args(), 11, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_CheckBoxes(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"CheckBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_CheckSpelling(Chart.IDispatch, *CustomDictionary.VARIANT, *IgnoreUppercase.VARIANT, *AlwaysSuggest.VARIANT, *SpellLang.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*SpellLang, @args(0))
	COM_VarClone(*AlwaysSuggest, @args(1))
	COM_VarClone(*IgnoreUppercase, @args(2))
	COM_VarClone(*CustomDictionary, @args(3))
	COM_CallFunction(Chart, @"CheckSpelling", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Column3DGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Column3DGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_ColumnGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"ColumnGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_CopyPicture(Chart.IDispatch, Appearance.l, Format.l, Size.l)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_I4 : args(0)\lVal = Size
	args(1)\vt = #VT_I4 : args(1)\lVal = Format
	args(2)\vt = #VT_I4 : args(2)\lVal = Appearance
	COM_CallFunction(Chart, @"CopyPicture", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Corners(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Corners", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_CreatePublisher(Chart.IDispatch, *Edition.VARIANT, Appearance.l, Size.l, *ContainsPICT.VARIANT, *ContainsBIFF.VARIANT, *ContainsRTF.VARIANT, *ContainsVALU.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*ContainsVALU, @args(0))
	COM_VarClone(*ContainsRTF, @args(1))
	COM_VarClone(*ContainsBIFF, @args(2))
	COM_VarClone(*ContainsPICT, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = Size
	args(5)\vt = #VT_I4 : args(5)\lVal = Appearance
	COM_VarClone(*Edition, @args(6))
	COM_CallFunction(Chart, @"CreatePublisher", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_DataTable(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"DataTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_DepthPercent(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"DepthPercent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_DepthPercent(Chart.IDispatch, DepthPercent.l)
	COM_PutPropertyLong(Chart, @"DepthPercent", DepthPercent, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Deselect(Chart.IDispatch)
	COM_CallFunction(Chart, @"Deselect", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_DisplayBlanksAs(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"DisplayBlanksAs", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_DisplayBlanksAs(Chart.IDispatch, DisplayBlanksAs.l)
	COM_PutPropertyLong(Chart, @"DisplayBlanksAs", DisplayBlanksAs, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_DoughnutGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"DoughnutGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Drawings(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Drawings", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_DrawingObjects(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"DrawingObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_DropDowns(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"DropDowns", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Elevation(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Elevation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Elevation(Chart.IDispatch, Elevation.l)
	COM_PutPropertyLong(Chart, @"Elevation", Elevation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Evaluate(Chart.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Chart, @"Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__Evaluate(Chart.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Chart, @"_Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Floor(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Floor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_GapDepth(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"GapDepth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_GapDepth(Chart.IDispatch, GapDepth.l)
	COM_PutPropertyLong(Chart, @"GapDepth", GapDepth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_GroupBoxes(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"GroupBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_GroupObjects(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"GroupObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_HasAxis(Chart.IDispatch, *Index1.VARIANT, *Index2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Index2, @args(0))
	COM_VarClone(*Index1, @args(1))
	COM_GetProperty(Chart, @"HasAxis", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HasAxis(Chart.IDispatch, *Index1.VARIANT, *Index2.VARIANT, *HasAxis.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*HasAxis, @args(0))
	COM_VarClone(*Index2, @args(1))
	COM_VarClone(*Index1, @args(2))
	COM_PutProperty(Chart, @"HasAxis", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_HasDataTable(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"HasDataTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HasDataTable(Chart.IDispatch, HasDataTable.w)
	COM_PutPropertyBool(Chart, @"HasDataTable", HasDataTable, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_HasLegend(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"HasLegend", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HasLegend(Chart.IDispatch, HasLegend.w)
	COM_PutPropertyBool(Chart, @"HasLegend", HasLegend, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_HasTitle(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"HasTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HasTitle(Chart.IDispatch, HasTitle.w)
	COM_PutPropertyBool(Chart, @"HasTitle", HasTitle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_HeightPercent(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"HeightPercent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HeightPercent(Chart.IDispatch, HeightPercent.l)
	COM_PutPropertyLong(Chart, @"HeightPercent", HeightPercent, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Hyperlinks(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Hyperlinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Labels(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Labels", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Legend(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Legend", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Line3DGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Line3DGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_LineGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"LineGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Lines(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Lines", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_ListBoxes(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"ListBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Location(Chart.IDispatch, Where.l, *Name.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Name, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Where
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Location", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_OLEObjects(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"OLEObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_OptionButtons(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"OptionButtons", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Ovals(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Ovals", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Paste(Chart.IDispatch, *Type.VARIANT)
	COM_CallFunction(Chart, @"Paste", *Type, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Perspective(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Perspective", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Perspective(Chart.IDispatch, Perspective.l)
	COM_PutPropertyLong(Chart, @"Perspective", Perspective, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Pictures(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Pictures", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Pie3DGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Pie3DGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_PieGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"PieGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_PlotArea(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"PlotArea", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_PlotVisibleOnly(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"PlotVisibleOnly", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_PlotVisibleOnly(Chart.IDispatch, PlotVisibleOnly.w)
	COM_PutPropertyBool(Chart, @"PlotVisibleOnly", PlotVisibleOnly, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_RadarGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"RadarGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Rectangles(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Rectangles", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_RightAngleAxes(Chart.IDispatch, *result.VARIANT)
	COM_GetProperty(Chart, @"RightAngleAxes", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_RightAngleAxes(Chart.IDispatch, *RightAngleAxes.VARIANT)
	COM_PutProperty(Chart, @"RightAngleAxes", *RightAngleAxes, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Rotation(Chart.IDispatch, *result.VARIANT)
	COM_GetProperty(Chart, @"Rotation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Rotation(Chart.IDispatch, *Rotation.VARIANT)
	COM_PutProperty(Chart, @"Rotation", *Rotation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_ScrollBars(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"ScrollBars", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_SeriesCollection(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"SeriesCollection", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_SizeWithWindow(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"SizeWithWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_SizeWithWindow(Chart.IDispatch, SizeWithWindow.w)
	COM_PutPropertyBool(Chart, @"SizeWithWindow", SizeWithWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ShowWindow(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ShowWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ShowWindow(Chart.IDispatch, ShowWindow.w)
	COM_PutPropertyBool(Chart, @"ShowWindow", ShowWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Spinners(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"Spinners", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_SubType(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"SubType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_SubType(Chart.IDispatch, SubType.l)
	COM_PutPropertyLong(Chart, @"SubType", SubType, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_SurfaceGroup(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"SurfaceGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_TextBoxes(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"TextBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_Type(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_Type(Chart.IDispatch, Type.l)
	COM_PutPropertyLong(Chart, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_ChartType(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"ChartType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ChartType(Chart.IDispatch, ChartType.l)
	COM_PutPropertyLong(Chart, @"ChartType", ChartType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ApplyCustomType(Chart.IDispatch, ChartType.l, *TypeName.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*TypeName, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = ChartType
	COM_CallFunction(Chart, @"ApplyCustomType", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Walls(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Walls", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_WallsAndGridlines2D(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"WallsAndGridlines2D", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_WallsAndGridlines2D(Chart.IDispatch, WallsAndGridlines2D.w)
	COM_PutPropertyBool(Chart, @"WallsAndGridlines2D", WallsAndGridlines2D, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_XYGroups(Chart.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Chart, @"XYGroups", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_BarShape(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"BarShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_BarShape(Chart.IDispatch, BarShape.l)
	COM_PutPropertyLong(Chart, @"BarShape", BarShape, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_PlotBy(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Chart, @"PlotBy", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_PlotBy(Chart.IDispatch, PlotBy.l)
	COM_PutPropertyLong(Chart, @"PlotBy", PlotBy, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_CopyChartBuild(Chart.IDispatch)
	COM_CallFunction(Chart, @"CopyChartBuild", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectFormatting(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectFormatting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ProtectFormatting(Chart.IDispatch, ProtectFormatting.w)
	COM_PutPropertyBool(Chart, @"ProtectFormatting", ProtectFormatting, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectData(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ProtectData(Chart.IDispatch, ProtectData.w)
	COM_PutPropertyBool(Chart, @"ProtectData", ProtectData, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectGoalSeek(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectGoalSeek", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ProtectGoalSeek(Chart.IDispatch, ProtectGoalSeek.w)
	COM_PutPropertyBool(Chart, @"ProtectGoalSeek", ProtectGoalSeek, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ProtectSelection(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ProtectSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ProtectSelection(Chart.IDispatch, ProtectSelection.w)
	COM_PutPropertyBool(Chart, @"ProtectSelection", ProtectSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_GetChartElement(Chart.IDispatch, x.l, y.l, ElementID.l, Arg1.l, Arg2.l)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_I4 : args(0)\lVal = Arg2
	args(1)\vt = #VT_I4 : args(1)\lVal = Arg1
	args(2)\vt = #VT_I4 : args(2)\lVal = ElementID
	args(3)\vt = #VT_I4 : args(3)\lVal = y
	args(4)\vt = #VT_I4 : args(4)\lVal = x
	COM_CallFunction(Chart, @"GetChartElement", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_SetSourceData(Chart.IDispatch, Source.IDispatch, *PlotBy.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*PlotBy, @args(0))
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Source
	COM_CallFunction(Chart, @"SetSourceData", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Export(Chart.IDispatch, Filename.s, *FilterName.VARIANT, *Interactive.VARIANT)
	Dim args.VARIANT(2)
	Protected.w r
	COM_VarClone(*Interactive, @args(0))
	COM_VarClone(*FilterName, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionBool(Chart, @"Export", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Chart_Refresh(Chart.IDispatch)
	COM_CallFunction(Chart, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_PivotLayout(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"PivotLayout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_HasPivotFields(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"HasPivotFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_HasPivotFields(Chart.IDispatch, HasPivotFields.w)
	COM_PutPropertyBool(Chart, @"HasPivotFields", HasPivotFields, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Scripts(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Scripts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart__PrintOut(Chart.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Chart, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_Tab(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"Tab", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_MailEnvelope(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"MailEnvelope", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ApplyDataLabels(Chart.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT, *ShowSeriesName.VARIANT, *ShowCategoryName.VARIANT, *ShowValue.VARIANT, *ShowPercentage.VARIANT, *ShowBubbleSize.VARIANT, *Separator.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*Separator, @args(0))
	COM_VarClone(*ShowBubbleSize, @args(1))
	COM_VarClone(*ShowPercentage, @args(2))
	COM_VarClone(*ShowValue, @args(3))
	COM_VarClone(*ShowCategoryName, @args(4))
	COM_VarClone(*ShowSeriesName, @args(5))
	COM_VarClone(*HasLeaderLines, @args(6))
	COM_VarClone(*AutoText, @args(7))
	COM_VarClone(*LegendKey, @args(8))
	args(9)\vt = #VT_I4 : args(9)\lVal = Type
	COM_CallFunction(Chart, @"ApplyDataLabels", @args(), 10, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_SaveAs(Chart.IDispatch, Filename.s, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT, *Local.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*Local, @args(0))
	COM_VarClone(*TextVisualLayout, @args(1))
	COM_VarClone(*TextCodepage, @args(2))
	COM_VarClone(*AddToMru, @args(3))
	COM_VarClone(*CreateBackup, @args(4))
	COM_VarClone(*ReadOnlyRecommended, @args(5))
	COM_VarClone(*WriteResPassword, @args(6))
	COM_VarClone(*Password, @args(7))
	COM_VarClone(*FileFormat, @args(8))
	args(9)\vt = #VT_BSTR : args(9)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Chart, @"SaveAs", @args(), 10, 0, @_g_Excel_error)
	VariantClear_(@args(9))
EndProcedure

ProcedureDLL.l Excel_Chart_Protect(Chart.IDispatch, *Password.VARIANT, *DrawingObjects.VARIANT, *Contents.VARIANT, *Scenarios.VARIANT, *UserInterfaceOnly.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*UserInterfaceOnly, @args(0))
	COM_VarClone(*Scenarios, @args(1))
	COM_VarClone(*Contents, @args(2))
	COM_VarClone(*DrawingObjects, @args(3))
	COM_VarClone(*Password, @args(4))
	COM_CallFunction(Chart, @"Protect", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ApplyLayout(Chart.IDispatch, Layout.l, *ChartType.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ChartType, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Layout
	COM_CallFunction(Chart, @"ApplyLayout", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_SetElement(Chart.IDispatch, Element.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Element
	COM_CallFunction(Chart, @"SetElement", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Chart_Get_ShowDataLabelsOverMaximum(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Chart, @"ShowDataLabelsOverMaximum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ShowDataLabelsOverMaximum(Chart.IDispatch, ShowDataLabelsOverMaximum.w)
	COM_PutPropertyBool(Chart, @"ShowDataLabelsOverMaximum", ShowDataLabelsOverMaximum, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_SideWall(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"SideWall", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Chart_Get_BackWall(Chart.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Chart, @"BackWall", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_PrintOut(Chart.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Chart, @"PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ApplyChartTemplate(Chart.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Chart, @"ApplyChartTemplate", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_Chart_SaveChartTemplate(Chart.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Chart, @"SaveChartTemplate", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_Chart_SetDefaultChart(Chart.IDispatch, *Name.VARIANT)
	COM_CallFunction(Chart, @"SetDefaultChart", *Name, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ExportAsFixedFormat(Chart.IDispatch, Type.l, *Filename.VARIANT, *Quality.VARIANT, *IncludeDocProperties.VARIANT, *IgnorePrintAreas.VARIANT, *From.VARIANT, *To.VARIANT, *OpenAfterPublish.VARIANT, *FixedFormatExtClassPtr.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*FixedFormatExtClassPtr, @args(0))
	COM_VarClone(*OpenAfterPublish, @args(1))
	COM_VarClone(*To, @args(2))
	COM_VarClone(*From, @args(3))
	COM_VarClone(*IgnorePrintAreas, @args(4))
	COM_VarClone(*IncludeDocProperties, @args(5))
	COM_VarClone(*Quality, @args(6))
	COM_VarClone(*Filename, @args(7))
	args(8)\vt = #VT_I4 : args(8)\lVal = Type
	COM_CallFunction(Chart, @"ExportAsFixedFormat", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Get_ChartStyle(Chart.IDispatch, *result.VARIANT)
	COM_GetProperty(Chart, @"ChartStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_Put_ChartStyle(Chart.IDispatch, *ChartStyle.VARIANT)
	COM_PutProperty(Chart, @"ChartStyle", *ChartStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Chart_ClearToMatchStyle(Chart.IDispatch)
	COM_CallFunction(Chart, @"ClearToMatchStyle", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Sheets
;- -------------------------
ProcedureDLL.i Excel_Sheets_Get_Application(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Get_Creator(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sheets, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get_Parent(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Add(Sheets.IDispatch, *Before.VARIANT, *After.VARIANT, *Count.VARIANT, *Type.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*Count, @args(1))
	COM_VarClone(*After, @args(2))
	COM_VarClone(*Before, @args(3))
	ProcedureReturn COM_CallFunctionDispatch(Sheets, @"Add", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Copy(Sheets.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Sheets, @"Copy", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Get_Count(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sheets, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Delete(Sheets.IDispatch)
	COM_CallFunction(Sheets, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_FillAcrossSheets(Sheets.IDispatch, Range.IDispatch, Type.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Type
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Range
	COM_CallFunction(Sheets, @"FillAcrossSheets", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get_Item(Sheets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Move(Sheets.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Sheets, @"Move", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get__NewEnum(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Sheets, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets___PrintOut(Sheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Sheets, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_PrintPreview(Sheets.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Sheets, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Select(Sheets.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Sheets, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get_HPageBreaks(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"HPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get_VPageBreaks(Sheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"VPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Get_Visible(Sheets.IDispatch, *result.VARIANT)
	COM_GetProperty(Sheets, @"Visible", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_Put_Visible(Sheets.IDispatch, *Visible.VARIANT)
	COM_PutProperty(Sheets, @"Visible", *Visible, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sheets_Get__Default(Sheets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Sheets, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets__PrintOut(Sheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Sheets, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sheets_PrintOut(Sheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *IgnorePrintAreas.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*IgnorePrintAreas, @args(0))
	COM_VarClone(*PrToFileName, @args(1))
	COM_VarClone(*Collate, @args(2))
	COM_VarClone(*PrintToFile, @args(3))
	COM_VarClone(*ActivePrinter, @args(4))
	COM_VarClone(*Preview, @args(5))
	COM_VarClone(*Copies, @args(6))
	COM_VarClone(*To, @args(7))
	COM_VarClone(*From, @args(8))
	COM_CallFunction(Sheets, @"PrintOut", @args(), 9, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Worksheet
;- -------------------------
ProcedureDLL.i Excel_Worksheet_Get_Application(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_Creator(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Parent(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Activate(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"Activate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Copy(Worksheet.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Worksheet, @"Copy", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Delete(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_CodeName(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get__CodeName(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"_CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put__CodeName(Worksheet.IDispatch, _CodeName.s)
	COM_PutPropertyString(Worksheet, @"_CodeName", _CodeName, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_Index(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Move(Worksheet.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Worksheet, @"Move", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_Name(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_Name(Worksheet.IDispatch, Name.s)
	COM_PutPropertyString(Worksheet, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Next(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Next", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnDoubleClick(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnDoubleClick", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnDoubleClick(Worksheet.IDispatch, OnDoubleClick.s)
	COM_PutPropertyString(Worksheet, @"OnDoubleClick", OnDoubleClick, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnSheetActivate(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnSheetActivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnSheetActivate(Worksheet.IDispatch, OnSheetActivate.s)
	COM_PutPropertyString(Worksheet, @"OnSheetActivate", OnSheetActivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnSheetDeactivate(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnSheetDeactivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnSheetDeactivate(Worksheet.IDispatch, OnSheetDeactivate.s)
	COM_PutPropertyString(Worksheet, @"OnSheetDeactivate", OnSheetDeactivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_PageSetup(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"PageSetup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Previous(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Previous", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet___PrintOut(Worksheet.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Worksheet, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_PrintPreview(Worksheet.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Worksheet, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__Protect(Worksheet.IDispatch, *Password.VARIANT, *DrawingObjects.VARIANT, *Contents.VARIANT, *Scenarios.VARIANT, *UserInterfaceOnly.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*UserInterfaceOnly, @args(0))
	COM_VarClone(*Scenarios, @args(1))
	COM_VarClone(*Contents, @args(2))
	COM_VarClone(*DrawingObjects, @args(3))
	COM_VarClone(*Password, @args(4))
	COM_CallFunction(Worksheet, @"_Protect", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_ProtectContents(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"ProtectContents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_ProtectDrawingObjects(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"ProtectDrawingObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_ProtectionMode(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"ProtectionMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_ProtectScenarios(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"ProtectScenarios", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__SaveAs(Worksheet.IDispatch, Filename.s, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*TextVisualLayout, @args(0))
	COM_VarClone(*TextCodepage, @args(1))
	COM_VarClone(*AddToMru, @args(2))
	COM_VarClone(*CreateBackup, @args(3))
	COM_VarClone(*ReadOnlyRecommended, @args(4))
	COM_VarClone(*WriteResPassword, @args(5))
	COM_VarClone(*Password, @args(6))
	COM_VarClone(*FileFormat, @args(7))
	args(8)\vt = #VT_BSTR : args(8)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Worksheet, @"_SaveAs", @args(), 9, 0, @_g_Excel_error)
	VariantClear_(@args(8))
EndProcedure

ProcedureDLL.l Excel_Worksheet_Select(Worksheet.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Worksheet, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Unprotect(Worksheet.IDispatch, *Password.VARIANT)
	COM_CallFunction(Worksheet, @"Unprotect", *Password, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_Visible(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_Visible(Worksheet.IDispatch, Visible.l)
	COM_PutPropertyLong(Worksheet, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Shapes(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Shapes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_TransitionExpEval(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"TransitionExpEval", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_TransitionExpEval(Worksheet.IDispatch, TransitionExpEval.w)
	COM_PutPropertyBool(Worksheet, @"TransitionExpEval", TransitionExpEval, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Arcs(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Arcs", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_AutoFilterMode(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"AutoFilterMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_AutoFilterMode(Worksheet.IDispatch, AutoFilterMode.w)
	COM_PutPropertyBool(Worksheet, @"AutoFilterMode", AutoFilterMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_SetBackgroundPicture(Worksheet.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Worksheet, @"SetBackgroundPicture", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.i Excel_Worksheet_Buttons(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Buttons", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Calculate(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"Calculate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_EnableCalculation(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"EnableCalculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnableCalculation(Worksheet.IDispatch, EnableCalculation.w)
	COM_PutPropertyBool(Worksheet, @"EnableCalculation", EnableCalculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Cells(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Cells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_ChartObjects(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"ChartObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_CheckBoxes(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"CheckBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_CheckSpelling(Worksheet.IDispatch, *CustomDictionary.VARIANT, *IgnoreUppercase.VARIANT, *AlwaysSuggest.VARIANT, *SpellLang.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*SpellLang, @args(0))
	COM_VarClone(*AlwaysSuggest, @args(1))
	COM_VarClone(*IgnoreUppercase, @args(2))
	COM_VarClone(*CustomDictionary, @args(3))
	COM_CallFunction(Worksheet, @"CheckSpelling", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_CircularReference(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"CircularReference", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ClearArrows(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"ClearArrows", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Columns(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Columns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_ConsolidationFunction(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"ConsolidationFunction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_ConsolidationOptions(Worksheet.IDispatch, *result.VARIANT)
	COM_GetProperty(Worksheet, @"ConsolidationOptions", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_ConsolidationSources(Worksheet.IDispatch, *result.VARIANT)
	COM_GetProperty(Worksheet, @"ConsolidationSources", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_DisplayAutomaticPageBreaks(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"DisplayAutomaticPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_DisplayAutomaticPageBreaks(Worksheet.IDispatch, DisplayAutomaticPageBreaks.w)
	COM_PutPropertyBool(Worksheet, @"DisplayAutomaticPageBreaks", DisplayAutomaticPageBreaks, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Drawings(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Drawings", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_DrawingObjects(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"DrawingObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_DropDowns(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"DropDowns", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_EnableAutoFilter(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"EnableAutoFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnableAutoFilter(Worksheet.IDispatch, EnableAutoFilter.w)
	COM_PutPropertyBool(Worksheet, @"EnableAutoFilter", EnableAutoFilter, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_EnableSelection(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"EnableSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnableSelection(Worksheet.IDispatch, EnableSelection.l)
	COM_PutPropertyLong(Worksheet, @"EnableSelection", EnableSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_EnableOutlining(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"EnableOutlining", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnableOutlining(Worksheet.IDispatch, EnableOutlining.w)
	COM_PutPropertyBool(Worksheet, @"EnableOutlining", EnableOutlining, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_EnablePivotTable(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"EnablePivotTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnablePivotTable(Worksheet.IDispatch, EnablePivotTable.w)
	COM_PutPropertyBool(Worksheet, @"EnablePivotTable", EnablePivotTable, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Evaluate(Worksheet.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Worksheet, @"Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__Evaluate(Worksheet.IDispatch, *Name.VARIANT, *result.VARIANT)
	COM_CallFunction(Worksheet, @"_Evaluate", *Name, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_FilterMode(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"FilterMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ResetAllPageBreaks(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"ResetAllPageBreaks", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_GroupBoxes(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"GroupBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_GroupObjects(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"GroupObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Labels(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Labels", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Lines(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Lines", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_ListBoxes(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"ListBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Names(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Names", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_OLEObjects(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"OLEObjects", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnCalculate(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnCalculate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnCalculate(Worksheet.IDispatch, OnCalculate.s)
	COM_PutPropertyString(Worksheet, @"OnCalculate", OnCalculate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnData(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnData(Worksheet.IDispatch, OnData.s)
	COM_PutPropertyString(Worksheet, @"OnData", OnData, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_OnEntry(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"OnEntry", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_OnEntry(Worksheet.IDispatch, OnEntry.s)
	COM_PutPropertyString(Worksheet, @"OnEntry", OnEntry, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_OptionButtons(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"OptionButtons", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Outline(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Outline", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Ovals(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Ovals", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Paste(Worksheet.IDispatch, *Destination.VARIANT, *Link.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Link, @args(0))
	COM_VarClone(*Destination, @args(1))
	COM_CallFunction(Worksheet, @"Paste", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__PasteSpecial(Worksheet.IDispatch, *Format.VARIANT, *Link.VARIANT, *DisplayAsIcon.VARIANT, *IconFileName.VARIANT, *IconIndex.VARIANT, *IconLabel.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*IconLabel, @args(0))
	COM_VarClone(*IconIndex, @args(1))
	COM_VarClone(*IconFileName, @args(2))
	COM_VarClone(*DisplayAsIcon, @args(3))
	COM_VarClone(*Link, @args(4))
	COM_VarClone(*Format, @args(5))
	COM_CallFunction(Worksheet, @"_PasteSpecial", @args(), 6, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Pictures(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Pictures", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_PivotTables(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"PivotTables", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_PivotTableWizard(Worksheet.IDispatch, *SourceType.VARIANT, *SourceData.VARIANT, *TableDestination.VARIANT, *TableName.VARIANT, *RowGrand.VARIANT, *ColumnGrand.VARIANT, *SaveData.VARIANT, *HasAutoFormat.VARIANT, *AutoPage.VARIANT, *Reserved.VARIANT, *BackgroundQuery.VARIANT, *OptimizeCache.VARIANT, *PageFieldOrder.VARIANT, *PageFieldWrapCount.VARIANT, *ReadData.VARIANT, *Connection.VARIANT)
	Dim args.VARIANT(15)
	COM_VarClone(*Connection, @args(0))
	COM_VarClone(*ReadData, @args(1))
	COM_VarClone(*PageFieldWrapCount, @args(2))
	COM_VarClone(*PageFieldOrder, @args(3))
	COM_VarClone(*OptimizeCache, @args(4))
	COM_VarClone(*BackgroundQuery, @args(5))
	COM_VarClone(*Reserved, @args(6))
	COM_VarClone(*AutoPage, @args(7))
	COM_VarClone(*HasAutoFormat, @args(8))
	COM_VarClone(*SaveData, @args(9))
	COM_VarClone(*ColumnGrand, @args(10))
	COM_VarClone(*RowGrand, @args(11))
	COM_VarClone(*TableName, @args(12))
	COM_VarClone(*TableDestination, @args(13))
	COM_VarClone(*SourceData, @args(14))
	COM_VarClone(*SourceType, @args(15))
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"PivotTableWizard", @args(), 16, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Range(Worksheet.IDispatch, *Cell1.VARIANT, *Cell2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Cell2, @args(0))
	COM_VarClone(*Cell1, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Range", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Rectangles(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Rectangles", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Rows(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Rows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Scenarios(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Scenarios", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Worksheet_Get_ScrollArea(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyString(Worksheet, @"ScrollArea", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_ScrollArea(Worksheet.IDispatch, ScrollArea.s)
	COM_PutPropertyString(Worksheet, @"ScrollArea", ScrollArea, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_ScrollBars(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"ScrollBars", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ShowAllData(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"ShowAllData", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ShowDataForm(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"ShowDataForm", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Spinners(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"Spinners", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Worksheet_Get_StandardHeight(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Worksheet, @"StandardHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Worksheet_Get_StandardWidth(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Worksheet, @"StandardWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_StandardWidth(Worksheet.IDispatch, StandardWidth.d)
	COM_PutPropertyDouble(Worksheet, @"StandardWidth", StandardWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_TextBoxes(Worksheet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Worksheet, @"TextBoxes", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_TransitionFormEntry(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"TransitionFormEntry", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_TransitionFormEntry(Worksheet.IDispatch, TransitionFormEntry.w)
	COM_PutPropertyBool(Worksheet, @"TransitionFormEntry", TransitionFormEntry, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get_Type(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_UsedRange(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"UsedRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_HPageBreaks(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"HPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_VPageBreaks(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"VPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_QueryTables(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"QueryTables", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_DisplayPageBreaks(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"DisplayPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_DisplayPageBreaks(Worksheet.IDispatch, DisplayPageBreaks.w)
	COM_PutPropertyBool(Worksheet, @"DisplayPageBreaks", DisplayPageBreaks, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Comments(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Comments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Hyperlinks(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Hyperlinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ClearCircles(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"ClearCircles", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_CircleInvalid(Worksheet.IDispatch)
	COM_CallFunction(Worksheet, @"CircleInvalid", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Get__DisplayRightToLeft(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheet, @"_DisplayRightToLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put__DisplayRightToLeft(Worksheet.IDispatch, _DisplayRightToLeft.l)
	COM_PutPropertyLong(Worksheet, @"_DisplayRightToLeft", _DisplayRightToLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_AutoFilter(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"AutoFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_DisplayRightToLeft(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"DisplayRightToLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_DisplayRightToLeft(Worksheet.IDispatch, DisplayRightToLeft.w)
	COM_PutPropertyBool(Worksheet, @"DisplayRightToLeft", DisplayRightToLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Scripts(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Scripts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__PrintOut(Worksheet.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Worksheet, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet__CheckSpelling(Worksheet.IDispatch, *CustomDictionary.VARIANT, *IgnoreUppercase.VARIANT, *AlwaysSuggest.VARIANT, *SpellLang.VARIANT, *IgnoreFinalYaa.VARIANT, *SpellScript.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*SpellScript, @args(0))
	COM_VarClone(*IgnoreFinalYaa, @args(1))
	COM_VarClone(*SpellLang, @args(2))
	COM_VarClone(*AlwaysSuggest, @args(3))
	COM_VarClone(*IgnoreUppercase, @args(4))
	COM_VarClone(*CustomDictionary, @args(5))
	COM_CallFunction(Worksheet, @"_CheckSpelling", @args(), 6, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Tab(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Tab", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_MailEnvelope(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"MailEnvelope", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_SaveAs(Worksheet.IDispatch, Filename.s, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT, *Local.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*Local, @args(0))
	COM_VarClone(*TextVisualLayout, @args(1))
	COM_VarClone(*TextCodepage, @args(2))
	COM_VarClone(*AddToMru, @args(3))
	COM_VarClone(*CreateBackup, @args(4))
	COM_VarClone(*ReadOnlyRecommended, @args(5))
	COM_VarClone(*WriteResPassword, @args(6))
	COM_VarClone(*Password, @args(7))
	COM_VarClone(*FileFormat, @args(8))
	args(9)\vt = #VT_BSTR : args(9)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Worksheet, @"SaveAs", @args(), 10, 0, @_g_Excel_error)
	VariantClear_(@args(9))
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_CustomProperties(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"CustomProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_SmartTags(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"SmartTags", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Protection(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Protection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_PasteSpecial(Worksheet.IDispatch, *Format.VARIANT, *Link.VARIANT, *DisplayAsIcon.VARIANT, *IconFileName.VARIANT, *IconIndex.VARIANT, *IconLabel.VARIANT, *NoHTMLFormatting.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*NoHTMLFormatting, @args(0))
	COM_VarClone(*IconLabel, @args(1))
	COM_VarClone(*IconIndex, @args(2))
	COM_VarClone(*IconFileName, @args(3))
	COM_VarClone(*DisplayAsIcon, @args(4))
	COM_VarClone(*Link, @args(5))
	COM_VarClone(*Format, @args(6))
	COM_CallFunction(Worksheet, @"PasteSpecial", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Protect(Worksheet.IDispatch, *Password.VARIANT, *DrawingObjects.VARIANT, *Contents.VARIANT, *Scenarios.VARIANT, *UserInterfaceOnly.VARIANT, *AllowFormattingCells.VARIANT, *AllowFormattingColumns.VARIANT, *AllowFormattingRows.VARIANT, *AllowInsertingColumns.VARIANT, *AllowInsertingRows.VARIANT, *AllowInsertingHyperlinks.VARIANT, *AllowDeletingColumns.VARIANT, *AllowDeletingRows.VARIANT, *AllowSorting.VARIANT, *AllowFiltering.VARIANT, *AllowUsingPivotTables.VARIANT)
	Dim args.VARIANT(15)
	COM_VarClone(*AllowUsingPivotTables, @args(0))
	COM_VarClone(*AllowFiltering, @args(1))
	COM_VarClone(*AllowSorting, @args(2))
	COM_VarClone(*AllowDeletingRows, @args(3))
	COM_VarClone(*AllowDeletingColumns, @args(4))
	COM_VarClone(*AllowInsertingHyperlinks, @args(5))
	COM_VarClone(*AllowInsertingRows, @args(6))
	COM_VarClone(*AllowInsertingColumns, @args(7))
	COM_VarClone(*AllowFormattingRows, @args(8))
	COM_VarClone(*AllowFormattingColumns, @args(9))
	COM_VarClone(*AllowFormattingCells, @args(10))
	COM_VarClone(*UserInterfaceOnly, @args(11))
	COM_VarClone(*Scenarios, @args(12))
	COM_VarClone(*Contents, @args(13))
	COM_VarClone(*DrawingObjects, @args(14))
	COM_VarClone(*Password, @args(15))
	COM_CallFunction(Worksheet, @"Protect", @args(), 16, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_ListObjects(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"ListObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_XmlDataQuery(Worksheet.IDispatch, XPath.s, *SelectionNamespaces.VARIANT, *Map.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*Map, @args(0))
	COM_VarClone(*SelectionNamespaces, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(XPath)
	r = COM_CallFunctionDispatch(Worksheet, @"XmlDataQuery", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Worksheet_XmlMapQuery(Worksheet.IDispatch, XPath.s, *SelectionNamespaces.VARIANT, *Map.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*Map, @args(0))
	COM_VarClone(*SelectionNamespaces, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(XPath)
	r = COM_CallFunctionDispatch(Worksheet, @"XmlMapQuery", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Worksheet_PrintOut(Worksheet.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *IgnorePrintAreas.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*IgnorePrintAreas, @args(0))
	COM_VarClone(*PrToFileName, @args(1))
	COM_VarClone(*Collate, @args(2))
	COM_VarClone(*PrintToFile, @args(3))
	COM_VarClone(*ActivePrinter, @args(4))
	COM_VarClone(*Preview, @args(5))
	COM_VarClone(*Copies, @args(6))
	COM_VarClone(*To, @args(7))
	COM_VarClone(*From, @args(8))
	COM_CallFunction(Worksheet, @"PrintOut", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Worksheet_Get_EnableFormatConditionsCalculation(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Worksheet, @"EnableFormatConditionsCalculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_Put_EnableFormatConditionsCalculation(Worksheet.IDispatch, EnableFormatConditionsCalculation.w)
	COM_PutPropertyBool(Worksheet, @"EnableFormatConditionsCalculation", EnableFormatConditionsCalculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheet_Get_Sort(Worksheet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheet, @"Sort", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheet_ExportAsFixedFormat(Worksheet.IDispatch, Type.l, *Filename.VARIANT, *Quality.VARIANT, *IncludeDocProperties.VARIANT, *IgnorePrintAreas.VARIANT, *From.VARIANT, *To.VARIANT, *OpenAfterPublish.VARIANT, *FixedFormatExtClassPtr.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*FixedFormatExtClassPtr, @args(0))
	COM_VarClone(*OpenAfterPublish, @args(1))
	COM_VarClone(*To, @args(2))
	COM_VarClone(*From, @args(3))
	COM_VarClone(*IgnorePrintAreas, @args(4))
	COM_VarClone(*IncludeDocProperties, @args(5))
	COM_VarClone(*Quality, @args(6))
	COM_VarClone(*Filename, @args(7))
	args(8)\vt = #VT_I4 : args(8)\lVal = Type
	COM_CallFunction(Worksheet, @"ExportAsFixedFormat", @args(), 9, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Workbook
;- -------------------------
ProcedureDLL.i Excel_Workbook_Get_Application(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_Creator(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Parent(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_AcceptLabelsInFormulas(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"AcceptLabelsInFormulas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_AcceptLabelsInFormulas(Workbook.IDispatch, AcceptLabelsInFormulas.w)
	COM_PutPropertyBool(Workbook, @"AcceptLabelsInFormulas", AcceptLabelsInFormulas, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Activate(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"Activate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_ActiveChart(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"ActiveChart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_ActiveSheet(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"ActiveSheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Author(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Author", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Author(Workbook.IDispatch, Author.s)
	COM_PutPropertyString(Workbook, @"Author", Author, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_AutoUpdateFrequency(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"AutoUpdateFrequency", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_AutoUpdateFrequency(Workbook.IDispatch, AutoUpdateFrequency.l)
	COM_PutPropertyLong(Workbook, @"AutoUpdateFrequency", AutoUpdateFrequency, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_AutoUpdateSaveChanges(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"AutoUpdateSaveChanges", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_AutoUpdateSaveChanges(Workbook.IDispatch, AutoUpdateSaveChanges.w)
	COM_PutPropertyBool(Workbook, @"AutoUpdateSaveChanges", AutoUpdateSaveChanges, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_ChangeHistoryDuration(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"ChangeHistoryDuration", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ChangeHistoryDuration(Workbook.IDispatch, ChangeHistoryDuration.l)
	COM_PutPropertyLong(Workbook, @"ChangeHistoryDuration", ChangeHistoryDuration, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_BuiltinDocumentProperties(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"BuiltinDocumentProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ChangeFileAccess(Workbook.IDispatch, Mode.l, *WritePassword.VARIANT, *Notify.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Notify, @args(0))
	COM_VarClone(*WritePassword, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Mode
	COM_CallFunction(Workbook, @"ChangeFileAccess", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ChangeLink(Workbook.IDispatch, Name.s, NewName.s, Type.l)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_I4 : args(0)\lVal = Type
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(NewName)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Workbook, @"ChangeLink", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Charts(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Charts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Close(Workbook.IDispatch, *SaveChanges.VARIANT, *Filename.VARIANT, *RouteWorkbook.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*RouteWorkbook, @args(0))
	COM_VarClone(*Filename, @args(1))
	COM_VarClone(*SaveChanges, @args(2))
	COM_CallFunction(Workbook, @"Close", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_CodeName(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get__CodeName(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"_CodeName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put__CodeName(Workbook.IDispatch, _CodeName.s)
	COM_PutPropertyString(Workbook, @"_CodeName", _CodeName, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_Colors(Workbook.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Workbook, @"Colors", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Colors(Workbook.IDispatch, *Index.VARIANT, *Colors.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Colors, @args(0))
	COM_VarClone(*Index, @args(1))
	COM_PutProperty(Workbook, @"Colors", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_CommandBars(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"CommandBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Comments(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Comments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Comments(Workbook.IDispatch, Comments.s)
	COM_PutPropertyString(Workbook, @"Comments", Comments, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_ConflictResolution(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"ConflictResolution", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ConflictResolution(Workbook.IDispatch, ConflictResolution.l)
	COM_PutPropertyLong(Workbook, @"ConflictResolution", ConflictResolution, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Container(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Container", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_CreateBackup(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"CreateBackup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_CustomDocumentProperties(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"CustomDocumentProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_Date1904(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"Date1904", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Date1904(Workbook.IDispatch, Date1904.w)
	COM_PutPropertyBool(Workbook, @"Date1904", Date1904, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_DeleteNumberFormat(Workbook.IDispatch, NumberFormat.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(NumberFormat)
	COM_CallFunction(Workbook, @"DeleteNumberFormat", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_DialogSheets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"DialogSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_DisplayDrawingObjects(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"DisplayDrawingObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_DisplayDrawingObjects(Workbook.IDispatch, DisplayDrawingObjects.l)
	COM_PutPropertyLong(Workbook, @"DisplayDrawingObjects", DisplayDrawingObjects, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_ExclusiveAccess(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionBool(Workbook, @"ExclusiveAccess", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_FileFormat(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"FileFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ForwardMailer(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"ForwardMailer", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_FullName(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"FullName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_HasMailer(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"HasMailer", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_HasMailer(Workbook.IDispatch, HasMailer.w)
	COM_PutPropertyBool(Workbook, @"HasMailer", HasMailer, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_HasPassword(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"HasPassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_HasRoutingSlip(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"HasRoutingSlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_HasRoutingSlip(Workbook.IDispatch, HasRoutingSlip.w)
	COM_PutPropertyBool(Workbook, @"HasRoutingSlip", HasRoutingSlip, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_IsAddin(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"IsAddin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_IsAddin(Workbook.IDispatch, IsAddin.w)
	COM_PutPropertyBool(Workbook, @"IsAddin", IsAddin, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Keywords(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Keywords", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Keywords(Workbook.IDispatch, Keywords.s)
	COM_PutPropertyString(Workbook, @"Keywords", Keywords, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_LinkInfo(Workbook.IDispatch, Name.s, LinkInfo.l, *Type.VARIANT, *EditionRef.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*EditionRef, @args(0))
	COM_VarClone(*Type, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = LinkInfo
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Workbook, @"LinkInfo", @args(), 4, *result, @_g_Excel_error)
	VariantClear_(@args(3))
EndProcedure

ProcedureDLL.l Excel_Workbook_LinkSources(Workbook.IDispatch, *Type.VARIANT, *result.VARIANT)
	COM_CallFunction(Workbook, @"LinkSources", *Type, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Mailer(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Mailer", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_MergeWorkbook(Workbook.IDispatch, *Filename.VARIANT)
	COM_CallFunction(Workbook, @"MergeWorkbook", *Filename, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Modules(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Modules", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_MultiUserEditing(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"MultiUserEditing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Name(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Names(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Names", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_NewWindow(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Workbook, @"NewWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_OnSave(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"OnSave", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_OnSave(Workbook.IDispatch, OnSave.s)
	COM_PutPropertyString(Workbook, @"OnSave", OnSave, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_OnSheetActivate(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"OnSheetActivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_OnSheetActivate(Workbook.IDispatch, OnSheetActivate.s)
	COM_PutPropertyString(Workbook, @"OnSheetActivate", OnSheetActivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_OnSheetDeactivate(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"OnSheetDeactivate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_OnSheetDeactivate(Workbook.IDispatch, OnSheetDeactivate.s)
	COM_PutPropertyString(Workbook, @"OnSheetDeactivate", OnSheetDeactivate, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_OpenLinks(Workbook.IDispatch, Name.s, *ReadOnly.VARIANT, *Type.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*ReadOnly, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Workbook, @"OpenLinks", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Path(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Path", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_PersonalViewListSettings(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"PersonalViewListSettings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_PersonalViewListSettings(Workbook.IDispatch, PersonalViewListSettings.w)
	COM_PutPropertyBool(Workbook, @"PersonalViewListSettings", PersonalViewListSettings, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_PersonalViewPrintSettings(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"PersonalViewPrintSettings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_PersonalViewPrintSettings(Workbook.IDispatch, PersonalViewPrintSettings.w)
	COM_PutPropertyBool(Workbook, @"PersonalViewPrintSettings", PersonalViewPrintSettings, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_PivotCaches(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Workbook, @"PivotCaches", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Post(Workbook.IDispatch, *DestName.VARIANT)
	COM_CallFunction(Workbook, @"Post", *DestName, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_PrecisionAsDisplayed(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"PrecisionAsDisplayed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_PrecisionAsDisplayed(Workbook.IDispatch, PrecisionAsDisplayed.w)
	COM_PutPropertyBool(Workbook, @"PrecisionAsDisplayed", PrecisionAsDisplayed, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook___PrintOut(Workbook.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Workbook, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_PrintPreview(Workbook.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Workbook, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook__Protect(Workbook.IDispatch, *Password.VARIANT, *Structure.VARIANT, *Windows.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Windows, @args(0))
	COM_VarClone(*Structure, @args(1))
	COM_VarClone(*Password, @args(2))
	COM_CallFunction(Workbook, @"_Protect", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook__ProtectSharing(Workbook.IDispatch, *Filename.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *SharingPassword.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*SharingPassword, @args(0))
	COM_VarClone(*CreateBackup, @args(1))
	COM_VarClone(*ReadOnlyRecommended, @args(2))
	COM_VarClone(*WriteResPassword, @args(3))
	COM_VarClone(*Password, @args(4))
	COM_VarClone(*Filename, @args(5))
	COM_CallFunction(Workbook, @"_ProtectSharing", @args(), 6, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ProtectStructure(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ProtectStructure", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ProtectWindows(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ProtectWindows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ReadOnly(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ReadOnly", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get__ReadOnlyRecommended(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"_ReadOnlyRecommended", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RefreshAll(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"RefreshAll", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Reply(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"Reply", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ReplyAll(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"ReplyAll", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RemoveUser(Workbook.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	COM_CallFunction(Workbook, @"RemoveUser", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_RevisionNumber(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"RevisionNumber", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Route(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"Route", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_Routed(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"Routed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_RoutingSlip(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"RoutingSlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RunAutoMacros(Workbook.IDispatch, Which.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Which
	COM_CallFunction(Workbook, @"RunAutoMacros", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Save(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"Save", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook__SaveAs(Workbook.IDispatch, *Filename.VARIANT, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, AccessMode.l, *ConflictResolution.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT)
	Dim args.VARIANT(10)
	COM_VarClone(*TextVisualLayout, @args(0))
	COM_VarClone(*TextCodepage, @args(1))
	COM_VarClone(*AddToMru, @args(2))
	COM_VarClone(*ConflictResolution, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = AccessMode
	COM_VarClone(*CreateBackup, @args(5))
	COM_VarClone(*ReadOnlyRecommended, @args(6))
	COM_VarClone(*WriteResPassword, @args(7))
	COM_VarClone(*Password, @args(8))
	COM_VarClone(*FileFormat, @args(9))
	COM_VarClone(*Filename, @args(10))
	COM_CallFunction(Workbook, @"_SaveAs", @args(), 11, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SaveCopyAs(Workbook.IDispatch, *Filename.VARIANT)
	COM_CallFunction(Workbook, @"SaveCopyAs", *Filename, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_Saved(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"Saved", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Saved(Workbook.IDispatch, Saved.w)
	COM_PutPropertyBool(Workbook, @"Saved", Saved, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_SaveLinkValues(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"SaveLinkValues", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_SaveLinkValues(Workbook.IDispatch, SaveLinkValues.w)
	COM_PutPropertyBool(Workbook, @"SaveLinkValues", SaveLinkValues, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SendMail(Workbook.IDispatch, *Recipients.VARIANT, *Subject.VARIANT, *ReturnReceipt.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*ReturnReceipt, @args(0))
	COM_VarClone(*Subject, @args(1))
	COM_VarClone(*Recipients, @args(2))
	COM_CallFunction(Workbook, @"SendMail", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SendMailer(Workbook.IDispatch, *FileFormat.VARIANT, Priority.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Priority
	COM_VarClone(*FileFormat, @args(1))
	COM_CallFunction(Workbook, @"SendMailer", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SetLinkOnData(Workbook.IDispatch, Name.s, *_Procedure.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*_Procedure, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Workbook, @"SetLinkOnData", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Sheets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Sheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ShowConflictHistory(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ShowConflictHistory", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ShowConflictHistory(Workbook.IDispatch, ShowConflictHistory.w)
	COM_PutPropertyBool(Workbook, @"ShowConflictHistory", ShowConflictHistory, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Styles(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Styles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Subject(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Subject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Subject(Workbook.IDispatch, Subject.s)
	COM_PutPropertyString(Workbook, @"Subject", Subject, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Title(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Title", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Title(Workbook.IDispatch, Title.s)
	COM_PutPropertyString(Workbook, @"Title", Title, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Unprotect(Workbook.IDispatch, *Password.VARIANT)
	COM_CallFunction(Workbook, @"Unprotect", *Password, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_UnprotectSharing(Workbook.IDispatch, *SharingPassword.VARIANT)
	COM_CallFunction(Workbook, @"UnprotectSharing", *SharingPassword, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_UpdateFromFile(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"UpdateFromFile", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_UpdateLink(Workbook.IDispatch, *Name.VARIANT, *Type.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*Name, @args(1))
	COM_CallFunction(Workbook, @"UpdateLink", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_UpdateRemoteReferences(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"UpdateRemoteReferences", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_UpdateRemoteReferences(Workbook.IDispatch, UpdateRemoteReferences.w)
	COM_PutPropertyBool(Workbook, @"UpdateRemoteReferences", UpdateRemoteReferences, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_UserControl(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"UserControl", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_UserControl(Workbook.IDispatch, UserControl.w)
	COM_PutPropertyBool(Workbook, @"UserControl", UserControl, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_UserStatus(Workbook.IDispatch, *result.VARIANT)
	COM_GetProperty(Workbook, @"UserStatus", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_CustomViews(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"CustomViews", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Windows(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Windows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Worksheets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Worksheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_WriteReserved(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"WriteReserved", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_WriteReservedBy(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"WriteReservedBy", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Excel4IntlMacroSheets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Excel4IntlMacroSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Excel4MacroSheets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Excel4MacroSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_TemplateRemoveExtData(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"TemplateRemoveExtData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_TemplateRemoveExtData(Workbook.IDispatch, TemplateRemoveExtData.w)
	COM_PutPropertyBool(Workbook, @"TemplateRemoveExtData", TemplateRemoveExtData, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_HighlightChangesOptions(Workbook.IDispatch, *When.VARIANT, *Who.VARIANT, *Where.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Where, @args(0))
	COM_VarClone(*Who, @args(1))
	COM_VarClone(*When, @args(2))
	COM_CallFunction(Workbook, @"HighlightChangesOptions", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_HighlightChangesOnScreen(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"HighlightChangesOnScreen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_HighlightChangesOnScreen(Workbook.IDispatch, HighlightChangesOnScreen.w)
	COM_PutPropertyBool(Workbook, @"HighlightChangesOnScreen", HighlightChangesOnScreen, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_KeepChangeHistory(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"KeepChangeHistory", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_KeepChangeHistory(Workbook.IDispatch, KeepChangeHistory.w)
	COM_PutPropertyBool(Workbook, @"KeepChangeHistory", KeepChangeHistory, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ListChangesOnNewSheet(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ListChangesOnNewSheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ListChangesOnNewSheet(Workbook.IDispatch, ListChangesOnNewSheet.w)
	COM_PutPropertyBool(Workbook, @"ListChangesOnNewSheet", ListChangesOnNewSheet, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_PurgeChangeHistoryNow(Workbook.IDispatch, Days.l, *SharingPassword.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*SharingPassword, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Days
	COM_CallFunction(Workbook, @"PurgeChangeHistoryNow", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_AcceptAllChanges(Workbook.IDispatch, *When.VARIANT, *Who.VARIANT, *Where.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Where, @args(0))
	COM_VarClone(*Who, @args(1))
	COM_VarClone(*When, @args(2))
	COM_CallFunction(Workbook, @"AcceptAllChanges", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RejectAllChanges(Workbook.IDispatch, *When.VARIANT, *Who.VARIANT, *Where.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Where, @args(0))
	COM_VarClone(*Who, @args(1))
	COM_VarClone(*When, @args(2))
	COM_CallFunction(Workbook, @"RejectAllChanges", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_PivotTableWizard(Workbook.IDispatch, *SourceType.VARIANT, *SourceData.VARIANT, *TableDestination.VARIANT, *TableName.VARIANT, *RowGrand.VARIANT, *ColumnGrand.VARIANT, *SaveData.VARIANT, *HasAutoFormat.VARIANT, *AutoPage.VARIANT, *Reserved.VARIANT, *BackgroundQuery.VARIANT, *OptimizeCache.VARIANT, *PageFieldOrder.VARIANT, *PageFieldWrapCount.VARIANT, *ReadData.VARIANT, *Connection.VARIANT)
	Dim args.VARIANT(15)
	COM_VarClone(*Connection, @args(0))
	COM_VarClone(*ReadData, @args(1))
	COM_VarClone(*PageFieldWrapCount, @args(2))
	COM_VarClone(*PageFieldOrder, @args(3))
	COM_VarClone(*OptimizeCache, @args(4))
	COM_VarClone(*BackgroundQuery, @args(5))
	COM_VarClone(*Reserved, @args(6))
	COM_VarClone(*AutoPage, @args(7))
	COM_VarClone(*HasAutoFormat, @args(8))
	COM_VarClone(*SaveData, @args(9))
	COM_VarClone(*ColumnGrand, @args(10))
	COM_VarClone(*RowGrand, @args(11))
	COM_VarClone(*TableName, @args(12))
	COM_VarClone(*TableDestination, @args(13))
	COM_VarClone(*SourceData, @args(14))
	COM_VarClone(*SourceType, @args(15))
	COM_CallFunction(Workbook, @"PivotTableWizard", @args(), 16, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ResetColors(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"ResetColors", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_VBProject(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"VBProject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_FollowHyperlink(Workbook.IDispatch, Address.s, *SubAddress.VARIANT, *NewWindow.VARIANT, *AddHistory.VARIANT, *ExtraInfo.VARIANT, *Method.VARIANT, *HeaderInfo.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*HeaderInfo, @args(0))
	COM_VarClone(*Method, @args(1))
	COM_VarClone(*ExtraInfo, @args(2))
	COM_VarClone(*AddHistory, @args(3))
	COM_VarClone(*NewWindow, @args(4))
	COM_VarClone(*SubAddress, @args(5))
	args(6)\vt = #VT_BSTR : args(6)\bstrVal = SysAllocString_(Address)
	COM_CallFunction(Workbook, @"FollowHyperlink", @args(), 7, 0, @_g_Excel_error)
	VariantClear_(@args(6))
EndProcedure

ProcedureDLL.l Excel_Workbook_AddToFavorites(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"AddToFavorites", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_IsInplace(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"IsInplace", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook__PrintOut(Workbook.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Workbook, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_WebPagePreview(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"WebPagePreview", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_PublishObjects(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"PublishObjects", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_WebOptions(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"WebOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ReloadAs(Workbook.IDispatch, Encoding.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Encoding
	COM_CallFunction(Workbook, @"ReloadAs", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_HTMLProject(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"HTMLProject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_EnvelopeVisible(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"EnvelopeVisible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_EnvelopeVisible(Workbook.IDispatch, EnvelopeVisible.w)
	COM_PutPropertyBool(Workbook, @"EnvelopeVisible", EnvelopeVisible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_CalculationVersion(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"CalculationVersion", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Dummy17(Workbook.IDispatch, calcid.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = calcid
	COM_CallFunction(Workbook, @"Dummy17", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_sblt(Workbook.IDispatch, s.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(s)
	COM_CallFunction(Workbook, @"sblt", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_VBASigned(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"VBASigned", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ShowPivotTableFieldList(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ShowPivotTableFieldList", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ShowPivotTableFieldList(Workbook.IDispatch, ShowPivotTableFieldList.w)
	COM_PutPropertyBool(Workbook, @"ShowPivotTableFieldList", ShowPivotTableFieldList, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_UpdateLinks(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"UpdateLinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_UpdateLinks(Workbook.IDispatch, UpdateLinks.l)
	COM_PutPropertyLong(Workbook, @"UpdateLinks", UpdateLinks, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_BreakLink(Workbook.IDispatch, Name.s, Type.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Type
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(Workbook, @"BreakLink", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_Workbook_Dummy16(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"Dummy16", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SaveAs(Workbook.IDispatch, *Filename.VARIANT, *FileFormat.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, AccessMode.l, *ConflictResolution.VARIANT, *AddToMru.VARIANT, *TextCodepage.VARIANT, *TextVisualLayout.VARIANT, *Local.VARIANT)
	Dim args.VARIANT(11)
	COM_VarClone(*Local, @args(0))
	COM_VarClone(*TextVisualLayout, @args(1))
	COM_VarClone(*TextCodepage, @args(2))
	COM_VarClone(*AddToMru, @args(3))
	COM_VarClone(*ConflictResolution, @args(4))
	args(5)\vt = #VT_I4 : args(5)\lVal = AccessMode
	COM_VarClone(*CreateBackup, @args(6))
	COM_VarClone(*ReadOnlyRecommended, @args(7))
	COM_VarClone(*WriteResPassword, @args(8))
	COM_VarClone(*Password, @args(9))
	COM_VarClone(*FileFormat, @args(10))
	COM_VarClone(*Filename, @args(11))
	COM_CallFunction(Workbook, @"SaveAs", @args(), 12, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_EnableAutoRecover(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"EnableAutoRecover", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_EnableAutoRecover(Workbook.IDispatch, EnableAutoRecover.w)
	COM_PutPropertyBool(Workbook, @"EnableAutoRecover", EnableAutoRecover, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_RemovePersonalInformation(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"RemovePersonalInformation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_RemovePersonalInformation(Workbook.IDispatch, RemovePersonalInformation.w)
	COM_PutPropertyBool(Workbook, @"RemovePersonalInformation", RemovePersonalInformation, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_FullNameURLEncoded(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"FullNameURLEncoded", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_CheckIn(Workbook.IDispatch, *SaveChanges.VARIANT, *Comments.VARIANT, *MakePublic.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*MakePublic, @args(0))
	COM_VarClone(*Comments, @args(1))
	COM_VarClone(*SaveChanges, @args(2))
	COM_CallFunction(Workbook, @"CheckIn", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_CanCheckIn(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionBool(Workbook, @"CanCheckIn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SendForReview(Workbook.IDispatch, *Recipients.VARIANT, *Subject.VARIANT, *ShowMessage.VARIANT, *IncludeAttachment.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*IncludeAttachment, @args(0))
	COM_VarClone(*ShowMessage, @args(1))
	COM_VarClone(*Subject, @args(2))
	COM_VarClone(*Recipients, @args(3))
	COM_CallFunction(Workbook, @"SendForReview", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ReplyWithChanges(Workbook.IDispatch, *ShowMessage.VARIANT)
	COM_CallFunction(Workbook, @"ReplyWithChanges", *ShowMessage, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_EndReview(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"EndReview", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_Password(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"Password", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Password(Workbook.IDispatch, Password.s)
	COM_PutPropertyString(Workbook, @"Password", Password, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_WritePassword(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"WritePassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_WritePassword(Workbook.IDispatch, WritePassword.s)
	COM_PutPropertyString(Workbook, @"WritePassword", WritePassword, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_PasswordEncryptionProvider(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"PasswordEncryptionProvider", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_PasswordEncryptionAlgorithm(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"PasswordEncryptionAlgorithm", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_PasswordEncryptionKeyLength(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbook, @"PasswordEncryptionKeyLength", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SetPasswordEncryptionOptions(Workbook.IDispatch, *PasswordEncryptionProvider.VARIANT, *PasswordEncryptionAlgorithm.VARIANT, *PasswordEncryptionKeyLength.VARIANT, *PasswordEncryptionFileProperties.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*PasswordEncryptionFileProperties, @args(0))
	COM_VarClone(*PasswordEncryptionKeyLength, @args(1))
	COM_VarClone(*PasswordEncryptionAlgorithm, @args(2))
	COM_VarClone(*PasswordEncryptionProvider, @args(3))
	COM_CallFunction(Workbook, @"SetPasswordEncryptionOptions", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_PasswordEncryptionFileProperties(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"PasswordEncryptionFileProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ReadOnlyRecommended(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ReadOnlyRecommended", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ReadOnlyRecommended(Workbook.IDispatch, ReadOnlyRecommended.w)
	COM_PutPropertyBool(Workbook, @"ReadOnlyRecommended", ReadOnlyRecommended, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Protect(Workbook.IDispatch, *Password.VARIANT, *Structure.VARIANT, *Windows.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Windows, @args(0))
	COM_VarClone(*Structure, @args(1))
	COM_VarClone(*Password, @args(2))
	COM_CallFunction(Workbook, @"Protect", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_SmartTagOptions(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"SmartTagOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RecheckSmartTags(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"RecheckSmartTags", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Permission(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Permission", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_SharedWorkspace(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"SharedWorkspace", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Sync(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Sync", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_SendFaxOverInternet(Workbook.IDispatch, *Recipients.VARIANT, *Subject.VARIANT, *ShowMessage.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*ShowMessage, @args(0))
	COM_VarClone(*Subject, @args(1))
	COM_VarClone(*Recipients, @args(2))
	COM_CallFunction(Workbook, @"SendFaxOverInternet", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_XmlNamespaces(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"XmlNamespaces", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_XmlMaps(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"XmlMaps", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_XmlImport(Workbook.IDispatch, Url.s, ImportMap.IDispatch, *Overwrite.VARIANT, *Destination.VARIANT)
	Dim args.VARIANT(3)
	Protected.l r
	COM_VarClone(*Destination, @args(0))
	COM_VarClone(*Overwrite, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = ImportMap
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Url)
	r = COM_CallFunctionLong(Workbook, @"XmlImport", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_SmartDocument(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"SmartDocument", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_DocumentLibraryVersions(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"DocumentLibraryVersions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_InactiveListBorderVisible(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"InactiveListBorderVisible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_InactiveListBorderVisible(Workbook.IDispatch, InactiveListBorderVisible.w)
	COM_PutPropertyBool(Workbook, @"InactiveListBorderVisible", InactiveListBorderVisible, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_DisplayInkComments(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"DisplayInkComments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_DisplayInkComments(Workbook.IDispatch, DisplayInkComments.w)
	COM_PutPropertyBool(Workbook, @"DisplayInkComments", DisplayInkComments, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_XmlImportXml(Workbook.IDispatch, _Data.s, ImportMap.IDispatch, *Overwrite.VARIANT, *Destination.VARIANT)
	Dim args.VARIANT(3)
	Protected.l r
	COM_VarClone(*Destination, @args(0))
	COM_VarClone(*Overwrite, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = ImportMap
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(_Data)
	r = COM_CallFunctionLong(Workbook, @"XmlImportXml", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Workbook_SaveAsXMLData(Workbook.IDispatch, Filename.s, Map.IDispatch)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Map
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbook, @"SaveAsXMLData", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_Workbook_ToggleFormsDesign(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"ToggleFormsDesign", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_ContentTypeProperties(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"ContentTypeProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Connections(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Connections", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_RemoveDocumentInformation(Workbook.IDispatch, RemoveDocInfoType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = RemoveDocInfoType
	COM_CallFunction(Workbook, @"RemoveDocumentInformation", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Signatures(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Signatures", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_CheckInWithVersion(Workbook.IDispatch, *SaveChanges.VARIANT, *Comments.VARIANT, *MakePublic.VARIANT, *VersionType.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*VersionType, @args(0))
	COM_VarClone(*MakePublic, @args(1))
	COM_VarClone(*Comments, @args(2))
	COM_VarClone(*SaveChanges, @args(3))
	COM_CallFunction(Workbook, @"CheckInWithVersion", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_ServerPolicy(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"ServerPolicy", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_LockServerFile(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"LockServerFile", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_DocumentInspectors(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"DocumentInspectors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_GetWorkflowTasks(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Workbook, @"GetWorkflowTasks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_GetWorkflowTemplates(Workbook.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Workbook, @"GetWorkflowTemplates", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_PrintOut(Workbook.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *IgnorePrintAreas.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*IgnorePrintAreas, @args(0))
	COM_VarClone(*PrToFileName, @args(1))
	COM_VarClone(*Collate, @args(2))
	COM_VarClone(*PrintToFile, @args(3))
	COM_VarClone(*ActivePrinter, @args(4))
	COM_VarClone(*Preview, @args(5))
	COM_VarClone(*Copies, @args(6))
	COM_VarClone(*To, @args(7))
	COM_VarClone(*From, @args(8))
	COM_CallFunction(Workbook, @"PrintOut", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_ServerViewableItems(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"ServerViewableItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_TableStyles(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"TableStyles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_DefaultTableStyle(Workbook.IDispatch, *result.VARIANT)
	COM_GetProperty(Workbook, @"DefaultTableStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_DefaultTableStyle(Workbook.IDispatch, *DefaultTableStyle.VARIANT)
	COM_PutProperty(Workbook, @"DefaultTableStyle", *DefaultTableStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Get_DefaultPivotTableStyle(Workbook.IDispatch, *result.VARIANT)
	COM_GetProperty(Workbook, @"DefaultPivotTableStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_DefaultPivotTableStyle(Workbook.IDispatch, *DefaultPivotTableStyle.VARIANT)
	COM_PutProperty(Workbook, @"DefaultPivotTableStyle", *DefaultPivotTableStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_CheckCompatibility(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"CheckCompatibility", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_CheckCompatibility(Workbook.IDispatch, CheckCompatibility.w)
	COM_PutPropertyBool(Workbook, @"CheckCompatibility", CheckCompatibility, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_HasVBProject(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"HasVBProject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_CustomXMLParts(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"CustomXMLParts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_Final(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"Final", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_Final(Workbook.IDispatch, Final.w)
	COM_PutPropertyBool(Workbook, @"Final", Final, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Research(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Research", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_Theme(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"Theme", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ApplyTheme(Workbook.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbook, @"ApplyTheme", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_Excel8CompatibilityMode(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"Excel8CompatibilityMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ConnectionsDisabled(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ConnectionsDisabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_EnableConnections(Workbook.IDispatch)
	COM_CallFunction(Workbook, @"EnableConnections", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ShowPivotChartActiveFields(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ShowPivotChartActiveFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ShowPivotChartActiveFields(Workbook.IDispatch, ShowPivotChartActiveFields.w)
	COM_PutPropertyBool(Workbook, @"ShowPivotChartActiveFields", ShowPivotChartActiveFields, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ExportAsFixedFormat(Workbook.IDispatch, Type.l, *Filename.VARIANT, *Quality.VARIANT, *IncludeDocProperties.VARIANT, *IgnorePrintAreas.VARIANT, *From.VARIANT, *To.VARIANT, *OpenAfterPublish.VARIANT, *FixedFormatExtClassPtr.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*FixedFormatExtClassPtr, @args(0))
	COM_VarClone(*OpenAfterPublish, @args(1))
	COM_VarClone(*To, @args(2))
	COM_VarClone(*From, @args(3))
	COM_VarClone(*IgnorePrintAreas, @args(4))
	COM_VarClone(*IncludeDocProperties, @args(5))
	COM_VarClone(*Quality, @args(6))
	COM_VarClone(*Filename, @args(7))
	args(8)\vt = #VT_I4 : args(8)\lVal = Type
	COM_CallFunction(Workbook, @"ExportAsFixedFormat", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbook_Get_IconSets(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbook, @"IconSets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Workbook_Get_EncryptionProvider(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyString(Workbook, @"EncryptionProvider", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_EncryptionProvider(Workbook.IDispatch, EncryptionProvider.s)
	COM_PutPropertyString(Workbook, @"EncryptionProvider", EncryptionProvider, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_DoNotPromptForConvert(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"DoNotPromptForConvert", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_DoNotPromptForConvert(Workbook.IDispatch, DoNotPromptForConvert.w)
	COM_PutPropertyBool(Workbook, @"DoNotPromptForConvert", DoNotPromptForConvert, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Workbook_Get_ForceFullCalculation(Workbook.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Workbook, @"ForceFullCalculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_Put_ForceFullCalculation(Workbook.IDispatch, ForceFullCalculation.w)
	COM_PutPropertyBool(Workbook, @"ForceFullCalculation", ForceFullCalculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbook_ProtectSharing(Workbook.IDispatch, *Filename.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *ReadOnlyRecommended.VARIANT, *CreateBackup.VARIANT, *SharingPassword.VARIANT, *FileFormat.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*FileFormat, @args(0))
	COM_VarClone(*SharingPassword, @args(1))
	COM_VarClone(*CreateBackup, @args(2))
	COM_VarClone(*ReadOnlyRecommended, @args(3))
	COM_VarClone(*WriteResPassword, @args(4))
	COM_VarClone(*Password, @args(5))
	COM_VarClone(*Filename, @args(6))
	COM_CallFunction(Workbook, @"ProtectSharing", @args(), 7, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Workbooks
;- -------------------------
ProcedureDLL.i Excel_Workbooks_Get_Application(Workbooks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbooks, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbooks_Get_Creator(Workbooks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbooks, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbooks_Get_Parent(Workbooks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Workbooks, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbooks_Add(Workbooks.IDispatch, *Template.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Workbooks, @"Add", *Template, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbooks_Close(Workbooks.IDispatch)
	COM_CallFunction(Workbooks, @"Close", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbooks_Get_Count(Workbooks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Workbooks, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbooks_Get_Item(Workbooks.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Workbooks, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbooks_Get__NewEnum(Workbooks.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Workbooks, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Workbooks__Open(Workbooks.IDispatch, Filename.s, *UpdateLinks.VARIANT, *ReadOnly.VARIANT, *Format.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *IgnoreReadOnlyRecommended.VARIANT, *Origin.VARIANT, *Delimiter.VARIANT, *Editable.VARIANT, *Notify.VARIANT, *Converter.VARIANT, *AddToMru.VARIANT)
	Dim args.VARIANT(12)
	Protected.i r
	COM_VarClone(*AddToMru, @args(0))
	COM_VarClone(*Converter, @args(1))
	COM_VarClone(*Notify, @args(2))
	COM_VarClone(*Editable, @args(3))
	COM_VarClone(*Delimiter, @args(4))
	COM_VarClone(*Origin, @args(5))
	COM_VarClone(*IgnoreReadOnlyRecommended, @args(6))
	COM_VarClone(*WriteResPassword, @args(7))
	COM_VarClone(*Password, @args(8))
	COM_VarClone(*Format, @args(9))
	COM_VarClone(*ReadOnly, @args(10))
	COM_VarClone(*UpdateLinks, @args(11))
	args(12)\vt = #VT_BSTR : args(12)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Workbooks, @"_Open", @args(), 13, @_g_Excel_error)
	VariantClear_(@args(12))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Workbooks___OpenText(Workbooks.IDispatch, Filename.s, *Origin.VARIANT, *StartRow.VARIANT, *DataType.VARIANT, TextQualifier.l, *ConsecutiveDelimiter.VARIANT, *Tab.VARIANT, *Semicolon.VARIANT, *Comma.VARIANT, *Space.VARIANT, *Other.VARIANT, *OtherChar.VARIANT, *FieldInfo.VARIANT, *TextVisualLayout.VARIANT)
	Dim args.VARIANT(13)
	COM_VarClone(*TextVisualLayout, @args(0))
	COM_VarClone(*FieldInfo, @args(1))
	COM_VarClone(*OtherChar, @args(2))
	COM_VarClone(*Other, @args(3))
	COM_VarClone(*Space, @args(4))
	COM_VarClone(*Comma, @args(5))
	COM_VarClone(*Semicolon, @args(6))
	COM_VarClone(*Tab, @args(7))
	COM_VarClone(*ConsecutiveDelimiter, @args(8))
	args(9)\vt = #VT_I4 : args(9)\lVal = TextQualifier
	COM_VarClone(*DataType, @args(10))
	COM_VarClone(*StartRow, @args(11))
	COM_VarClone(*Origin, @args(12))
	args(13)\vt = #VT_BSTR : args(13)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbooks, @"__OpenText", @args(), 14, 0, @_g_Excel_error)
	VariantClear_(@args(13))
EndProcedure

ProcedureDLL.i Excel_Workbooks_Get__Default(Workbooks.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Workbooks, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Workbooks__OpenText(Workbooks.IDispatch, Filename.s, *Origin.VARIANT, *StartRow.VARIANT, *DataType.VARIANT, TextQualifier.l, *ConsecutiveDelimiter.VARIANT, *Tab.VARIANT, *Semicolon.VARIANT, *Comma.VARIANT, *Space.VARIANT, *Other.VARIANT, *OtherChar.VARIANT, *FieldInfo.VARIANT, *TextVisualLayout.VARIANT, *DecimalSeparator.VARIANT, *ThousandsSeparator.VARIANT)
	Dim args.VARIANT(15)
	COM_VarClone(*ThousandsSeparator, @args(0))
	COM_VarClone(*DecimalSeparator, @args(1))
	COM_VarClone(*TextVisualLayout, @args(2))
	COM_VarClone(*FieldInfo, @args(3))
	COM_VarClone(*OtherChar, @args(4))
	COM_VarClone(*Other, @args(5))
	COM_VarClone(*Space, @args(6))
	COM_VarClone(*Comma, @args(7))
	COM_VarClone(*Semicolon, @args(8))
	COM_VarClone(*Tab, @args(9))
	COM_VarClone(*ConsecutiveDelimiter, @args(10))
	args(11)\vt = #VT_I4 : args(11)\lVal = TextQualifier
	COM_VarClone(*DataType, @args(12))
	COM_VarClone(*StartRow, @args(13))
	COM_VarClone(*Origin, @args(14))
	args(15)\vt = #VT_BSTR : args(15)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbooks, @"_OpenText", @args(), 16, 0, @_g_Excel_error)
	VariantClear_(@args(15))
EndProcedure

ProcedureDLL.i Excel_Workbooks_Open(Workbooks.IDispatch, Filename.s, *UpdateLinks.VARIANT, *ReadOnly.VARIANT, *Format.VARIANT, *Password.VARIANT, *WriteResPassword.VARIANT, *IgnoreReadOnlyRecommended.VARIANT, *Origin.VARIANT, *Delimiter.VARIANT, *Editable.VARIANT, *Notify.VARIANT, *Converter.VARIANT, *AddToMru.VARIANT, *Local.VARIANT, *CorruptLoad.VARIANT)
	Dim args.VARIANT(14)
	Protected.i r
	COM_VarClone(*CorruptLoad, @args(0))
	COM_VarClone(*Local, @args(1))
	COM_VarClone(*AddToMru, @args(2))
	COM_VarClone(*Converter, @args(3))
	COM_VarClone(*Notify, @args(4))
	COM_VarClone(*Editable, @args(5))
	COM_VarClone(*Delimiter, @args(6))
	COM_VarClone(*Origin, @args(7))
	COM_VarClone(*IgnoreReadOnlyRecommended, @args(8))
	COM_VarClone(*WriteResPassword, @args(9))
	COM_VarClone(*Password, @args(10))
	COM_VarClone(*Format, @args(11))
	COM_VarClone(*ReadOnly, @args(12))
	COM_VarClone(*UpdateLinks, @args(13))
	args(14)\vt = #VT_BSTR : args(14)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Workbooks, @"Open", @args(), 15, @_g_Excel_error)
	VariantClear_(@args(14))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Workbooks_OpenText(Workbooks.IDispatch, Filename.s, *Origin.VARIANT, *StartRow.VARIANT, *DataType.VARIANT, TextQualifier.l, *ConsecutiveDelimiter.VARIANT, *Tab.VARIANT, *Semicolon.VARIANT, *Comma.VARIANT, *Space.VARIANT, *Other.VARIANT, *OtherChar.VARIANT, *FieldInfo.VARIANT, *TextVisualLayout.VARIANT, *DecimalSeparator.VARIANT, *ThousandsSeparator.VARIANT, *TrailingMinusNumbers.VARIANT, *Local.VARIANT)
	Dim args.VARIANT(17)
	COM_VarClone(*Local, @args(0))
	COM_VarClone(*TrailingMinusNumbers, @args(1))
	COM_VarClone(*ThousandsSeparator, @args(2))
	COM_VarClone(*DecimalSeparator, @args(3))
	COM_VarClone(*TextVisualLayout, @args(4))
	COM_VarClone(*FieldInfo, @args(5))
	COM_VarClone(*OtherChar, @args(6))
	COM_VarClone(*Other, @args(7))
	COM_VarClone(*Space, @args(8))
	COM_VarClone(*Comma, @args(9))
	COM_VarClone(*Semicolon, @args(10))
	COM_VarClone(*Tab, @args(11))
	COM_VarClone(*ConsecutiveDelimiter, @args(12))
	args(13)\vt = #VT_I4 : args(13)\lVal = TextQualifier
	COM_VarClone(*DataType, @args(14))
	COM_VarClone(*StartRow, @args(15))
	COM_VarClone(*Origin, @args(16))
	args(17)\vt = #VT_BSTR : args(17)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbooks, @"OpenText", @args(), 18, 0, @_g_Excel_error)
	VariantClear_(@args(17))
EndProcedure

ProcedureDLL.i Excel_Workbooks_OpenDatabase(Workbooks.IDispatch, Filename.s, *CommandText.VARIANT, *CommandType.VARIANT, *BackgroundQuery.VARIANT, *ImportDataAs.VARIANT)
	Dim args.VARIANT(4)
	Protected.i r
	COM_VarClone(*ImportDataAs, @args(0))
	COM_VarClone(*BackgroundQuery, @args(1))
	COM_VarClone(*CommandType, @args(2))
	COM_VarClone(*CommandText, @args(3))
	args(4)\vt = #VT_BSTR : args(4)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Workbooks, @"OpenDatabase", @args(), 5, @_g_Excel_error)
	VariantClear_(@args(4))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Workbooks_CheckOut(Workbooks.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Workbooks, @"CheckOut", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.w Excel_Workbooks_CanCheckOut(Workbooks.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	Protected.w r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionBool(Workbooks, @"CanCheckOut", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Workbooks__OpenXML(Workbooks.IDispatch, Filename.s, *Stylesheets.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*Stylesheets, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Workbooks, @"_OpenXML", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Workbooks_OpenXML(Workbooks.IDispatch, Filename.s, *Stylesheets.VARIANT, *LoadOption.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*LoadOption, @args(0))
	COM_VarClone(*Stylesheets, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Workbooks, @"OpenXML", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_PublishObject
;- -------------------------
ProcedureDLL.i Excel_PublishObject_Get_Application(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PublishObject, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Get_Creator(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PublishObject, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObject_Get_Parent(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PublishObject, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Delete(PublishObject.IDispatch)
	COM_CallFunction(PublishObject, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Publish(PublishObject.IDispatch, *Create.VARIANT)
	COM_CallFunction(PublishObject, @"Publish", *Create, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PublishObject_Get_DivID(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(PublishObject, @"DivID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PublishObject_Get_Sheet(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(PublishObject, @"Sheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Get_SourceType(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PublishObject, @"SourceType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PublishObject_Get_Source(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(PublishObject, @"Source", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Get_HtmlType(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PublishObject, @"HtmlType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Put_HtmlType(PublishObject.IDispatch, HtmlType.l)
	COM_PutPropertyLong(PublishObject, @"HtmlType", HtmlType, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PublishObject_Get_Title(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(PublishObject, @"Title", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Put_Title(PublishObject.IDispatch, Title.s)
	COM_PutPropertyString(PublishObject, @"Title", Title, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PublishObject_Get_Filename(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(PublishObject, @"Filename", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Put_Filename(PublishObject.IDispatch, Filename.s)
	COM_PutPropertyString(PublishObject, @"Filename", Filename, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PublishObject_Get_AutoRepublish(PublishObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PublishObject, @"AutoRepublish", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObject_Put_AutoRepublish(PublishObject.IDispatch, AutoRepublish.w)
	COM_PutPropertyBool(PublishObject, @"AutoRepublish", AutoRepublish, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DefaultWebOptions
;- -------------------------
ProcedureDLL.i Excel_DefaultWebOptions_Get_Application(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DefaultWebOptions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Get_Creator(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DefaultWebOptions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DefaultWebOptions_Get_Parent(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DefaultWebOptions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_RelyOnCSS(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"RelyOnCSS", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_RelyOnCSS(DefaultWebOptions.IDispatch, RelyOnCSS.w)
	COM_PutPropertyBool(DefaultWebOptions, @"RelyOnCSS", RelyOnCSS, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_SaveHiddenData(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"SaveHiddenData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_SaveHiddenData(DefaultWebOptions.IDispatch, SaveHiddenData.w)
	COM_PutPropertyBool(DefaultWebOptions, @"SaveHiddenData", SaveHiddenData, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_LoadPictures(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"LoadPictures", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_LoadPictures(DefaultWebOptions.IDispatch, LoadPictures.w)
	COM_PutPropertyBool(DefaultWebOptions, @"LoadPictures", LoadPictures, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_OrganizeInFolder(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"OrganizeInFolder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_OrganizeInFolder(DefaultWebOptions.IDispatch, OrganizeInFolder.w)
	COM_PutPropertyBool(DefaultWebOptions, @"OrganizeInFolder", OrganizeInFolder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_UpdateLinksOnSave(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"UpdateLinksOnSave", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_UpdateLinksOnSave(DefaultWebOptions.IDispatch, UpdateLinksOnSave.w)
	COM_PutPropertyBool(DefaultWebOptions, @"UpdateLinksOnSave", UpdateLinksOnSave, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_UseLongFileNames(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"UseLongFileNames", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_UseLongFileNames(DefaultWebOptions.IDispatch, UseLongFileNames.w)
	COM_PutPropertyBool(DefaultWebOptions, @"UseLongFileNames", UseLongFileNames, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_CheckIfOfficeIsHTMLEditor(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"CheckIfOfficeIsHTMLEditor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_CheckIfOfficeIsHTMLEditor(DefaultWebOptions.IDispatch, CheckIfOfficeIsHTMLEditor.w)
	COM_PutPropertyBool(DefaultWebOptions, @"CheckIfOfficeIsHTMLEditor", CheckIfOfficeIsHTMLEditor, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_DownloadComponents(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"DownloadComponents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_DownloadComponents(DefaultWebOptions.IDispatch, DownloadComponents.w)
	COM_PutPropertyBool(DefaultWebOptions, @"DownloadComponents", DownloadComponents, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_RelyOnVML(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"RelyOnVML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_RelyOnVML(DefaultWebOptions.IDispatch, RelyOnVML.w)
	COM_PutPropertyBool(DefaultWebOptions, @"RelyOnVML", RelyOnVML, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_AllowPNG(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"AllowPNG", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_AllowPNG(DefaultWebOptions.IDispatch, AllowPNG.w)
	COM_PutPropertyBool(DefaultWebOptions, @"AllowPNG", AllowPNG, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Get_ScreenSize(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DefaultWebOptions, @"ScreenSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_ScreenSize(DefaultWebOptions.IDispatch, ScreenSize.l)
	COM_PutPropertyLong(DefaultWebOptions, @"ScreenSize", ScreenSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Get_PixelsPerInch(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DefaultWebOptions, @"PixelsPerInch", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_PixelsPerInch(DefaultWebOptions.IDispatch, PixelsPerInch.l)
	COM_PutPropertyLong(DefaultWebOptions, @"PixelsPerInch", PixelsPerInch, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DefaultWebOptions_Get_LocationOfComponents(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyString(DefaultWebOptions, @"LocationOfComponents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_LocationOfComponents(DefaultWebOptions.IDispatch, LocationOfComponents.s)
	COM_PutPropertyString(DefaultWebOptions, @"LocationOfComponents", LocationOfComponents, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Get_Encoding(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DefaultWebOptions, @"Encoding", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_Encoding(DefaultWebOptions.IDispatch, Encoding.l)
	COM_PutPropertyLong(DefaultWebOptions, @"Encoding", Encoding, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_AlwaysSaveInDefaultEncoding(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"AlwaysSaveInDefaultEncoding", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_AlwaysSaveInDefaultEncoding(DefaultWebOptions.IDispatch, AlwaysSaveInDefaultEncoding.w)
	COM_PutPropertyBool(DefaultWebOptions, @"AlwaysSaveInDefaultEncoding", AlwaysSaveInDefaultEncoding, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DefaultWebOptions_Get_Fonts(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DefaultWebOptions, @"Fonts", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DefaultWebOptions_Get_FolderSuffix(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyString(DefaultWebOptions, @"FolderSuffix", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Get_TargetBrowser(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DefaultWebOptions, @"TargetBrowser", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_TargetBrowser(DefaultWebOptions.IDispatch, TargetBrowser.l)
	COM_PutPropertyLong(DefaultWebOptions, @"TargetBrowser", TargetBrowser, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DefaultWebOptions_Get_SaveNewWebPagesAsWebArchives(DefaultWebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DefaultWebOptions, @"SaveNewWebPagesAsWebArchives", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DefaultWebOptions_Put_SaveNewWebPagesAsWebArchives(DefaultWebOptions.IDispatch, SaveNewWebPagesAsWebArchives.w)
	COM_PutPropertyBool(DefaultWebOptions, @"SaveNewWebPagesAsWebArchives", SaveNewWebPagesAsWebArchives, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_WebOptions
;- -------------------------
ProcedureDLL.i Excel_WebOptions_Get_Application(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WebOptions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Get_Creator(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WebOptions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WebOptions_Get_Parent(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WebOptions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_RelyOnCSS(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"RelyOnCSS", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_RelyOnCSS(WebOptions.IDispatch, RelyOnCSS.w)
	COM_PutPropertyBool(WebOptions, @"RelyOnCSS", RelyOnCSS, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_OrganizeInFolder(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"OrganizeInFolder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_OrganizeInFolder(WebOptions.IDispatch, OrganizeInFolder.w)
	COM_PutPropertyBool(WebOptions, @"OrganizeInFolder", OrganizeInFolder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_UseLongFileNames(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"UseLongFileNames", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_UseLongFileNames(WebOptions.IDispatch, UseLongFileNames.w)
	COM_PutPropertyBool(WebOptions, @"UseLongFileNames", UseLongFileNames, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_DownloadComponents(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"DownloadComponents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_DownloadComponents(WebOptions.IDispatch, DownloadComponents.w)
	COM_PutPropertyBool(WebOptions, @"DownloadComponents", DownloadComponents, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_RelyOnVML(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"RelyOnVML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_RelyOnVML(WebOptions.IDispatch, RelyOnVML.w)
	COM_PutPropertyBool(WebOptions, @"RelyOnVML", RelyOnVML, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WebOptions_Get_AllowPNG(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WebOptions, @"AllowPNG", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_AllowPNG(WebOptions.IDispatch, AllowPNG.w)
	COM_PutPropertyBool(WebOptions, @"AllowPNG", AllowPNG, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Get_ScreenSize(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WebOptions, @"ScreenSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_ScreenSize(WebOptions.IDispatch, ScreenSize.l)
	COM_PutPropertyLong(WebOptions, @"ScreenSize", ScreenSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Get_PixelsPerInch(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WebOptions, @"PixelsPerInch", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_PixelsPerInch(WebOptions.IDispatch, PixelsPerInch.l)
	COM_PutPropertyLong(WebOptions, @"PixelsPerInch", PixelsPerInch, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WebOptions_Get_LocationOfComponents(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyString(WebOptions, @"LocationOfComponents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_LocationOfComponents(WebOptions.IDispatch, LocationOfComponents.s)
	COM_PutPropertyString(WebOptions, @"LocationOfComponents", LocationOfComponents, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Get_Encoding(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WebOptions, @"Encoding", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_Encoding(WebOptions.IDispatch, Encoding.l)
	COM_PutPropertyLong(WebOptions, @"Encoding", Encoding, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WebOptions_Get_FolderSuffix(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyString(WebOptions, @"FolderSuffix", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_UseDefaultFolderSuffix(WebOptions.IDispatch)
	COM_CallFunction(WebOptions, @"UseDefaultFolderSuffix", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Get_TargetBrowser(WebOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WebOptions, @"TargetBrowser", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WebOptions_Put_TargetBrowser(WebOptions.IDispatch, TargetBrowser.l)
	COM_PutPropertyLong(WebOptions, @"TargetBrowser", TargetBrowser, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TreeviewControl
;- -------------------------
ProcedureDLL.i Excel_TreeviewControl_Get_Application(TreeviewControl.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TreeviewControl, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TreeviewControl_Get_Creator(TreeviewControl.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TreeviewControl, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TreeviewControl_Get_Parent(TreeviewControl.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TreeviewControl, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TreeviewControl_Get_Hidden(TreeviewControl.IDispatch, *result.VARIANT)
	COM_GetProperty(TreeviewControl, @"Hidden", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TreeviewControl_Put_Hidden(TreeviewControl.IDispatch, *Hidden.VARIANT)
	COM_PutProperty(TreeviewControl, @"Hidden", *Hidden, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TreeviewControl_Get_Drilled(TreeviewControl.IDispatch, *result.VARIANT)
	COM_GetProperty(TreeviewControl, @"Drilled", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TreeviewControl_Put_Drilled(TreeviewControl.IDispatch, *Drilled.VARIANT)
	COM_PutProperty(TreeviewControl, @"Drilled", *Drilled, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CubeField
;- -------------------------
ProcedureDLL.i Excel_CubeField_Get_Application(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeField, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_Creator(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeField_Get_Parent(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeField, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_CubeFieldType(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"CubeFieldType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CubeField_Get__Caption(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyString(CubeField, @"_Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CubeField_Get_Name(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyString(CubeField, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CubeField_Get_Value(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyString(CubeField, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_Orientation(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_Orientation(CubeField.IDispatch, Orientation.l)
	COM_PutPropertyLong(CubeField, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_Position(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_Position(CubeField.IDispatch, Position.l)
	COM_PutPropertyLong(CubeField, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeField_Get_TreeviewControl(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeField, @"TreeviewControl", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_DragToColumn(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"DragToColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_DragToColumn(CubeField.IDispatch, DragToColumn.w)
	COM_PutPropertyBool(CubeField, @"DragToColumn", DragToColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_DragToHide(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"DragToHide", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_DragToHide(CubeField.IDispatch, DragToHide.w)
	COM_PutPropertyBool(CubeField, @"DragToHide", DragToHide, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_DragToPage(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"DragToPage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_DragToPage(CubeField.IDispatch, DragToPage.w)
	COM_PutPropertyBool(CubeField, @"DragToPage", DragToPage, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_DragToRow(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"DragToRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_DragToRow(CubeField.IDispatch, DragToRow.w)
	COM_PutPropertyBool(CubeField, @"DragToRow", DragToRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_DragToData(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"DragToData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_DragToData(CubeField.IDispatch, DragToData.w)
	COM_PutPropertyBool(CubeField, @"DragToData", DragToData, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_HiddenLevels(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"HiddenLevels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_HiddenLevels(CubeField.IDispatch, HiddenLevels.l)
	COM_PutPropertyLong(CubeField, @"HiddenLevels", HiddenLevels, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_HasMemberProperties(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"HasMemberProperties", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_LayoutForm(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"LayoutForm", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_LayoutForm(CubeField.IDispatch, LayoutForm.l)
	COM_PutPropertyLong(CubeField, @"LayoutForm", LayoutForm, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeField_Get_PivotFields(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeField, @"PivotFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField__AddMemberPropertyField(CubeField.IDispatch, Property.s, *PropertyOrder.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*PropertyOrder, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Property)
	COM_CallFunction(CubeField, @"_AddMemberPropertyField", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_EnableMultiplePageItems(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"EnableMultiplePageItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_EnableMultiplePageItems(CubeField.IDispatch, EnableMultiplePageItems.w)
	COM_PutPropertyBool(CubeField, @"EnableMultiplePageItems", EnableMultiplePageItems, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_LayoutSubtotalLocation(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"LayoutSubtotalLocation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_LayoutSubtotalLocation(CubeField.IDispatch, LayoutSubtotalLocation.l)
	COM_PutPropertyLong(CubeField, @"LayoutSubtotalLocation", LayoutSubtotalLocation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_ShowInFieldList(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"ShowInFieldList", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_ShowInFieldList(CubeField.IDispatch, ShowInFieldList.w)
	COM_PutPropertyBool(CubeField, @"ShowInFieldList", ShowInFieldList, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Delete(CubeField.IDispatch)
	COM_CallFunction(CubeField, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_AddMemberPropertyField(CubeField.IDispatch, Property.s, *PropertyOrder.VARIANT, *PropertyDisplayedIn.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*PropertyDisplayedIn, @args(0))
	COM_VarClone(*PropertyOrder, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Property)
	COM_CallFunction(CubeField, @"AddMemberPropertyField", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_IncludeNewItemsInFilter(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"IncludeNewItemsInFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_IncludeNewItemsInFilter(CubeField.IDispatch, IncludeNewItemsInFilter.w)
	COM_PutPropertyBool(CubeField, @"IncludeNewItemsInFilter", IncludeNewItemsInFilter, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Get_CubeFieldSubType(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeField, @"CubeFieldSubType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_AllItemsVisible(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"AllItemsVisible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_ClearManualFilter(CubeField.IDispatch)
	COM_CallFunction(CubeField, @"ClearManualFilter", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_CreatePivotFields(CubeField.IDispatch)
	COM_CallFunction(CubeField, @"CreatePivotFields", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CubeField_Get_CurrentPageName(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyString(CubeField, @"CurrentPageName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_CurrentPageName(CubeField.IDispatch, CurrentPageName.s)
	COM_PutPropertyString(CubeField, @"CurrentPageName", CurrentPageName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CubeField_Get_IsDate(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CubeField, @"IsDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CubeField_Get_Caption(CubeField.IDispatch)
	ProcedureReturn COM_GetPropertyString(CubeField, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeField_Put_Caption(CubeField.IDispatch, Caption.s)
	COM_PutPropertyString(CubeField, @"Caption", Caption, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CubeFields
;- -------------------------
ProcedureDLL.i Excel_CubeFields_Get_Application(CubeFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeFields, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeFields_Get_Creator(CubeFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeFields, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeFields_Get_Parent(CubeFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CubeFields, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CubeFields_Get_Count(CubeFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CubeFields, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeFields_Get_Item(CubeFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CubeFields, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeFields_Get__Default(CubeFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CubeFields, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeFields_Get__NewEnum(CubeFields.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(CubeFields, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CubeFields_AddSet(CubeFields.IDispatch, Name.s, Caption.s)
	Dim args.VARIANT(1)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Caption)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CubeFields, @"AddSet", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_Font
;- -------------------------
ProcedureDLL.i Excel_Font_Get_Application(Font.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Font, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Creator(Font.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Font, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Font_Get_Parent(Font.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Font, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Background(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Background", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Background(Font.IDispatch, *Background.VARIANT)
	COM_PutProperty(Font, @"Background", *Background, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Bold(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Bold", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Bold(Font.IDispatch, *Bold.VARIANT)
	COM_PutProperty(Font, @"Bold", *Bold, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Color(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Color(Font.IDispatch, *Color.VARIANT)
	COM_PutProperty(Font, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_ColorIndex(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"ColorIndex", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_ColorIndex(Font.IDispatch, *ColorIndex.VARIANT)
	COM_PutProperty(Font, @"ColorIndex", *ColorIndex, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_FontStyle(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"FontStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_FontStyle(Font.IDispatch, *FontStyle.VARIANT)
	COM_PutProperty(Font, @"FontStyle", *FontStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Italic(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Italic", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Italic(Font.IDispatch, *Italic.VARIANT)
	COM_PutProperty(Font, @"Italic", *Italic, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Name(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Name", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Name(Font.IDispatch, *Name.VARIANT)
	COM_PutProperty(Font, @"Name", *Name, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_OutlineFont(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"OutlineFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_OutlineFont(Font.IDispatch, *OutlineFont.VARIANT)
	COM_PutProperty(Font, @"OutlineFont", *OutlineFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Shadow(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Shadow", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Shadow(Font.IDispatch, *Shadow.VARIANT)
	COM_PutProperty(Font, @"Shadow", *Shadow, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Size(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Size", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Size(Font.IDispatch, *Size.VARIANT)
	COM_PutProperty(Font, @"Size", *Size, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Strikethrough(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Strikethrough", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Strikethrough(Font.IDispatch, *Strikethrough.VARIANT)
	COM_PutProperty(Font, @"Strikethrough", *Strikethrough, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Subscript(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Subscript", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Subscript(Font.IDispatch, *Subscript.VARIANT)
	COM_PutProperty(Font, @"Subscript", *Subscript, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Superscript(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Superscript", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Superscript(Font.IDispatch, *Superscript.VARIANT)
	COM_PutProperty(Font, @"Superscript", *Superscript, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_Underline(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"Underline", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_Underline(Font.IDispatch, *Underline.VARIANT)
	COM_PutProperty(Font, @"Underline", *Underline, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_ThemeColor(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"ThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_ThemeColor(Font.IDispatch, *ThemeColor.VARIANT)
	COM_PutProperty(Font, @"ThemeColor", *ThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_TintAndShade(Font.IDispatch, *result.VARIANT)
	COM_GetProperty(Font, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_TintAndShade(Font.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(Font, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Get_ThemeFont(Font.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Font, @"ThemeFont", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Font_Put_ThemeFont(Font.IDispatch, ThemeFont.l)
	COM_PutPropertyLong(Font, @"ThemeFont", ThemeFont, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Window
;- -------------------------
ProcedureDLL.i Excel_Window_Get_Application(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_Creator(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_Parent(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Activate(Window.IDispatch, *result.VARIANT)
	COM_CallFunction(Window, @"Activate", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_ActivateNext(Window.IDispatch, *result.VARIANT)
	COM_CallFunction(Window, @"ActivateNext", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_ActivatePrevious(Window.IDispatch, *result.VARIANT)
	COM_CallFunction(Window, @"ActivatePrevious", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_ActiveCell(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"ActiveCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_ActiveChart(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"ActiveChart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_ActivePane(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"ActivePane", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_ActiveSheet(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"ActiveSheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_Caption(Window.IDispatch, *result.VARIANT)
	COM_GetProperty(Window, @"Caption", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Caption(Window.IDispatch, *Caption.VARIANT)
	COM_PutProperty(Window, @"Caption", *Caption, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Close(Window.IDispatch, *SaveChanges.VARIANT, *Filename.VARIANT, *RouteWorkbook.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*RouteWorkbook, @args(0))
	COM_VarClone(*Filename, @args(1))
	COM_VarClone(*SaveChanges, @args(2))
	ProcedureReturn COM_CallFunctionBool(Window, @"Close", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayFormulas(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayFormulas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayFormulas(Window.IDispatch, DisplayFormulas.w)
	COM_PutPropertyBool(Window, @"DisplayFormulas", DisplayFormulas, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayGridlines(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayGridlines(Window.IDispatch, DisplayGridlines.w)
	COM_PutPropertyBool(Window, @"DisplayGridlines", DisplayGridlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayHeadings(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayHeadings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayHeadings(Window.IDispatch, DisplayHeadings.w)
	COM_PutPropertyBool(Window, @"DisplayHeadings", DisplayHeadings, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayHorizontalScrollBar(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayHorizontalScrollBar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayHorizontalScrollBar(Window.IDispatch, DisplayHorizontalScrollBar.w)
	COM_PutPropertyBool(Window, @"DisplayHorizontalScrollBar", DisplayHorizontalScrollBar, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayOutline(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayOutline", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayOutline(Window.IDispatch, DisplayOutline.w)
	COM_PutPropertyBool(Window, @"DisplayOutline", DisplayOutline, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get__DisplayRightToLeft(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"_DisplayRightToLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put__DisplayRightToLeft(Window.IDispatch, _DisplayRightToLeft.w)
	COM_PutPropertyBool(Window, @"_DisplayRightToLeft", _DisplayRightToLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayVerticalScrollBar(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayVerticalScrollBar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayVerticalScrollBar(Window.IDispatch, DisplayVerticalScrollBar.w)
	COM_PutPropertyBool(Window, @"DisplayVerticalScrollBar", DisplayVerticalScrollBar, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayWorkbookTabs(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayWorkbookTabs", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayWorkbookTabs(Window.IDispatch, DisplayWorkbookTabs.w)
	COM_PutPropertyBool(Window, @"DisplayWorkbookTabs", DisplayWorkbookTabs, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayZeros(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayZeros", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayZeros(Window.IDispatch, DisplayZeros.w)
	COM_PutPropertyBool(Window, @"DisplayZeros", DisplayZeros, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_EnableResize(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"EnableResize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_EnableResize(Window.IDispatch, EnableResize.w)
	COM_PutPropertyBool(Window, @"EnableResize", EnableResize, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_FreezePanes(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"FreezePanes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_FreezePanes(Window.IDispatch, FreezePanes.w)
	COM_PutPropertyBool(Window, @"FreezePanes", FreezePanes, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_GridlineColor(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"GridlineColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_GridlineColor(Window.IDispatch, GridlineColor.l)
	COM_PutPropertyLong(Window, @"GridlineColor", GridlineColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_GridlineColorIndex(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"GridlineColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_GridlineColorIndex(Window.IDispatch, GridlineColorIndex.l)
	COM_PutPropertyLong(Window, @"GridlineColorIndex", GridlineColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_Height(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Height(Window.IDispatch, Height.d)
	COM_PutPropertyDouble(Window, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_Index(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_LargeScroll(Window.IDispatch, *Down.VARIANT, *Up.VARIANT, *ToRight.VARIANT, *ToLeft.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*ToLeft, @args(0))
	COM_VarClone(*ToRight, @args(1))
	COM_VarClone(*Up, @args(2))
	COM_VarClone(*Down, @args(3))
	COM_CallFunction(Window, @"LargeScroll", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_Left(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Left(Window.IDispatch, Left.d)
	COM_PutPropertyDouble(Window, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_NewWindow(Window.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Window, @"NewWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Window_Get_OnWindow(Window.IDispatch)
	ProcedureReturn COM_GetPropertyString(Window, @"OnWindow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_OnWindow(Window.IDispatch, OnWindow.s)
	COM_PutPropertyString(Window, @"OnWindow", OnWindow, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_Panes(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"Panes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window__PrintOut(Window.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Window, @"_PrintOut", @args(), 8, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_PrintPreview(Window.IDispatch, *EnableChanges.VARIANT, *result.VARIANT)
	COM_CallFunction(Window, @"PrintPreview", *EnableChanges, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_RangeSelection(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"RangeSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_ScrollColumn(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"ScrollColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_ScrollColumn(Window.IDispatch, ScrollColumn.l)
	COM_PutPropertyLong(Window, @"ScrollColumn", ScrollColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_ScrollRow(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"ScrollRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_ScrollRow(Window.IDispatch, ScrollRow.l)
	COM_PutPropertyLong(Window, @"ScrollRow", ScrollRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_ScrollWorkbookTabs(Window.IDispatch, *Sheets.VARIANT, *Position.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Position, @args(0))
	COM_VarClone(*Sheets, @args(1))
	COM_CallFunction(Window, @"ScrollWorkbookTabs", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_SelectedSheets(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"SelectedSheets", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_Selection(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"Selection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_SmallScroll(Window.IDispatch, *Down.VARIANT, *Up.VARIANT, *ToRight.VARIANT, *ToLeft.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*ToLeft, @args(0))
	COM_VarClone(*ToRight, @args(1))
	COM_VarClone(*Up, @args(2))
	COM_VarClone(*Down, @args(3))
	COM_CallFunction(Window, @"SmallScroll", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_Split(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"Split", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Split(Window.IDispatch, Split.w)
	COM_PutPropertyBool(Window, @"Split", Split, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_SplitColumn(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"SplitColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_SplitColumn(Window.IDispatch, SplitColumn.l)
	COM_PutPropertyLong(Window, @"SplitColumn", SplitColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_SplitHorizontal(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"SplitHorizontal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_SplitHorizontal(Window.IDispatch, SplitHorizontal.d)
	COM_PutPropertyDouble(Window, @"SplitHorizontal", SplitHorizontal, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_SplitRow(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"SplitRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_SplitRow(Window.IDispatch, SplitRow.l)
	COM_PutPropertyLong(Window, @"SplitRow", SplitRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_SplitVertical(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"SplitVertical", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_SplitVertical(Window.IDispatch, SplitVertical.d)
	COM_PutPropertyDouble(Window, @"SplitVertical", SplitVertical, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_TabRatio(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"TabRatio", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_TabRatio(Window.IDispatch, TabRatio.d)
	COM_PutPropertyDouble(Window, @"TabRatio", TabRatio, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_Top(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Top(Window.IDispatch, Top.d)
	COM_PutPropertyDouble(Window, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_Type(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_UsableHeight(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"UsableHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_UsableWidth(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"UsableWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_Visible(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Visible(Window.IDispatch, Visible.w)
	COM_PutPropertyBool(Window, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_VisibleRange(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"VisibleRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Window_Get_Width(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Window, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Width(Window.IDispatch, Width.d)
	COM_PutPropertyDouble(Window, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_WindowNumber(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"WindowNumber", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_WindowState(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"WindowState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_WindowState(Window.IDispatch, WindowState.l)
	COM_PutPropertyLong(Window, @"WindowState", WindowState, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_Zoom(Window.IDispatch, *result.VARIANT)
	COM_GetProperty(Window, @"Zoom", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_Zoom(Window.IDispatch, *Zoom.VARIANT)
	COM_PutProperty(Window, @"Zoom", *Zoom, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Get_View(Window.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Window, @"View", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_View(Window.IDispatch, View.l)
	COM_PutPropertyLong(Window, @"View", View, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayRightToLeft(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayRightToLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayRightToLeft(Window.IDispatch, DisplayRightToLeft.w)
	COM_PutPropertyBool(Window, @"DisplayRightToLeft", DisplayRightToLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_PointsToScreenPixelsX(Window.IDispatch, Points.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Points
	ProcedureReturn COM_CallFunctionLong(Window, @"PointsToScreenPixelsX", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_PointsToScreenPixelsY(Window.IDispatch, Points.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Points
	ProcedureReturn COM_CallFunctionLong(Window, @"PointsToScreenPixelsY", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_RangeFromPoint(Window.IDispatch, x.l, y.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = y
	args(1)\vt = #VT_I4 : args(1)\lVal = x
	ProcedureReturn COM_CallFunctionDispatch(Window, @"RangeFromPoint", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_ScrollIntoView(Window.IDispatch, Left.l, Top.l, Width.l, Height.l, *Start.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Start, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Height
	args(2)\vt = #VT_I4 : args(2)\lVal = Width
	args(3)\vt = #VT_I4 : args(3)\lVal = Top
	args(4)\vt = #VT_I4 : args(4)\lVal = Left
	COM_CallFunction(Window, @"ScrollIntoView", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_SheetViews(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"SheetViews", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Window_Get_ActiveSheetView(Window.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Window, @"ActiveSheetView", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_PrintOut(Window.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Window, @"PrintOut", @args(), 8, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayRuler(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayRuler", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayRuler(Window.IDispatch, DisplayRuler.w)
	COM_PutPropertyBool(Window, @"DisplayRuler", DisplayRuler, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_AutoFilterDateGrouping(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"AutoFilterDateGrouping", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_AutoFilterDateGrouping(Window.IDispatch, AutoFilterDateGrouping.w)
	COM_PutPropertyBool(Window, @"AutoFilterDateGrouping", AutoFilterDateGrouping, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Window_Get_DisplayWhitespace(Window.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Window, @"DisplayWhitespace", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Window_Put_DisplayWhitespace(Window.IDispatch, DisplayWhitespace.w)
	COM_PutPropertyBool(Window, @"DisplayWhitespace", DisplayWhitespace, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Windows
;- -------------------------
ProcedureDLL.i Excel_Windows_Get_Application(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Windows, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Windows_Get_Creator(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Windows, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Windows_Get_Parent(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Windows, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Windows_Arrange(Windows.IDispatch, ArrangeStyle.l, *ActiveWorkbook.VARIANT, *SyncHorizontal.VARIANT, *SyncVertical.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*SyncVertical, @args(0))
	COM_VarClone(*SyncHorizontal, @args(1))
	COM_VarClone(*ActiveWorkbook, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = ArrangeStyle
	COM_CallFunction(Windows, @"Arrange", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Windows_Get_Count(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Windows, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Windows_Get_Item(Windows.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Windows, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Windows_Get__NewEnum(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Windows, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Windows_Get__Default(Windows.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Windows, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Windows_CompareSideBySideWith(Windows.IDispatch, *WindowName.VARIANT)
	ProcedureReturn COM_CallFunctionBool(Windows, @"CompareSideBySideWith", *WindowName, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Windows_BreakSideBySide(Windows.IDispatch)
	ProcedureReturn COM_CallFunctionBool(Windows, @"BreakSideBySide", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Windows_Get_SyncScrollingSideBySide(Windows.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Windows, @"SyncScrollingSideBySide", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Windows_Put_SyncScrollingSideBySide(Windows.IDispatch, SyncScrollingSideBySide.w)
	COM_PutPropertyBool(Windows, @"SyncScrollingSideBySide", SyncScrollingSideBySide, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Windows_ResetPositionsSideBySide(Windows.IDispatch)
	COM_CallFunction(Windows, @"ResetPositionsSideBySide", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_WorksheetFunction
;- -------------------------
ProcedureDLL.i Excel_WorksheetFunction_Get_Application(WorksheetFunction.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorksheetFunction, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Get_Creator(WorksheetFunction.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WorksheetFunction, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorksheetFunction_Get_Parent(WorksheetFunction.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorksheetFunction, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction__WSFunction(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(WorksheetFunction, @"_WSFunction", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Count(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Count", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsNA(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsNA", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsError(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsError", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Sum(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Sum", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Average(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Average", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Min(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Min", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Max(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Max", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Npv(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	args(29)\vt = #VT_R8 : args(29)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Npv", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_StDev(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"StDev", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Dollar(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Dollar", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Fixed(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Fixed", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Pi(WorksheetFunction.IDispatch)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Pi", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ln(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ln", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Log10(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Log10", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Round(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Round", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Lookup(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *result.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	COM_CallFunction(WorksheetFunction, @"Lookup", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Index(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"Index", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Rept(WorksheetFunction.IDispatch, Arg1.s, Arg2.d)
	Dim args.VARIANT(1)
	Protected.s r
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Rept", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_And(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"And", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_Or(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"Or", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DCount(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DCount", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DSum(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DSum", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DAverage(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DAverage", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DMin(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DMin", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DMax(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DMax", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DStDev(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DStDev", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Var(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Var", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DVar(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DVar", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Text(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.s)
	Dim args.VARIANT(1)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg2)
	COM_VarClone(*Arg1, @args(1))
	r = COM_CallFunctionString(WorksheetFunction, @"Text", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_LinEst(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"LinEst", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Trend(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"Trend", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_LogEst(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"LogEst", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Growth(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"Growth", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Pv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Pv", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Fv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Fv", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NPer(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NPer", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Pmt(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Pmt", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Rate(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg3
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg2
	args(5)\vt = #VT_R8 : args(5)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Rate", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_MIrr(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"MIrr", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Irr(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Irr", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Match(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Match", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Weekday(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Weekday", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Search(WorksheetFunction.IDispatch, Arg1.s, Arg2.s, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	Protected.d r
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg2)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionDouble(WorksheetFunction, @"Search", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Transpose(WorksheetFunction.IDispatch, *Arg1.VARIANT, *result.VARIANT)
	COM_CallFunction(WorksheetFunction, @"Transpose", *Arg1, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Atan2(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Atan2", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Asin(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Asin", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Acos(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Acos", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Choose(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(WorksheetFunction, @"Choose", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_HLookup(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"HLookup", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_VLookup(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	COM_CallFunction(WorksheetFunction, @"VLookup", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Log(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Log", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Proper(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Proper", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Trim(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Trim", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Replace(WorksheetFunction.IDispatch, Arg1.s, Arg2.d, Arg3.d, Arg4.s)
	Dim args.VARIANT(3)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg4)
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Replace", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Substitute(WorksheetFunction.IDispatch, Arg1.s, Arg2.s, Arg3.s, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	Protected.s r
	COM_VarClone(*Arg4, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg3)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Arg2)
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Substitute", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Find(WorksheetFunction.IDispatch, Arg1.s, Arg2.s, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	Protected.d r
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg2)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionDouble(WorksheetFunction, @"Find", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsErr(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsErr", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsText(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsText", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsNumber(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsNumber", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Sln(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Sln", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Syd(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Syd", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ddb(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg4
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ddb", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Clean(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Clean", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_MDeterm(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"MDeterm", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_MInverse(WorksheetFunction.IDispatch, *Arg1.VARIANT, *result.VARIANT)
	COM_CallFunction(WorksheetFunction, @"MInverse", *Arg1, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_MMult(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	COM_CallFunction(WorksheetFunction, @"MMult", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ipmt(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg4
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg3
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg2
	args(5)\vt = #VT_R8 : args(5)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ipmt", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ppmt(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg4
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg3
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg2
	args(5)\vt = #VT_R8 : args(5)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ppmt", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CountA(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CountA", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Product(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Product", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Fact(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Fact", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DProduct(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DProduct", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsNonText(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsNonText", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_StDevP(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"StDevP", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_VarP(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"VarP", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DStDevP(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DStDevP", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DVarP(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DVarP", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsLogical(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsLogical", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DCountA(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DCountA", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_USDollar(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"USDollar", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FindB(WorksheetFunction.IDispatch, Arg1.s, Arg2.s, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	Protected.d r
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg2)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionDouble(WorksheetFunction, @"FindB", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SearchB(WorksheetFunction.IDispatch, Arg1.s, Arg2.s, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	Protected.d r
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Arg2)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionDouble(WorksheetFunction, @"SearchB", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ReplaceB(WorksheetFunction.IDispatch, Arg1.s, Arg2.d, Arg3.d, Arg4.s)
	Dim args.VARIANT(3)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg4)
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"ReplaceB", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RoundUp(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RoundUp", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RoundDown(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RoundDown", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Rank(WorksheetFunction.IDispatch, Arg1.d, Arg2.IDispatch, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Rank", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Days360(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Days360", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Vdb(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d, Arg5.d, *Arg6.VARIANT, *Arg7.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Arg7, @args(0))
	COM_VarClone(*Arg6, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg5
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg4
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg3
	args(5)\vt = #VT_R8 : args(5)\dblVal = Arg2
	args(6)\vt = #VT_R8 : args(6)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Vdb", @args(), 7, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Median(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Median", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumProduct(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumProduct", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Sinh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Sinh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Cosh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Cosh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Tanh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Tanh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Asinh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Asinh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Acosh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Acosh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Atanh(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Atanh", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_DGet(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT, *result.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	COM_CallFunction(WorksheetFunction, @"DGet", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Db(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg4
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Db", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_Frequency(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	COM_CallFunction(WorksheetFunction, @"Frequency", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AveDev(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AveDev", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BetaDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BetaDist", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_GammaLn(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"GammaLn", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BetaInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg3
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg2
	args(4)\vt = #VT_R8 : args(4)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BetaInv", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BinomDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.w)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BinomDist", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ChiDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ChiDist", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ChiInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ChiInv", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Combin(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Combin", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Confidence(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Confidence", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CritBinom(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CritBinom", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Even(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Even", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ExponDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.w)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ExponDist", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FDist", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FInv", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Fisher(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Fisher", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FisherInv(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FisherInv", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Floor(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Floor", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_GammaDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.w)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"GammaDist", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_GammaInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"GammaInv", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ceiling(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ceiling", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_HypGeomDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"HypGeomDist", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_LogNormDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"LogNormDist", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_LogInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"LogInv", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NegBinomDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NegBinomDist", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NormDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.w)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NormDist", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NormSDist(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NormSDist", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NormInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NormInv", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NormSInv(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NormSInv", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Standardize(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Standardize", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Odd(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Odd", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Permut(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Permut", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Poisson(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.w)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Poisson", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TDist(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg3
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TDist", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Weibull(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.w)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Weibull", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumXMY2(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumXMY2", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumX2MY2(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumX2MY2", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumX2PY2(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumX2PY2", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ChiTest(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ChiTest", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Correl(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Correl", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Covar(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Covar", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Forecast(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Forecast", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FTest(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FTest", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Intercept(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Intercept", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Pearson(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Pearson", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RSq(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RSq", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_StEyx(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"StEyx", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Slope(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Slope", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TTest(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, Arg3.d, Arg4.d)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TTest", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Prob(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, Arg3.d, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Prob", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DevSq(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DevSq", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_GeoMean(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"GeoMean", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_HarMean(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"HarMean", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumSq(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumSq", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Kurt(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Kurt", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Skew(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Skew", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ZTest(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ZTest", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Large(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Large", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Small(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Small", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Quartile(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Quartile", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Percentile(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Percentile", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_PercentRank(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"PercentRank", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Mode(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Mode", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TrimMean(WorksheetFunction.IDispatch, *Arg1.VARIANT, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TrimMean", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TInv(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TInv", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Power(WorksheetFunction.IDispatch, Arg1.d, Arg2.d)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg2
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Power", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Radians(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Radians", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Degrees(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Degrees", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Subtotal(WorksheetFunction.IDispatch, Arg1.d, Arg2.IDispatch, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	args(28)\vt = #VT_DISPATCH : args(28)\pdispVal = Arg2
	args(29)\vt = #VT_R8 : args(29)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Subtotal", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumIf(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumIf", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CountIf(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CountIf", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CountBlank(WorksheetFunction.IDispatch, Arg1.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CountBlank", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Ispmt(WorksheetFunction.IDispatch, Arg1.d, Arg2.d, Arg3.d, Arg4.d)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg4
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg3
	args(2)\vt = #VT_R8 : args(2)\dblVal = Arg2
	args(3)\vt = #VT_R8 : args(3)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Ispmt", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Roman(WorksheetFunction.IDispatch, Arg1.d, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	args(1)\vt = #VT_R8 : args(1)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Roman", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Asc(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Asc", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Dbcs(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"Dbcs", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Phonetic(WorksheetFunction.IDispatch, Arg1.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Phonetic", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_BahtText(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"BahtText", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ThaiDayOfWeek(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ThaiDayOfWeek", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ThaiDigit(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionString(WorksheetFunction, @"ThaiDigit", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ThaiMonthOfYear(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ThaiMonthOfYear", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ThaiNumSound(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ThaiNumSound", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ThaiNumString(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ThaiNumString", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ThaiStringLength(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.d r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionDouble(WorksheetFunction, @"ThaiStringLength", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsThaiDigit(WorksheetFunction.IDispatch, Arg1.s)
	Dim args.VARIANT(0)
	Protected.w r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Arg1)
	r = COM_CallFunctionBool(WorksheetFunction, @"IsThaiDigit", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RoundBahtDown(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RoundBahtDown", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RoundBahtUp(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RoundBahtUp", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ThaiYear(WorksheetFunction.IDispatch, Arg1.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ThaiYear", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_RTD(WorksheetFunction.IDispatch, *progID.VARIANT, *server.VARIANT, *topic1.VARIANT, *topic2.VARIANT, *topic3.VARIANT, *topic4.VARIANT, *topic5.VARIANT, *topic6.VARIANT, *topic7.VARIANT, *topic8.VARIANT, *topic9.VARIANT, *topic10.VARIANT, *topic11.VARIANT, *topic12.VARIANT, *topic13.VARIANT, *topic14.VARIANT, *topic15.VARIANT, *topic16.VARIANT, *topic17.VARIANT, *topic18.VARIANT, *topic19.VARIANT, *topic20.VARIANT, *topic21.VARIANT, *topic22.VARIANT, *topic23.VARIANT, *topic24.VARIANT, *topic25.VARIANT, *topic26.VARIANT, *topic27.VARIANT, *topic28.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*topic28, @args(0))
	COM_VarClone(*topic27, @args(1))
	COM_VarClone(*topic26, @args(2))
	COM_VarClone(*topic25, @args(3))
	COM_VarClone(*topic24, @args(4))
	COM_VarClone(*topic23, @args(5))
	COM_VarClone(*topic22, @args(6))
	COM_VarClone(*topic21, @args(7))
	COM_VarClone(*topic20, @args(8))
	COM_VarClone(*topic19, @args(9))
	COM_VarClone(*topic18, @args(10))
	COM_VarClone(*topic17, @args(11))
	COM_VarClone(*topic16, @args(12))
	COM_VarClone(*topic15, @args(13))
	COM_VarClone(*topic14, @args(14))
	COM_VarClone(*topic13, @args(15))
	COM_VarClone(*topic12, @args(16))
	COM_VarClone(*topic11, @args(17))
	COM_VarClone(*topic10, @args(18))
	COM_VarClone(*topic9, @args(19))
	COM_VarClone(*topic8, @args(20))
	COM_VarClone(*topic7, @args(21))
	COM_VarClone(*topic6, @args(22))
	COM_VarClone(*topic5, @args(23))
	COM_VarClone(*topic4, @args(24))
	COM_VarClone(*topic3, @args(25))
	COM_VarClone(*topic2, @args(26))
	COM_VarClone(*topic1, @args(27))
	COM_VarClone(*server, @args(28))
	COM_VarClone(*progID, @args(29))
	COM_CallFunction(WorksheetFunction, @"RTD", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Hex2Bin(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Hex2Bin", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Hex2Dec(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Hex2Dec", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Hex2Oct(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Hex2Oct", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Dec2Bin(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Dec2Bin", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Dec2Hex(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Dec2Hex", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Dec2Oct(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Dec2Oct", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Oct2Bin(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Oct2Bin", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Oct2Hex(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Oct2Hex", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Oct2Dec(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Oct2Dec", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Bin2Dec(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Bin2Dec", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Bin2Oct(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Bin2Oct", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Bin2Hex(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Bin2Hex", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImSub(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImSub", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImDiv(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImDiv", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImPower(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImPower", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImAbs(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImAbs", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImSqrt(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImSqrt", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImLn(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImLn", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImLog2(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImLog2", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImLog10(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImLog10", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImSin(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImSin", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImCos(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImCos", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImExp(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImExp", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImArgument(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImArgument", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImConjugate(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImConjugate", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Imaginary(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Imaginary", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ImReal(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ImReal", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_Complex(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"Complex", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImSum(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImSum", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorksheetFunction_ImProduct(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionString(WorksheetFunction, @"ImProduct", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SeriesSum(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SeriesSum", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FactDouble(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FactDouble", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SqrtPi(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SqrtPi", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Quotient(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Quotient", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Delta(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Delta", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_GeStep(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"GeStep", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsEven(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsEven", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetFunction_IsOdd(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionBool(WorksheetFunction, @"IsOdd", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_MRound(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"MRound", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Erf(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Erf", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_ErfC(WorksheetFunction.IDispatch, *Arg1.VARIANT)
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"ErfC", *Arg1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BesselJ(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BesselJ", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BesselK(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BesselK", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BesselY(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BesselY", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_BesselI(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"BesselI", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Xirr(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Xirr", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Xnpv(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Xnpv", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_PriceMat(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"PriceMat", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_YieldMat(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"YieldMat", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_IntRate(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"IntRate", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Received(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Received", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Disc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Disc", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_PriceDisc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"PriceDisc", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_YieldDisc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"YieldDisc", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TBillEq(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TBillEq", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TBillPrice(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TBillPrice", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_TBillYield(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"TBillYield", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Price(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Arg7, @args(0))
	COM_VarClone(*Arg6, @args(1))
	COM_VarClone(*Arg5, @args(2))
	COM_VarClone(*Arg4, @args(3))
	COM_VarClone(*Arg3, @args(4))
	COM_VarClone(*Arg2, @args(5))
	COM_VarClone(*Arg1, @args(6))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Price", @args(), 7, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DollarDe(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DollarDe", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_DollarFr(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"DollarFr", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Nominal(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Nominal", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Effect(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Effect", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CumPrinc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CumPrinc", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CumIPmt(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CumIPmt", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_EDate(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"EDate", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_EoMonth(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"EoMonth", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_YearFrac(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"YearFrac", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupDayBs(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupDayBs", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupDays(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupDays", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupDaysNc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupDaysNc", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupNcd(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupNcd", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupNum(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupNum", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CoupPcd(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Arg4, @args(0))
	COM_VarClone(*Arg3, @args(1))
	COM_VarClone(*Arg2, @args(2))
	COM_VarClone(*Arg1, @args(3))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CoupPcd", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Duration(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Duration", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_MDuration(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Arg6, @args(0))
	COM_VarClone(*Arg5, @args(1))
	COM_VarClone(*Arg4, @args(2))
	COM_VarClone(*Arg3, @args(3))
	COM_VarClone(*Arg2, @args(4))
	COM_VarClone(*Arg1, @args(5))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"MDuration", @args(), 6, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_OddLPrice(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*Arg8, @args(0))
	COM_VarClone(*Arg7, @args(1))
	COM_VarClone(*Arg6, @args(2))
	COM_VarClone(*Arg5, @args(3))
	COM_VarClone(*Arg4, @args(4))
	COM_VarClone(*Arg3, @args(5))
	COM_VarClone(*Arg2, @args(6))
	COM_VarClone(*Arg1, @args(7))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"OddLPrice", @args(), 8, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_OddLYield(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*Arg8, @args(0))
	COM_VarClone(*Arg7, @args(1))
	COM_VarClone(*Arg6, @args(2))
	COM_VarClone(*Arg5, @args(3))
	COM_VarClone(*Arg4, @args(4))
	COM_VarClone(*Arg3, @args(5))
	COM_VarClone(*Arg2, @args(6))
	COM_VarClone(*Arg1, @args(7))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"OddLYield", @args(), 8, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_OddFPrice(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*Arg9, @args(0))
	COM_VarClone(*Arg8, @args(1))
	COM_VarClone(*Arg7, @args(2))
	COM_VarClone(*Arg6, @args(3))
	COM_VarClone(*Arg5, @args(4))
	COM_VarClone(*Arg4, @args(5))
	COM_VarClone(*Arg3, @args(6))
	COM_VarClone(*Arg2, @args(7))
	COM_VarClone(*Arg1, @args(8))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"OddFPrice", @args(), 9, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_OddFYield(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*Arg9, @args(0))
	COM_VarClone(*Arg8, @args(1))
	COM_VarClone(*Arg7, @args(2))
	COM_VarClone(*Arg6, @args(3))
	COM_VarClone(*Arg5, @args(4))
	COM_VarClone(*Arg4, @args(5))
	COM_VarClone(*Arg3, @args(6))
	COM_VarClone(*Arg2, @args(7))
	COM_VarClone(*Arg1, @args(8))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"OddFYield", @args(), 9, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_RandBetween(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"RandBetween", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_WeekNum(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"WeekNum", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AmorDegrc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Arg7, @args(0))
	COM_VarClone(*Arg6, @args(1))
	COM_VarClone(*Arg5, @args(2))
	COM_VarClone(*Arg4, @args(3))
	COM_VarClone(*Arg3, @args(4))
	COM_VarClone(*Arg2, @args(5))
	COM_VarClone(*Arg1, @args(6))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AmorDegrc", @args(), 7, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AmorLinc(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Arg7, @args(0))
	COM_VarClone(*Arg6, @args(1))
	COM_VarClone(*Arg5, @args(2))
	COM_VarClone(*Arg4, @args(3))
	COM_VarClone(*Arg3, @args(4))
	COM_VarClone(*Arg2, @args(5))
	COM_VarClone(*Arg1, @args(6))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AmorLinc", @args(), 7, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Convert(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Convert", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AccrInt(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Arg7, @args(0))
	COM_VarClone(*Arg6, @args(1))
	COM_VarClone(*Arg5, @args(2))
	COM_VarClone(*Arg4, @args(3))
	COM_VarClone(*Arg3, @args(4))
	COM_VarClone(*Arg2, @args(5))
	COM_VarClone(*Arg1, @args(6))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AccrInt", @args(), 7, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AccrIntM(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Arg5, @args(0))
	COM_VarClone(*Arg4, @args(1))
	COM_VarClone(*Arg3, @args(2))
	COM_VarClone(*Arg2, @args(3))
	COM_VarClone(*Arg1, @args(4))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AccrIntM", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_WorkDay(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"WorkDay", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_NetworkDays(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	COM_VarClone(*Arg1, @args(2))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"NetworkDays", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Gcd(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Gcd", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_MultiNomial(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"MultiNomial", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_Lcm(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"Lcm", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_FVSchedule(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"FVSchedule", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_SumIfs(WorksheetFunction.IDispatch, Arg1.IDispatch, Arg2.IDispatch, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT)
	Dim args.VARIANT(28)
	COM_VarClone(*Arg29, @args(0))
	COM_VarClone(*Arg28, @args(1))
	COM_VarClone(*Arg27, @args(2))
	COM_VarClone(*Arg26, @args(3))
	COM_VarClone(*Arg25, @args(4))
	COM_VarClone(*Arg24, @args(5))
	COM_VarClone(*Arg23, @args(6))
	COM_VarClone(*Arg22, @args(7))
	COM_VarClone(*Arg21, @args(8))
	COM_VarClone(*Arg20, @args(9))
	COM_VarClone(*Arg19, @args(10))
	COM_VarClone(*Arg18, @args(11))
	COM_VarClone(*Arg17, @args(12))
	COM_VarClone(*Arg16, @args(13))
	COM_VarClone(*Arg15, @args(14))
	COM_VarClone(*Arg14, @args(15))
	COM_VarClone(*Arg13, @args(16))
	COM_VarClone(*Arg12, @args(17))
	COM_VarClone(*Arg11, @args(18))
	COM_VarClone(*Arg10, @args(19))
	COM_VarClone(*Arg9, @args(20))
	COM_VarClone(*Arg8, @args(21))
	COM_VarClone(*Arg7, @args(22))
	COM_VarClone(*Arg6, @args(23))
	COM_VarClone(*Arg5, @args(24))
	COM_VarClone(*Arg4, @args(25))
	COM_VarClone(*Arg3, @args(26))
	args(27)\vt = #VT_DISPATCH : args(27)\pdispVal = Arg2
	args(28)\vt = #VT_DISPATCH : args(28)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"SumIfs", @args(), 29, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_CountIfs(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	args(29)\vt = #VT_DISPATCH : args(29)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"CountIfs", @args(), 30, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AverageIf(WorksheetFunction.IDispatch, Arg1.IDispatch, *Arg2.VARIANT, *Arg3.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Arg3, @args(0))
	COM_VarClone(*Arg2, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AverageIf", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_WorksheetFunction_AverageIfs(WorksheetFunction.IDispatch, Arg1.IDispatch, Arg2.IDispatch, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT)
	Dim args.VARIANT(28)
	COM_VarClone(*Arg29, @args(0))
	COM_VarClone(*Arg28, @args(1))
	COM_VarClone(*Arg27, @args(2))
	COM_VarClone(*Arg26, @args(3))
	COM_VarClone(*Arg25, @args(4))
	COM_VarClone(*Arg24, @args(5))
	COM_VarClone(*Arg23, @args(6))
	COM_VarClone(*Arg22, @args(7))
	COM_VarClone(*Arg21, @args(8))
	COM_VarClone(*Arg20, @args(9))
	COM_VarClone(*Arg19, @args(10))
	COM_VarClone(*Arg18, @args(11))
	COM_VarClone(*Arg17, @args(12))
	COM_VarClone(*Arg16, @args(13))
	COM_VarClone(*Arg15, @args(14))
	COM_VarClone(*Arg14, @args(15))
	COM_VarClone(*Arg13, @args(16))
	COM_VarClone(*Arg12, @args(17))
	COM_VarClone(*Arg11, @args(18))
	COM_VarClone(*Arg10, @args(19))
	COM_VarClone(*Arg9, @args(20))
	COM_VarClone(*Arg8, @args(21))
	COM_VarClone(*Arg7, @args(22))
	COM_VarClone(*Arg6, @args(23))
	COM_VarClone(*Arg5, @args(24))
	COM_VarClone(*Arg4, @args(25))
	COM_VarClone(*Arg3, @args(26))
	args(27)\vt = #VT_DISPATCH : args(27)\pdispVal = Arg2
	args(28)\vt = #VT_DISPATCH : args(28)\pdispVal = Arg1
	ProcedureReturn COM_CallFunctionDouble(WorksheetFunction, @"AverageIfs", @args(), 29, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetFunction_IfError(WorksheetFunction.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Arg2, @args(0))
	COM_VarClone(*Arg1, @args(1))
	COM_CallFunction(WorksheetFunction, @"IfError", @args(), 2, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Range
;- -------------------------
ProcedureDLL.i Excel_Range_Get_Application(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Creator(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Parent(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Activate(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Activate", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_AddIndent(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"AddIndent", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_AddIndent(Range.IDispatch, *AddIndent.VARIANT)
	COM_PutProperty(Range, @"AddIndent", *AddIndent, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_Get_Address(Range.IDispatch, *RowAbsolute.VARIANT, *ColumnAbsolute.VARIANT, ReferenceStyle.l, *External.VARIANT, *RelativeTo.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*RelativeTo, @args(0))
	COM_VarClone(*External, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = ReferenceStyle
	COM_VarClone(*ColumnAbsolute, @args(3))
	COM_VarClone(*RowAbsolute, @args(4))
	ProcedureReturn COM_GetPropertyString(Range, @"Address", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_Get_AddressLocal(Range.IDispatch, *RowAbsolute.VARIANT, *ColumnAbsolute.VARIANT, ReferenceStyle.l, *External.VARIANT, *RelativeTo.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*RelativeTo, @args(0))
	COM_VarClone(*External, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = ReferenceStyle
	COM_VarClone(*ColumnAbsolute, @args(3))
	COM_VarClone(*RowAbsolute, @args(4))
	ProcedureReturn COM_GetPropertyString(Range, @"AddressLocal", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_AdvancedFilter(Range.IDispatch, Action.l, *CriteriaRange.VARIANT, *CopyToRange.VARIANT, *Unique.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Unique, @args(0))
	COM_VarClone(*CopyToRange, @args(1))
	COM_VarClone(*CriteriaRange, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Action
	COM_CallFunction(Range, @"AdvancedFilter", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ApplyNames(Range.IDispatch, *Names.VARIANT, *IgnoreRelativeAbsolute.VARIANT, *UseRowColumnNames.VARIANT, *OmitColumn.VARIANT, *OmitRow.VARIANT, Order.l, *AppendLast.VARIANT, *result.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*AppendLast, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Order
	COM_VarClone(*OmitRow, @args(2))
	COM_VarClone(*OmitColumn, @args(3))
	COM_VarClone(*UseRowColumnNames, @args(4))
	COM_VarClone(*IgnoreRelativeAbsolute, @args(5))
	COM_VarClone(*Names, @args(6))
	COM_CallFunction(Range, @"ApplyNames", @args(), 7, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ApplyOutlineStyles(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ApplyOutlineStyles", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Areas(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Areas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_AutoComplete(Range.IDispatch, String.s)
	Dim args.VARIANT(0)
	Protected.s r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(String)
	r = COM_CallFunctionString(Range, @"AutoComplete", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Range_AutoFill(Range.IDispatch, Destination.IDispatch, Type.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Type
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Destination
	COM_CallFunction(Range, @"AutoFill", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_AutoFilter(Range.IDispatch, *Field.VARIANT, *Criteria1.VARIANT, Operator.l, *Criteria2.VARIANT, *VisibleDropDown.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*VisibleDropDown, @args(0))
	COM_VarClone(*Criteria2, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Operator
	COM_VarClone(*Criteria1, @args(3))
	COM_VarClone(*Field, @args(4))
	COM_CallFunction(Range, @"AutoFilter", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_AutoFit(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"AutoFit", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_AutoFormat(Range.IDispatch, Format.l, *Number.VARIANT, *Font.VARIANT, *Alignment.VARIANT, *Border.VARIANT, *Pattern.VARIANT, *Width.VARIANT, *result.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Width, @args(0))
	COM_VarClone(*Pattern, @args(1))
	COM_VarClone(*Border, @args(2))
	COM_VarClone(*Alignment, @args(3))
	COM_VarClone(*Font, @args(4))
	COM_VarClone(*Number, @args(5))
	args(6)\vt = #VT_I4 : args(6)\lVal = Format
	COM_CallFunction(Range, @"AutoFormat", @args(), 7, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_AutoOutline(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"AutoOutline", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_BorderAround(Range.IDispatch, *LineStyle.VARIANT, Weight.l, ColorIndex.l, *Color.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Color, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = ColorIndex
	args(2)\vt = #VT_I4 : args(2)\lVal = Weight
	COM_VarClone(*LineStyle, @args(3))
	COM_CallFunction(Range, @"BorderAround", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Borders(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Calculate(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Calculate", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Cells(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Cells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Characters(Range.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CheckSpelling(Range.IDispatch, *CustomDictionary.VARIANT, *IgnoreUppercase.VARIANT, *AlwaysSuggest.VARIANT, *SpellLang.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*SpellLang, @args(0))
	COM_VarClone(*AlwaysSuggest, @args(1))
	COM_VarClone(*IgnoreUppercase, @args(2))
	COM_VarClone(*CustomDictionary, @args(3))
	COM_CallFunction(Range, @"CheckSpelling", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Clear(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Clear", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ClearContents(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ClearContents", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ClearFormats(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ClearNotes(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ClearNotes", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ClearOutline(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ClearOutline", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Column(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"Column", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_ColumnDifferences(Range.IDispatch, *Comparison.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Range, @"ColumnDifferences", *Comparison, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Columns(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Columns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_ColumnWidth(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"ColumnWidth", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_ColumnWidth(Range.IDispatch, *ColumnWidth.VARIANT)
	COM_PutProperty(Range, @"ColumnWidth", *ColumnWidth, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Consolidate(Range.IDispatch, *Sources.VARIANT, *Function.VARIANT, *TopRow.VARIANT, *LeftColumn.VARIANT, *CreateLinks.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*CreateLinks, @args(0))
	COM_VarClone(*LeftColumn, @args(1))
	COM_VarClone(*TopRow, @args(2))
	COM_VarClone(*Function, @args(3))
	COM_VarClone(*Sources, @args(4))
	COM_CallFunction(Range, @"Consolidate", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Copy(Range.IDispatch, *Destination.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"Copy", *Destination, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CopyFromRecordset(Range.IDispatch, _Data.IUnknown, *MaxRows.VARIANT, *MaxColumns.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*MaxColumns, @args(0))
	COM_VarClone(*MaxRows, @args(1))
	args(2)\vt = #VT_UNKNOWN : args(2)\punkVal = _Data
	ProcedureReturn COM_CallFunctionLong(Range, @"CopyFromRecordset", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CopyPicture(Range.IDispatch, Appearance.l, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_I4 : args(1)\lVal = Appearance
	COM_CallFunction(Range, @"CopyPicture", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Count(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CreateNames(Range.IDispatch, *Top.VARIANT, *Left.VARIANT, *Bottom.VARIANT, *Right.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Right, @args(0))
	COM_VarClone(*Bottom, @args(1))
	COM_VarClone(*Left, @args(2))
	COM_VarClone(*Top, @args(3))
	COM_CallFunction(Range, @"CreateNames", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CreatePublisher(Range.IDispatch, *Edition.VARIANT, Appearance.l, *ContainsPICT.VARIANT, *ContainsBIFF.VARIANT, *ContainsRTF.VARIANT, *ContainsVALU.VARIANT, *result.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*ContainsVALU, @args(0))
	COM_VarClone(*ContainsRTF, @args(1))
	COM_VarClone(*ContainsBIFF, @args(2))
	COM_VarClone(*ContainsPICT, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = Appearance
	COM_VarClone(*Edition, @args(5))
	COM_CallFunction(Range, @"CreatePublisher", @args(), 6, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_CurrentArray(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"CurrentArray", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_CurrentRegion(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"CurrentRegion", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Cut(Range.IDispatch, *Destination.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"Cut", *Destination, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_DataSeries(Range.IDispatch, *Rowcol.VARIANT, Type.l, Date.l, *Step.VARIANT, *Stop.VARIANT, *Trend.VARIANT, *result.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Trend, @args(0))
	COM_VarClone(*Stop, @args(1))
	COM_VarClone(*Step, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Date
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	COM_VarClone(*Rowcol, @args(5))
	COM_CallFunction(Range, @"DataSeries", @args(), 6, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get__Default(Range.IDispatch, *RowIndex.VARIANT, *ColumnIndex.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnIndex, @args(0))
	COM_VarClone(*RowIndex, @args(1))
	COM_GetProperty(Range, @"_Default", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put__Default(Range.IDispatch, *RowIndex.VARIANT, *ColumnIndex.VARIANT, *_Default.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*_Default, @args(0))
	COM_VarClone(*ColumnIndex, @args(1))
	COM_VarClone(*RowIndex, @args(2))
	COM_PutProperty(Range, @"_Default", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Delete(Range.IDispatch, *Shift.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"Delete", *Shift, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Dependents(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Dependents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_DialogBox(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"DialogBox", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_DirectDependents(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"DirectDependents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_DirectPrecedents(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"DirectPrecedents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_EditionOptions(Range.IDispatch, Type.l, Option.l, *Name.VARIANT, *Reference.VARIANT, Appearance.l, ChartSize.l, *Format.VARIANT, *result.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Format, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = ChartSize
	args(2)\vt = #VT_I4 : args(2)\lVal = Appearance
	COM_VarClone(*Reference, @args(3))
	COM_VarClone(*Name, @args(4))
	args(5)\vt = #VT_I4 : args(5)\lVal = Option
	args(6)\vt = #VT_I4 : args(6)\lVal = Type
	COM_CallFunction(Range, @"EditionOptions", @args(), 7, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_End(Range.IDispatch, Direction.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Direction
	ProcedureReturn COM_GetPropertyDispatch(Range, @"End", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_EntireColumn(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"EntireColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_EntireRow(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"EntireRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_FillDown(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"FillDown", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_FillLeft(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"FillLeft", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_FillRight(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"FillRight", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_FillUp(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"FillUp", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Find(Range.IDispatch, *What.VARIANT, *After.VARIANT, *LookIn.VARIANT, *LookAt.VARIANT, *SearchOrder.VARIANT, SearchDirection.l, *MatchCase.VARIANT, *MatchByte.VARIANT, *SearchFormat.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*SearchFormat, @args(0))
	COM_VarClone(*MatchByte, @args(1))
	COM_VarClone(*MatchCase, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = SearchDirection
	COM_VarClone(*SearchOrder, @args(4))
	COM_VarClone(*LookAt, @args(5))
	COM_VarClone(*LookIn, @args(6))
	COM_VarClone(*After, @args(7))
	COM_VarClone(*What, @args(8))
	ProcedureReturn COM_CallFunctionDispatch(Range, @"Find", @args(), 9, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_FindNext(Range.IDispatch, *After.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Range, @"FindNext", *After, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_FindPrevious(Range.IDispatch, *After.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Range, @"FindPrevious", *After, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Font(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Formula(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Formula", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Formula(Range.IDispatch, *Formula.VARIANT)
	COM_PutProperty(Range, @"Formula", *Formula, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaArray(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"FormulaArray", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaArray(Range.IDispatch, *FormulaArray.VARIANT)
	COM_PutProperty(Range, @"FormulaArray", *FormulaArray, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaLabel(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"FormulaLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaLabel(Range.IDispatch, FormulaLabel.l)
	COM_PutPropertyLong(Range, @"FormulaLabel", FormulaLabel, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaHidden(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"FormulaHidden", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaHidden(Range.IDispatch, *FormulaHidden.VARIANT)
	COM_PutProperty(Range, @"FormulaHidden", *FormulaHidden, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaLocal(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"FormulaLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaLocal(Range.IDispatch, *FormulaLocal.VARIANT)
	COM_PutProperty(Range, @"FormulaLocal", *FormulaLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaR1C1(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"FormulaR1C1", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaR1C1(Range.IDispatch, *FormulaR1C1.VARIANT)
	COM_PutProperty(Range, @"FormulaR1C1", *FormulaR1C1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_FormulaR1C1Local(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"FormulaR1C1Local", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_FormulaR1C1Local(Range.IDispatch, *FormulaR1C1Local.VARIANT)
	COM_PutProperty(Range, @"FormulaR1C1Local", *FormulaR1C1Local, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_FunctionWizard(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"FunctionWizard", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Range_GoalSeek(Range.IDispatch, *Goal.VARIANT, ChangingCell.IDispatch)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = ChangingCell
	COM_VarClone(*Goal, @args(1))
	ProcedureReturn COM_CallFunctionBool(Range, @"GoalSeek", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Group(Range.IDispatch, *Start.VARIANT, *_End.VARIANT, *By.VARIANT, *Periods.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Periods, @args(0))
	COM_VarClone(*By, @args(1))
	COM_VarClone(*_End, @args(2))
	COM_VarClone(*Start, @args(3))
	COM_CallFunction(Range, @"Group", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_HasArray(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"HasArray", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_HasFormula(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"HasFormula", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Height(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Height", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Hidden(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Hidden", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Hidden(Range.IDispatch, *Hidden.VARIANT)
	COM_PutProperty(Range, @"Hidden", *Hidden, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_HorizontalAlignment(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_HorizontalAlignment(Range.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(Range, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_IndentLevel(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"IndentLevel", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_IndentLevel(Range.IDispatch, *IndentLevel.VARIANT)
	COM_PutProperty(Range, @"IndentLevel", *IndentLevel, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_InsertIndent(Range.IDispatch, InsertAmount.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = InsertAmount
	COM_CallFunction(Range, @"InsertIndent", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Insert(Range.IDispatch, *Shift.VARIANT, *CopyOrigin.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*CopyOrigin, @args(0))
	COM_VarClone(*Shift, @args(1))
	COM_CallFunction(Range, @"Insert", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Interior(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Item(Range.IDispatch, *RowIndex.VARIANT, *ColumnIndex.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnIndex, @args(0))
	COM_VarClone(*RowIndex, @args(1))
	COM_GetProperty(Range, @"Item", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Item(Range.IDispatch, *RowIndex.VARIANT, *ColumnIndex.VARIANT, *Item.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Item, @args(0))
	COM_VarClone(*ColumnIndex, @args(1))
	COM_VarClone(*RowIndex, @args(2))
	COM_PutProperty(Range, @"Item", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Justify(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Justify", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Left(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Left", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_ListHeaderRows(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"ListHeaderRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ListNames(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ListNames", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_LocationInTable(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"LocationInTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Locked(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Locked", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Locked(Range.IDispatch, *Locked.VARIANT)
	COM_PutProperty(Range, @"Locked", *Locked, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Merge(Range.IDispatch, *Across.VARIANT)
	COM_CallFunction(Range, @"Merge", *Across, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_UnMerge(Range.IDispatch)
	COM_CallFunction(Range, @"UnMerge", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_MergeArea(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"MergeArea", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_MergeCells(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"MergeCells", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_MergeCells(Range.IDispatch, *MergeCells.VARIANT)
	COM_PutProperty(Range, @"MergeCells", *MergeCells, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Name(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Name", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Name(Range.IDispatch, *Name.VARIANT)
	COM_PutProperty(Range, @"Name", *Name, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_NavigateArrow(Range.IDispatch, *TowardPrecedent.VARIANT, *ArrowNumber.VARIANT, *LinkNumber.VARIANT, *result.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*LinkNumber, @args(0))
	COM_VarClone(*ArrowNumber, @args(1))
	COM_VarClone(*TowardPrecedent, @args(2))
	COM_CallFunction(Range, @"NavigateArrow", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get__NewEnum(Range.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Range, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Next(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Next", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_NoteText(Range.IDispatch, *Text.VARIANT, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	COM_VarClone(*Text, @args(2))
	ProcedureReturn COM_CallFunctionString(Range, @"NoteText", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_NumberFormat(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_NumberFormat(Range.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(Range, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_NumberFormatLocal(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"NumberFormatLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_NumberFormatLocal(Range.IDispatch, *NumberFormatLocal.VARIANT)
	COM_PutProperty(Range, @"NumberFormatLocal", *NumberFormatLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Offset(Range.IDispatch, *RowOffset.VARIANT, *ColumnOffset.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnOffset, @args(0))
	COM_VarClone(*RowOffset, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Offset", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Orientation(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Orientation(Range.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(Range, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_OutlineLevel(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"OutlineLevel", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_OutlineLevel(Range.IDispatch, *OutlineLevel.VARIANT)
	COM_PutProperty(Range, @"OutlineLevel", *OutlineLevel, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_PageBreak(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"PageBreak", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_PageBreak(Range.IDispatch, PageBreak.l)
	COM_PutPropertyLong(Range, @"PageBreak", PageBreak, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Parse(Range.IDispatch, *ParseLine.VARIANT, *Destination.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Destination, @args(0))
	COM_VarClone(*ParseLine, @args(1))
	COM_CallFunction(Range, @"Parse", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range__PasteSpecial(Range.IDispatch, Paste.l, Operation.l, *SkipBlanks.VARIANT, *Transpose.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Transpose, @args(0))
	COM_VarClone(*SkipBlanks, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Operation
	args(3)\vt = #VT_I4 : args(3)\lVal = Paste
	COM_CallFunction(Range, @"_PasteSpecial", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_PivotField(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"PivotField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_PivotItem(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"PivotItem", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_PivotTable(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"PivotTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Precedents(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Precedents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_PrefixCharacter(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"PrefixCharacter", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Previous(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Previous", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range___PrintOut(Range.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *result.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Range, @"__PrintOut", @args(), 7, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_PrintPreview(Range.IDispatch, *EnableChanges.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"PrintPreview", *EnableChanges, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_QueryTable(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"QueryTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Range(Range.IDispatch, *Cell1.VARIANT, *Cell2.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Cell2, @args(0))
	COM_VarClone(*Cell1, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Range", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_RemoveSubtotal(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"RemoveSubtotal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Range_Replace(Range.IDispatch, *What.VARIANT, *Replacement.VARIANT, *LookAt.VARIANT, *SearchOrder.VARIANT, *MatchCase.VARIANT, *MatchByte.VARIANT, *SearchFormat.VARIANT, *ReplaceFormat.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*ReplaceFormat, @args(0))
	COM_VarClone(*SearchFormat, @args(1))
	COM_VarClone(*MatchByte, @args(2))
	COM_VarClone(*MatchCase, @args(3))
	COM_VarClone(*SearchOrder, @args(4))
	COM_VarClone(*LookAt, @args(5))
	COM_VarClone(*Replacement, @args(6))
	COM_VarClone(*What, @args(7))
	ProcedureReturn COM_CallFunctionBool(Range, @"Replace", @args(), 8, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Resize(Range.IDispatch, *RowSize.VARIANT, *ColumnSize.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnSize, @args(0))
	COM_VarClone(*RowSize, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Resize", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Row(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"Row", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_RowDifferences(Range.IDispatch, *Comparison.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Range, @"RowDifferences", *Comparison, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_RowHeight(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"RowHeight", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_RowHeight(Range.IDispatch, *RowHeight.VARIANT)
	COM_PutProperty(Range, @"RowHeight", *RowHeight, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Rows(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Rows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Run(Range.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(Range, @"Run", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Select(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Show(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Show", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ShowDependents(Range.IDispatch, *Remove.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"ShowDependents", *Remove, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_ShowDetail(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"ShowDetail", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_ShowDetail(Range.IDispatch, *ShowDetail.VARIANT)
	COM_PutProperty(Range, @"ShowDetail", *ShowDetail, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ShowErrors(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"ShowErrors", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ShowPrecedents(Range.IDispatch, *Remove.VARIANT, *result.VARIANT)
	COM_CallFunction(Range, @"ShowPrecedents", *Remove, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_ShrinkToFit(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"ShrinkToFit", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_ShrinkToFit(Range.IDispatch, *ShrinkToFit.VARIANT)
	COM_PutProperty(Range, @"ShrinkToFit", *ShrinkToFit, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Sort(Range.IDispatch, *Key1.VARIANT, Order1.l, *Key2.VARIANT, *Type.VARIANT, Order2.l, *Key3.VARIANT, Order3.l, Header.l, *OrderCustom.VARIANT, *MatchCase.VARIANT, Orientation.l, SortMethod.l, DataOption1.l, DataOption2.l, DataOption3.l, *result.VARIANT)
	Dim args.VARIANT(14)
	args(0)\vt = #VT_I4 : args(0)\lVal = DataOption3
	args(1)\vt = #VT_I4 : args(1)\lVal = DataOption2
	args(2)\vt = #VT_I4 : args(2)\lVal = DataOption1
	args(3)\vt = #VT_I4 : args(3)\lVal = SortMethod
	args(4)\vt = #VT_I4 : args(4)\lVal = Orientation
	COM_VarClone(*MatchCase, @args(5))
	COM_VarClone(*OrderCustom, @args(6))
	args(7)\vt = #VT_I4 : args(7)\lVal = Header
	args(8)\vt = #VT_I4 : args(8)\lVal = Order3
	COM_VarClone(*Key3, @args(9))
	args(10)\vt = #VT_I4 : args(10)\lVal = Order2
	COM_VarClone(*Type, @args(11))
	COM_VarClone(*Key2, @args(12))
	args(13)\vt = #VT_I4 : args(13)\lVal = Order1
	COM_VarClone(*Key1, @args(14))
	COM_CallFunction(Range, @"Sort", @args(), 15, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_SortSpecial(Range.IDispatch, SortMethod.l, *Key1.VARIANT, Order1.l, *Type.VARIANT, *Key2.VARIANT, Order2.l, *Key3.VARIANT, Order3.l, Header.l, *OrderCustom.VARIANT, *MatchCase.VARIANT, Orientation.l, DataOption1.l, DataOption2.l, DataOption3.l, *result.VARIANT)
	Dim args.VARIANT(14)
	args(0)\vt = #VT_I4 : args(0)\lVal = DataOption3
	args(1)\vt = #VT_I4 : args(1)\lVal = DataOption2
	args(2)\vt = #VT_I4 : args(2)\lVal = DataOption1
	args(3)\vt = #VT_I4 : args(3)\lVal = Orientation
	COM_VarClone(*MatchCase, @args(4))
	COM_VarClone(*OrderCustom, @args(5))
	args(6)\vt = #VT_I4 : args(6)\lVal = Header
	args(7)\vt = #VT_I4 : args(7)\lVal = Order3
	COM_VarClone(*Key3, @args(8))
	args(9)\vt = #VT_I4 : args(9)\lVal = Order2
	COM_VarClone(*Key2, @args(10))
	COM_VarClone(*Type, @args(11))
	args(12)\vt = #VT_I4 : args(12)\lVal = Order1
	COM_VarClone(*Key1, @args(13))
	args(14)\vt = #VT_I4 : args(14)\lVal = SortMethod
	COM_CallFunction(Range, @"SortSpecial", @args(), 15, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_SoundNote(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"SoundNote", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_SpecialCells(Range.IDispatch, Type.l, *Value.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Value, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Range, @"SpecialCells", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Style(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Style", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Style(Range.IDispatch, *Style.VARIANT)
	COM_PutProperty(Range, @"Style", *Style, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_SubscribeTo(Range.IDispatch, Edition.s, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Edition)
	COM_CallFunction(Range, @"SubscribeTo", @args(), 2, *result, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_Range_Subtotal(Range.IDispatch, GroupBy.l, Function.l, *TotalList.VARIANT, *Replace.VARIANT, *PageBreaks.VARIANT, SummaryBelowData.l, *result.VARIANT)
	Dim args.VARIANT(5)
	args(0)\vt = #VT_I4 : args(0)\lVal = SummaryBelowData
	COM_VarClone(*PageBreaks, @args(1))
	COM_VarClone(*Replace, @args(2))
	COM_VarClone(*TotalList, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = Function
	args(5)\vt = #VT_I4 : args(5)\lVal = GroupBy
	COM_CallFunction(Range, @"Subtotal", @args(), 6, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Summary(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Summary", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Table(Range.IDispatch, *RowInput.VARIANT, *ColumnInput.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnInput, @args(0))
	COM_VarClone(*RowInput, @args(1))
	COM_CallFunction(Range, @"Table", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Text(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Text", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_TextToColumns(Range.IDispatch, *Destination.VARIANT, DataType.l, TextQualifier.l, *ConsecutiveDelimiter.VARIANT, *Tab.VARIANT, *Semicolon.VARIANT, *Comma.VARIANT, *Space.VARIANT, *Other.VARIANT, *OtherChar.VARIANT, *FieldInfo.VARIANT, *DecimalSeparator.VARIANT, *ThousandsSeparator.VARIANT, *TrailingMinusNumbers.VARIANT, *result.VARIANT)
	Dim args.VARIANT(13)
	COM_VarClone(*TrailingMinusNumbers, @args(0))
	COM_VarClone(*ThousandsSeparator, @args(1))
	COM_VarClone(*DecimalSeparator, @args(2))
	COM_VarClone(*FieldInfo, @args(3))
	COM_VarClone(*OtherChar, @args(4))
	COM_VarClone(*Other, @args(5))
	COM_VarClone(*Space, @args(6))
	COM_VarClone(*Comma, @args(7))
	COM_VarClone(*Semicolon, @args(8))
	COM_VarClone(*Tab, @args(9))
	COM_VarClone(*ConsecutiveDelimiter, @args(10))
	args(11)\vt = #VT_I4 : args(11)\lVal = TextQualifier
	args(12)\vt = #VT_I4 : args(12)\lVal = DataType
	COM_VarClone(*Destination, @args(13))
	COM_CallFunction(Range, @"TextToColumns", @args(), 14, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Top(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Top", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Ungroup(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"Ungroup", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_UseStandardHeight(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"UseStandardHeight", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_UseStandardHeight(Range.IDispatch, *UseStandardHeight.VARIANT)
	COM_PutProperty(Range, @"UseStandardHeight", *UseStandardHeight, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_UseStandardWidth(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"UseStandardWidth", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_UseStandardWidth(Range.IDispatch, *UseStandardWidth.VARIANT)
	COM_PutProperty(Range, @"UseStandardWidth", *UseStandardWidth, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Validation(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Validation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Value(Range.IDispatch, *RangeValueDataType.VARIANT, *result.VARIANT)
	COM_GetProperty(Range, @"Value", *RangeValueDataType, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Value(Range.IDispatch, *RangeValueDataType.VARIANT, *Value.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Value, @args(0))
	COM_VarClone(*RangeValueDataType, @args(1))
	COM_PutProperty(Range, @"Value", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Value2(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Value2", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_Value2(Range.IDispatch, *Value2.VARIANT)
	COM_PutProperty(Range, @"Value2", *Value2, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_VerticalAlignment(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_VerticalAlignment(Range.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(Range, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_Width(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"Width", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Worksheet(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Worksheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_WrapText(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"WrapText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_WrapText(Range.IDispatch, *WrapText.VARIANT)
	COM_PutProperty(Range, @"WrapText", *WrapText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_AddComment(Range.IDispatch, *Text.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Range, @"AddComment", *Text, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Comment(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Comment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ClearComments(Range.IDispatch)
	COM_CallFunction(Range, @"ClearComments", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Phonetic(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Phonetic", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_FormatConditions(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"FormatConditions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_ReadingOrder(Range.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Range, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_ReadingOrder(Range.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(Range, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Hyperlinks(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Hyperlinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Phonetics(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Phonetics", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_SetPhonetic(Range.IDispatch)
	COM_CallFunction(Range, @"SetPhonetic", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_Get_ID(Range.IDispatch)
	ProcedureReturn COM_GetPropertyString(Range, @"ID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Put_ID(Range.IDispatch, ID.s)
	COM_PutPropertyString(Range, @"ID", ID, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range__PrintOut(Range.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Range, @"_PrintOut", @args(), 8, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_PivotCell(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"PivotCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Dirty(Range.IDispatch)
	COM_CallFunction(Range, @"Dirty", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_Errors(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"Errors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_SmartTags(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"SmartTags", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Speak(Range.IDispatch, *SpeakDirection.VARIANT, *SpeakFormulas.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*SpeakFormulas, @args(0))
	COM_VarClone(*SpeakDirection, @args(1))
	COM_CallFunction(Range, @"Speak", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_PasteSpecial(Range.IDispatch, Paste.l, Operation.l, *SkipBlanks.VARIANT, *Transpose.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Transpose, @args(0))
	COM_VarClone(*SkipBlanks, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Operation
	args(3)\vt = #VT_I4 : args(3)\lVal = Paste
	COM_CallFunction(Range, @"PasteSpecial", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Range_Get_AllowEdit(Range.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Range, @"AllowEdit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_ListObject(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"ListObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_XPath(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"XPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Range_Get_ServerActions(Range.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Range, @"ServerActions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_RemoveDuplicates(Range.IDispatch, *Columns.VARIANT, Header.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Header
	COM_VarClone(*Columns, @args(1))
	COM_CallFunction(Range, @"RemoveDuplicates", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_PrintOut(Range.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *result.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Range, @"PrintOut", @args(), 8, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Range_Get_MDX(Range.IDispatch)
	ProcedureReturn COM_GetPropertyString(Range, @"MDX", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_ExportAsFixedFormat(Range.IDispatch, Type.l, *Filename.VARIANT, *Quality.VARIANT, *IncludeDocProperties.VARIANT, *IgnorePrintAreas.VARIANT, *From.VARIANT, *To.VARIANT, *OpenAfterPublish.VARIANT, *FixedFormatExtClassPtr.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*FixedFormatExtClassPtr, @args(0))
	COM_VarClone(*OpenAfterPublish, @args(1))
	COM_VarClone(*To, @args(2))
	COM_VarClone(*From, @args(3))
	COM_VarClone(*IgnorePrintAreas, @args(4))
	COM_VarClone(*IncludeDocProperties, @args(5))
	COM_VarClone(*Quality, @args(6))
	COM_VarClone(*Filename, @args(7))
	args(8)\vt = #VT_I4 : args(8)\lVal = Type
	COM_CallFunction(Range, @"ExportAsFixedFormat", @args(), 9, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_Get_CountLarge(Range.IDispatch, *result.VARIANT)
	COM_GetProperty(Range, @"CountLarge", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Range_CalculateRowMajorOrder(Range.IDispatch, *result.VARIANT)
	COM_CallFunction(Range, @"CalculateRowMajorOrder", 0, 0, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_VPageBreak
;- -------------------------
ProcedureDLL.i Excel_VPageBreak_Get_Application(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(VPageBreak, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Get_Creator(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(VPageBreak, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreak_Get_Parent(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(VPageBreak, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Delete(VPageBreak.IDispatch)
	COM_CallFunction(VPageBreak, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_DragOff(VPageBreak.IDispatch, Direction.l, RegionIndex.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = RegionIndex
	args(1)\vt = #VT_I4 : args(1)\lVal = Direction
	COM_CallFunction(VPageBreak, @"DragOff", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Get_Type(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(VPageBreak, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Put_Type(VPageBreak.IDispatch, Type.l)
	COM_PutPropertyLong(VPageBreak, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Get_Extent(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(VPageBreak, @"Extent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreak_Get_Location(VPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(VPageBreak, @"Location", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreak_Put_Location_(VPageBreak.IDispatch, Location.IDispatch)
	COM_PutPropertyDispatch(VPageBreak, @"Location", Location, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_HPageBreak
;- -------------------------
ProcedureDLL.i Excel_HPageBreak_Get_Application(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HPageBreak, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Get_Creator(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HPageBreak, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreak_Get_Parent(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HPageBreak, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Delete(HPageBreak.IDispatch)
	COM_CallFunction(HPageBreak, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_DragOff(HPageBreak.IDispatch, Direction.l, RegionIndex.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = RegionIndex
	args(1)\vt = #VT_I4 : args(1)\lVal = Direction
	COM_CallFunction(HPageBreak, @"DragOff", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Get_Type(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HPageBreak, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Put_Type(HPageBreak.IDispatch, Type.l)
	COM_PutPropertyLong(HPageBreak, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Get_Extent(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HPageBreak, @"Extent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreak_Get_Location(HPageBreak.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HPageBreak, @"Location", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreak_Put_Location_(HPageBreak.IDispatch, Location.IDispatch)
	COM_PutPropertyDispatch(HPageBreak, @"Location", Location, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_HPageBreaks
;- -------------------------
ProcedureDLL.i Excel_HPageBreaks_Get_Application(HPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HPageBreaks, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreaks_Get_Creator(HPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HPageBreaks, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreaks_Get_Parent(HPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HPageBreaks, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HPageBreaks_Get_Count(HPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HPageBreaks, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreaks_Get_Item(HPageBreaks.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(HPageBreaks, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreaks_Get__Default(HPageBreaks.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(HPageBreaks, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreaks_Get__NewEnum(HPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(HPageBreaks, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HPageBreaks_Add(HPageBreaks.IDispatch, Before.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Before
	ProcedureReturn COM_CallFunctionDispatch(HPageBreaks, @"Add", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_VPageBreaks
;- -------------------------
ProcedureDLL.i Excel_VPageBreaks_Get_Application(VPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(VPageBreaks, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreaks_Get_Creator(VPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(VPageBreaks, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreaks_Get_Parent(VPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(VPageBreaks, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_VPageBreaks_Get_Count(VPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(VPageBreaks, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreaks_Get_Item(VPageBreaks.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(VPageBreaks, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreaks_Get__Default(VPageBreaks.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(VPageBreaks, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreaks_Get__NewEnum(VPageBreaks.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(VPageBreaks, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_VPageBreaks_Add(VPageBreaks.IDispatch, Before.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Before
	ProcedureReturn COM_CallFunctionDispatch(VPageBreaks, @"Add", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_RecentFile
;- -------------------------
ProcedureDLL.i Excel_RecentFile_Get_Application(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RecentFile, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFile_Get_Creator(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RecentFile, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFile_Get_Parent(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RecentFile, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_RecentFile_Get_Name(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyString(RecentFile, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_RecentFile_Get_Path(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyString(RecentFile, @"Path", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFile_Get_Index(RecentFile.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RecentFile, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFile_Open(RecentFile.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(RecentFile, @"Open", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFile_Delete(RecentFile.IDispatch)
	COM_CallFunction(RecentFile, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_RecentFiles
;- -------------------------
ProcedureDLL.i Excel_RecentFiles_Get_Application(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RecentFiles, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFiles_Get_Creator(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RecentFiles, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFiles_Get_Parent(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RecentFiles, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFiles_Get_Maximum(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RecentFiles, @"Maximum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFiles_Put_Maximum(RecentFiles.IDispatch, Maximum.l)
	COM_PutPropertyLong(RecentFiles, @"Maximum", Maximum, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RecentFiles_Get_Count(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RecentFiles, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFiles_Get_Item(RecentFiles.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(RecentFiles, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFiles_Get__Default(RecentFiles.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(RecentFiles, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RecentFiles_Add(RecentFiles.IDispatch, Name.s)
	Dim args.VARIANT(0)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(RecentFiles, @"Add", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_RecentFiles_Get__NewEnum(RecentFiles.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(RecentFiles, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Style
;- -------------------------
ProcedureDLL.i Excel_Style_Get_Application(Style.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Style, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_Creator(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Style_Get_Parent(Style.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Style, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_AddIndent(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"AddIndent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_AddIndent(Style.IDispatch, AddIndent.w)
	COM_PutPropertyBool(Style, @"AddIndent", AddIndent, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_BuiltIn(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"BuiltIn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Style_Get_Borders(Style.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Style, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Delete(Style.IDispatch, *result.VARIANT)
	COM_CallFunction(Style, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Style_Get_Font(Style.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Style, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_FormulaHidden(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"FormulaHidden", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_FormulaHidden(Style.IDispatch, FormulaHidden.w)
	COM_PutPropertyBool(Style, @"FormulaHidden", FormulaHidden, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_HorizontalAlignment(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"HorizontalAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_HorizontalAlignment(Style.IDispatch, HorizontalAlignment.l)
	COM_PutPropertyLong(Style, @"HorizontalAlignment", HorizontalAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludeAlignment(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludeAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludeAlignment(Style.IDispatch, IncludeAlignment.w)
	COM_PutPropertyBool(Style, @"IncludeAlignment", IncludeAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludeBorder(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludeBorder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludeBorder(Style.IDispatch, IncludeBorder.w)
	COM_PutPropertyBool(Style, @"IncludeBorder", IncludeBorder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludeFont(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludeFont", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludeFont(Style.IDispatch, IncludeFont.w)
	COM_PutPropertyBool(Style, @"IncludeFont", IncludeFont, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludeNumber(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludeNumber", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludeNumber(Style.IDispatch, IncludeNumber.w)
	COM_PutPropertyBool(Style, @"IncludeNumber", IncludeNumber, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludePatterns(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludePatterns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludePatterns(Style.IDispatch, IncludePatterns.w)
	COM_PutPropertyBool(Style, @"IncludePatterns", IncludePatterns, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_IncludeProtection(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"IncludeProtection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IncludeProtection(Style.IDispatch, IncludeProtection.w)
	COM_PutPropertyBool(Style, @"IncludeProtection", IncludeProtection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_IndentLevel(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"IndentLevel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_IndentLevel(Style.IDispatch, IndentLevel.l)
	COM_PutPropertyLong(Style, @"IndentLevel", IndentLevel, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Style_Get_Interior(Style.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Style, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_Locked(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_Locked(Style.IDispatch, Locked.w)
	COM_PutPropertyBool(Style, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_MergeCells(Style.IDispatch, *result.VARIANT)
	COM_GetProperty(Style, @"MergeCells", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_MergeCells(Style.IDispatch, *MergeCells.VARIANT)
	COM_PutProperty(Style, @"MergeCells", *MergeCells, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get_Name(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get_NameLocal(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"NameLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get_NumberFormat(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"NumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_NumberFormat(Style.IDispatch, NumberFormat.s)
	COM_PutPropertyString(Style, @"NumberFormat", NumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get_NumberFormatLocal(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"NumberFormatLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_NumberFormatLocal(Style.IDispatch, NumberFormatLocal.s)
	COM_PutPropertyString(Style, @"NumberFormatLocal", NumberFormatLocal, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_Orientation(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_Orientation(Style.IDispatch, Orientation.l)
	COM_PutPropertyLong(Style, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_ShrinkToFit(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"ShrinkToFit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_ShrinkToFit(Style.IDispatch, ShrinkToFit.w)
	COM_PutPropertyBool(Style, @"ShrinkToFit", ShrinkToFit, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get_Value(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_VerticalAlignment(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"VerticalAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_VerticalAlignment(Style.IDispatch, VerticalAlignment.l)
	COM_PutPropertyLong(Style, @"VerticalAlignment", VerticalAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Style_Get_WrapText(Style.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Style, @"WrapText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_WrapText(Style.IDispatch, WrapText.w)
	COM_PutPropertyBool(Style, @"WrapText", WrapText, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Style_Get__Default(Style.IDispatch)
	ProcedureReturn COM_GetPropertyString(Style, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Get_ReadingOrder(Style.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Style, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Style_Put_ReadingOrder(Style.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(Style, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Styles
;- -------------------------
ProcedureDLL.i Excel_Styles_Get_Application(Styles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Styles, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Styles_Get_Creator(Styles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Styles, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Styles_Get_Parent(Styles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Styles, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Styles_Add(Styles.IDispatch, Name.s, *BasedOn.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*BasedOn, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(Styles, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Styles_Get_Count(Styles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Styles, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Styles_Get_Item(Styles.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Styles, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Styles_Merge(Styles.IDispatch, *Workbook.VARIANT, *result.VARIANT)
	COM_CallFunction(Styles, @"Merge", *Workbook, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Styles_Get__NewEnum(Styles.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Styles, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Styles_Get__Default(Styles.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Styles, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Borders
;- -------------------------
ProcedureDLL.i Excel_Borders_Get_Application(Borders.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Borders, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_Creator(Borders.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Borders, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Borders_Get_Parent(Borders.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Borders, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_Color(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_Color(Borders.IDispatch, *Color.VARIANT)
	COM_PutProperty(Borders, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_ColorIndex(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"ColorIndex", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_ColorIndex(Borders.IDispatch, *ColorIndex.VARIANT)
	COM_PutProperty(Borders, @"ColorIndex", *ColorIndex, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_Count(Borders.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Borders, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Borders_Get_Item(Borders.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Borders, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_LineStyle(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"LineStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_LineStyle(Borders.IDispatch, *LineStyle.VARIANT)
	COM_PutProperty(Borders, @"LineStyle", *LineStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Borders_Get__NewEnum(Borders.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Borders, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_Value(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_Value(Borders.IDispatch, *Value.VARIANT)
	COM_PutProperty(Borders, @"Value", *Value, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_Weight(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"Weight", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_Weight(Borders.IDispatch, *Weight.VARIANT)
	COM_PutProperty(Borders, @"Weight", *Weight, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Borders_Get__Default(Borders.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Borders, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_ThemeColor(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"ThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_ThemeColor(Borders.IDispatch, *ThemeColor.VARIANT)
	COM_PutProperty(Borders, @"ThemeColor", *ThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Get_TintAndShade(Borders.IDispatch, *result.VARIANT)
	COM_GetProperty(Borders, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Borders_Put_TintAndShade(Borders.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(Borders, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AddIn
;- -------------------------
ProcedureDLL.i Excel_AddIn_Get_Application(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AddIn, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AddIn_Get_Creator(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AddIn, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIn_Get_Parent(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AddIn, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Author(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Author", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Comments(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Comments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_FullName(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"FullName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AddIn_Get_Installed(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AddIn, @"Installed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AddIn_Put_Installed(AddIn.IDispatch, Installed.w)
	COM_PutPropertyBool(AddIn, @"Installed", Installed, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Keywords(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Keywords", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Name(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Path(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Path", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Subject(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Subject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_Title(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"Title", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_progID(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"progID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AddIn_Get_CLSID(AddIn.IDispatch)
	ProcedureReturn COM_GetPropertyString(AddIn, @"CLSID", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AddIns
;- -------------------------
ProcedureDLL.i Excel_AddIns_Get_Application(AddIns.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AddIns, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AddIns_Get_Creator(AddIns.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AddIns, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIns_Get_Parent(AddIns.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AddIns, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIns_Add(AddIns.IDispatch, Filename.s, *CopyFile.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*CopyFile, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(AddIns, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_AddIns_Get_Count(AddIns.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AddIns, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIns_Get_Item(AddIns.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(AddIns, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIns_Get__NewEnum(AddIns.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(AddIns, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AddIns_Get__Default(AddIns.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(AddIns, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Areas
;- -------------------------
ProcedureDLL.i Excel_Areas_Get_Application(Areas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Areas, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Areas_Get_Creator(Areas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Areas, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Areas_Get_Parent(Areas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Areas, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Areas_Get_Count(Areas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Areas, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Areas_Get_Item(Areas.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Areas, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Areas_Get__NewEnum(Areas.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Areas, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Areas_Get__Default(Areas.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Areas, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Charts
;- -------------------------
ProcedureDLL.i Excel_Charts_Get_Application(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Get_Creator(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Charts, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get_Parent(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Add(Charts.IDispatch, *Before.VARIANT, *After.VARIANT, *Count.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Count, @args(0))
	COM_VarClone(*After, @args(1))
	COM_VarClone(*Before, @args(2))
	ProcedureReturn COM_CallFunctionDispatch(Charts, @"Add", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Copy(Charts.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Charts, @"Copy", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Get_Count(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Charts, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Delete(Charts.IDispatch)
	COM_CallFunction(Charts, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts__Dummy7(Charts.IDispatch)
	COM_CallFunction(Charts, @"_Dummy7", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get_Item(Charts.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Move(Charts.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Charts, @"Move", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get__NewEnum(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Charts, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts___PrintOut(Charts.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Charts, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_PrintPreview(Charts.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Charts, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Select(Charts.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Charts, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get_HPageBreaks(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"HPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get_VPageBreaks(Charts.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"VPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Get_Visible(Charts.IDispatch, *result.VARIANT)
	COM_GetProperty(Charts, @"Visible", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_Put_Visible(Charts.IDispatch, *Visible.VARIANT)
	COM_PutProperty(Charts, @"Visible", *Visible, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Charts_Get__Default(Charts.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Charts, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts__PrintOut(Charts.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Charts, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Charts_PrintOut(Charts.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Charts, @"PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotCache
;- -------------------------
ProcedureDLL.i Excel_PivotCache_Get_Application(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCache, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_Creator(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCache_Get_Parent(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCache, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_BackgroundQuery(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"BackgroundQuery", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_BackgroundQuery(PivotCache.IDispatch, BackgroundQuery.w)
	COM_PutPropertyBool(PivotCache, @"BackgroundQuery", BackgroundQuery, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_Connection(PivotCache.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotCache, @"Connection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_Connection(PivotCache.IDispatch, *Connection.VARIANT)
	COM_PutProperty(PivotCache, @"Connection", *Connection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_EnableRefresh(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"EnableRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_EnableRefresh(PivotCache.IDispatch, EnableRefresh.w)
	COM_PutPropertyBool(PivotCache, @"EnableRefresh", EnableRefresh, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_Index(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_MemoryUsed(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"MemoryUsed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_OptimizeCache(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"OptimizeCache", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_OptimizeCache(PivotCache.IDispatch, OptimizeCache.w)
	COM_PutPropertyBool(PivotCache, @"OptimizeCache", OptimizeCache, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_RecordCount(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"RecordCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Refresh(PivotCache.IDispatch)
	COM_CallFunction(PivotCache, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PivotCache_Get_RefreshDate(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PivotCache, @"RefreshDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotCache_Get_RefreshName(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotCache, @"RefreshName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_RefreshOnFileOpen(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"RefreshOnFileOpen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_RefreshOnFileOpen(PivotCache.IDispatch, RefreshOnFileOpen.w)
	COM_PutPropertyBool(PivotCache, @"RefreshOnFileOpen", RefreshOnFileOpen, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_Sql(PivotCache.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotCache, @"Sql", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_Sql(PivotCache.IDispatch, *Sql.VARIANT)
	COM_PutProperty(PivotCache, @"Sql", *Sql, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_SavePassword(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"SavePassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_SavePassword(PivotCache.IDispatch, SavePassword.w)
	COM_PutPropertyBool(PivotCache, @"SavePassword", SavePassword, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_SourceData(PivotCache.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotCache, @"SourceData", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_SourceData(PivotCache.IDispatch, *SourceData.VARIANT)
	COM_PutProperty(PivotCache, @"SourceData", *SourceData, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_CommandText(PivotCache.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotCache, @"CommandText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_CommandText(PivotCache.IDispatch, *CommandText.VARIANT)
	COM_PutProperty(PivotCache, @"CommandText", *CommandText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_CommandType(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"CommandType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_CommandType(PivotCache.IDispatch, CommandType.l)
	COM_PutPropertyLong(PivotCache, @"CommandType", CommandType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_QueryType(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"QueryType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_MaintainConnection(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"MaintainConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_MaintainConnection(PivotCache.IDispatch, MaintainConnection.w)
	COM_PutPropertyBool(PivotCache, @"MaintainConnection", MaintainConnection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_RefreshPeriod(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"RefreshPeriod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_RefreshPeriod(PivotCache.IDispatch, RefreshPeriod.l)
	COM_PutPropertyLong(PivotCache, @"RefreshPeriod", RefreshPeriod, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCache_Get_Recordset(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCache, @"Recordset", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_Recordset_(PivotCache.IDispatch, Recordset.IDispatch)
	COM_PutPropertyDispatch(PivotCache, @"Recordset", Recordset, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_ResetTimer(PivotCache.IDispatch)
	COM_CallFunction(PivotCache, @"ResetTimer", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_LocalConnection(PivotCache.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotCache, @"LocalConnection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_LocalConnection(PivotCache.IDispatch, *LocalConnection.VARIANT)
	COM_PutProperty(PivotCache, @"LocalConnection", *LocalConnection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCache_CreatePivotTable(PivotCache.IDispatch, *TableDestination.VARIANT, *TableName.VARIANT, *ReadData.VARIANT, *DefaultVersion.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*DefaultVersion, @args(0))
	COM_VarClone(*ReadData, @args(1))
	COM_VarClone(*TableName, @args(2))
	COM_VarClone(*TableDestination, @args(3))
	ProcedureReturn COM_CallFunctionDispatch(PivotCache, @"CreatePivotTable", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_UseLocalConnection(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"UseLocalConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_UseLocalConnection(PivotCache.IDispatch, UseLocalConnection.w)
	COM_PutPropertyBool(PivotCache, @"UseLocalConnection", UseLocalConnection, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCache_Get_ADOConnection(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCache, @"ADOConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_IsConnected(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"IsConnected", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_MakeConnection(PivotCache.IDispatch)
	COM_CallFunction(PivotCache, @"MakeConnection", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_OLAP(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"OLAP", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_SourceType(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"SourceType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_MissingItemsLimit(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"MissingItemsLimit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_MissingItemsLimit(PivotCache.IDispatch, MissingItemsLimit.l)
	COM_PutPropertyLong(PivotCache, @"MissingItemsLimit", MissingItemsLimit, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotCache_Get_SourceConnectionFile(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotCache, @"SourceConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_SourceConnectionFile(PivotCache.IDispatch, SourceConnectionFile.s)
	COM_PutPropertyString(PivotCache, @"SourceConnectionFile", SourceConnectionFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotCache_Get_SourceDataFile(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotCache, @"SourceDataFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_RobustConnect(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"RobustConnect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_RobustConnect(PivotCache.IDispatch, RobustConnect.l)
	COM_PutPropertyLong(PivotCache, @"RobustConnect", RobustConnect, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_SaveAsODC(PivotCache.IDispatch, ODCFileName.s, *Description.VARIANT, *Keywords.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Keywords, @args(0))
	COM_VarClone(*Description, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(ODCFileName)
	COM_CallFunction(PivotCache, @"SaveAsODC", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.i Excel_PivotCache_Get_WorkbookConnection(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCache, @"WorkbookConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Get_Version(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCache, @"Version", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotCache_Get_UpgradeOnRefresh(PivotCache.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotCache, @"UpgradeOnRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCache_Put_UpgradeOnRefresh(PivotCache.IDispatch, UpgradeOnRefresh.w)
	COM_PutPropertyBool(PivotCache, @"UpgradeOnRefresh", UpgradeOnRefresh, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotCaches
;- -------------------------
ProcedureDLL.i Excel_PivotCaches_Get_Application(PivotCaches.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCaches, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCaches_Get_Creator(PivotCaches.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCaches, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches_Get_Parent(PivotCaches.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCaches, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCaches_Get_Count(PivotCaches.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCaches, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches_Item(PivotCaches.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotCaches, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches_Get__Default(PivotCaches.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotCaches, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches__NewEnum(PivotCaches.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotCaches, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches_Add(PivotCaches.IDispatch, SourceType.l, *SourceData.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*SourceData, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = SourceType
	ProcedureReturn COM_CallFunctionDispatch(PivotCaches, @"Add", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCaches_Create(PivotCaches.IDispatch, SourceType.l, *SourceData.VARIANT, *Version.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Version, @args(0))
	COM_VarClone(*SourceData, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = SourceType
	ProcedureReturn COM_CallFunctionDispatch(PivotCaches, @"Create", @args(), 3, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotFormula
;- -------------------------
ProcedureDLL.i Excel_PivotFormula_Get_Application(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFormula, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Get_Creator(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFormula, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormula_Get_Parent(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFormula, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Delete(PivotFormula.IDispatch)
	COM_CallFunction(PivotFormula, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFormula_Get__Default(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFormula, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Put__Default(PivotFormula.IDispatch, _Default.s)
	COM_PutPropertyString(PivotFormula, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFormula_Get_Formula(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFormula, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Put_Formula(PivotFormula.IDispatch, Formula.s)
	COM_PutPropertyString(PivotFormula, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFormula_Get_Value(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFormula, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Put_Value(PivotFormula.IDispatch, Value.s)
	COM_PutPropertyString(PivotFormula, @"Value", Value, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Get_Index(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFormula, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Put_Index(PivotFormula.IDispatch, Index.l)
	COM_PutPropertyLong(PivotFormula, @"Index", Index, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFormula_Get_StandardFormula(PivotFormula.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFormula, @"StandardFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormula_Put_StandardFormula(PivotFormula.IDispatch, StandardFormula.s)
	COM_PutPropertyString(PivotFormula, @"StandardFormula", StandardFormula, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotFormulas
;- -------------------------
ProcedureDLL.i Excel_PivotFormulas_Get_Application(PivotFormulas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFormulas, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormulas_Get_Creator(PivotFormulas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFormulas, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormulas_Get_Parent(PivotFormulas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFormulas, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFormulas_Get_Count(PivotFormulas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFormulas, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormulas__Add(PivotFormulas.IDispatch, Formula.s)
	Dim args.VARIANT(0)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Formula)
	r = COM_CallFunctionDispatch(PivotFormulas, @"_Add", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_PivotFormulas_Item(PivotFormulas.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotFormulas, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormulas_Get__Default(PivotFormulas.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotFormulas, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormulas__NewEnum(PivotFormulas.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotFormulas, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFormulas_Add(PivotFormulas.IDispatch, Formula.s, *UseStandardFormula.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*UseStandardFormula, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Formula)
	r = COM_CallFunctionDispatch(PivotFormulas, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_PivotTable
;- -------------------------
ProcedureDLL.i Excel_PivotTable_Get_Application(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_Creator(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_Parent(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_AddFields(PivotTable.IDispatch, *RowFields.VARIANT, *ColumnFields.VARIANT, *PageFields.VARIANT, *AddToTable.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*AddToTable, @args(0))
	COM_VarClone(*PageFields, @args(1))
	COM_VarClone(*ColumnFields, @args(2))
	COM_VarClone(*RowFields, @args(3))
	COM_CallFunction(PivotTable, @"AddFields", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_ColumnFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"ColumnFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ColumnGrand(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ColumnGrand", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ColumnGrand(PivotTable.IDispatch, ColumnGrand.w)
	COM_PutPropertyBool(PivotTable, @"ColumnGrand", ColumnGrand, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_ColumnRange(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"ColumnRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ShowPages(PivotTable.IDispatch, *PageField.VARIANT, *result.VARIANT)
	COM_CallFunction(PivotTable, @"ShowPages", *PageField, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_DataBodyRange(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"DataBodyRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_DataFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"DataFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_DataLabelRange(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"DataLabelRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get__Default(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put__Default(PivotTable.IDispatch, _Default.s)
	COM_PutPropertyString(PivotTable, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_HasAutoFormat(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"HasAutoFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_HasAutoFormat(PivotTable.IDispatch, HasAutoFormat.w)
	COM_PutPropertyBool(PivotTable, @"HasAutoFormat", HasAutoFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_HiddenFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"HiddenFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_InnerDetail(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"InnerDetail", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_InnerDetail(PivotTable.IDispatch, InnerDetail.s)
	COM_PutPropertyString(PivotTable, @"InnerDetail", InnerDetail, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_Name(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_Name(PivotTable.IDispatch, Name.s)
	COM_PutPropertyString(PivotTable, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PageFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PageFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PageRange(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PageRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PageRangeCells(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PageRangeCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_PivotFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotTable, @"PivotFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PivotTable_Get_RefreshDate(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PivotTable, @"RefreshDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_RefreshName(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"RefreshName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_RefreshTable(PivotTable.IDispatch)
	ProcedureReturn COM_CallFunctionBool(PivotTable, @"RefreshTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_RowFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"RowFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_RowGrand(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"RowGrand", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_RowGrand(PivotTable.IDispatch, RowGrand.w)
	COM_PutPropertyBool(PivotTable, @"RowGrand", RowGrand, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_RowRange(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"RowRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_SaveData(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"SaveData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SaveData(PivotTable.IDispatch, SaveData.w)
	COM_PutPropertyBool(PivotTable, @"SaveData", SaveData, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_SourceData(PivotTable.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotTable, @"SourceData", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SourceData(PivotTable.IDispatch, *SourceData.VARIANT)
	COM_PutProperty(PivotTable, @"SourceData", *SourceData, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_TableRange1(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"TableRange1", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_TableRange2(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"TableRange2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_Value(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_Value(PivotTable.IDispatch, Value.s)
	COM_PutPropertyString(PivotTable, @"Value", Value, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_VisibleFields(PivotTable.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"VisibleFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_CacheIndex(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"CacheIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_CacheIndex(PivotTable.IDispatch, CacheIndex.l)
	COM_PutPropertyLong(PivotTable, @"CacheIndex", CacheIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_CalculatedFields(PivotTable.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(PivotTable, @"CalculatedFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayErrorString(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayErrorString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayErrorString(PivotTable.IDispatch, DisplayErrorString.w)
	COM_PutPropertyBool(PivotTable, @"DisplayErrorString", DisplayErrorString, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayNullString(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayNullString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayNullString(PivotTable.IDispatch, DisplayNullString.w)
	COM_PutPropertyBool(PivotTable, @"DisplayNullString", DisplayNullString, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_EnableDrilldown(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"EnableDrilldown", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_EnableDrilldown(PivotTable.IDispatch, EnableDrilldown.w)
	COM_PutPropertyBool(PivotTable, @"EnableDrilldown", EnableDrilldown, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_EnableFieldDialog(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"EnableFieldDialog", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_EnableFieldDialog(PivotTable.IDispatch, EnableFieldDialog.w)
	COM_PutPropertyBool(PivotTable, @"EnableFieldDialog", EnableFieldDialog, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_EnableWizard(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"EnableWizard", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_EnableWizard(PivotTable.IDispatch, EnableWizard.w)
	COM_PutPropertyBool(PivotTable, @"EnableWizard", EnableWizard, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_ErrorString(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"ErrorString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ErrorString(PivotTable.IDispatch, ErrorString.s)
	COM_PutPropertyString(PivotTable, @"ErrorString", ErrorString, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PivotTable_GetData(PivotTable.IDispatch, Name.s)
	Dim args.VARIANT(0)
	Protected.d r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDouble(PivotTable, @"GetData", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_PivotTable_ListFormulas(PivotTable.IDispatch)
	COM_CallFunction(PivotTable, @"ListFormulas", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ManualUpdate(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ManualUpdate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ManualUpdate(PivotTable.IDispatch, ManualUpdate.w)
	COM_PutPropertyBool(PivotTable, @"ManualUpdate", ManualUpdate, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_MergeLabels(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"MergeLabels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_MergeLabels(PivotTable.IDispatch, MergeLabels.w)
	COM_PutPropertyBool(PivotTable, @"MergeLabels", MergeLabels, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_NullString(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"NullString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_NullString(PivotTable.IDispatch, NullString.s)
	COM_PutPropertyString(PivotTable, @"NullString", NullString, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_PivotCache(PivotTable.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(PivotTable, @"PivotCache", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PivotFormulas(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PivotFormulas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_PivotTableWizard(PivotTable.IDispatch, *SourceType.VARIANT, *SourceData.VARIANT, *TableDestination.VARIANT, *TableName.VARIANT, *RowGrand.VARIANT, *ColumnGrand.VARIANT, *SaveData.VARIANT, *HasAutoFormat.VARIANT, *AutoPage.VARIANT, *Reserved.VARIANT, *BackgroundQuery.VARIANT, *OptimizeCache.VARIANT, *PageFieldOrder.VARIANT, *PageFieldWrapCount.VARIANT, *ReadData.VARIANT, *Connection.VARIANT)
	Dim args.VARIANT(15)
	COM_VarClone(*Connection, @args(0))
	COM_VarClone(*ReadData, @args(1))
	COM_VarClone(*PageFieldWrapCount, @args(2))
	COM_VarClone(*PageFieldOrder, @args(3))
	COM_VarClone(*OptimizeCache, @args(4))
	COM_VarClone(*BackgroundQuery, @args(5))
	COM_VarClone(*Reserved, @args(6))
	COM_VarClone(*AutoPage, @args(7))
	COM_VarClone(*HasAutoFormat, @args(8))
	COM_VarClone(*SaveData, @args(9))
	COM_VarClone(*ColumnGrand, @args(10))
	COM_VarClone(*RowGrand, @args(11))
	COM_VarClone(*TableName, @args(12))
	COM_VarClone(*TableDestination, @args(13))
	COM_VarClone(*SourceData, @args(14))
	COM_VarClone(*SourceType, @args(15))
	COM_CallFunction(PivotTable, @"PivotTableWizard", @args(), 16, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_SubtotalHiddenPageItems(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"SubtotalHiddenPageItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SubtotalHiddenPageItems(PivotTable.IDispatch, SubtotalHiddenPageItems.w)
	COM_PutPropertyBool(PivotTable, @"SubtotalHiddenPageItems", SubtotalHiddenPageItems, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_PageFieldOrder(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"PageFieldOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PageFieldOrder(PivotTable.IDispatch, PageFieldOrder.l)
	COM_PutPropertyLong(PivotTable, @"PageFieldOrder", PageFieldOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_PageFieldStyle(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"PageFieldStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PageFieldStyle(PivotTable.IDispatch, PageFieldStyle.s)
	COM_PutPropertyString(PivotTable, @"PageFieldStyle", PageFieldStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_PageFieldWrapCount(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"PageFieldWrapCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PageFieldWrapCount(PivotTable.IDispatch, PageFieldWrapCount.l)
	COM_PutPropertyLong(PivotTable, @"PageFieldWrapCount", PageFieldWrapCount, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_PreserveFormatting(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"PreserveFormatting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PreserveFormatting(PivotTable.IDispatch, PreserveFormatting.w)
	COM_PutPropertyBool(PivotTable, @"PreserveFormatting", PreserveFormatting, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable__PivotSelect(PivotTable.IDispatch, Name.s, Mode.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Mode
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(PivotTable, @"_PivotSelect", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_PivotSelection(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"PivotSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PivotSelection(PivotTable.IDispatch, PivotSelection.s)
	COM_PutPropertyString(PivotTable, @"PivotSelection", PivotSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_SelectionMode(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"SelectionMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SelectionMode(PivotTable.IDispatch, SelectionMode.l)
	COM_PutPropertyLong(PivotTable, @"SelectionMode", SelectionMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_TableStyle(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"TableStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_TableStyle(PivotTable.IDispatch, TableStyle.s)
	COM_PutPropertyString(PivotTable, @"TableStyle", TableStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_Tag(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"Tag", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_Tag(PivotTable.IDispatch, Tag.s)
	COM_PutPropertyString(PivotTable, @"Tag", Tag, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Update(PivotTable.IDispatch)
	COM_CallFunction(PivotTable, @"Update", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_VacatedStyle(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"VacatedStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_VacatedStyle(PivotTable.IDispatch, VacatedStyle.s)
	COM_PutPropertyString(PivotTable, @"VacatedStyle", VacatedStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Format(PivotTable.IDispatch, Format.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	COM_CallFunction(PivotTable, @"Format", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_PrintTitles(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"PrintTitles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PrintTitles(PivotTable.IDispatch, PrintTitles.w)
	COM_PutPropertyBool(PivotTable, @"PrintTitles", PrintTitles, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_CubeFields(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"CubeFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_GrandTotalName(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"GrandTotalName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_GrandTotalName(PivotTable.IDispatch, GrandTotalName.s)
	COM_PutPropertyString(PivotTable, @"GrandTotalName", GrandTotalName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_SmallGrid(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"SmallGrid", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SmallGrid(PivotTable.IDispatch, SmallGrid.w)
	COM_PutPropertyBool(PivotTable, @"SmallGrid", SmallGrid, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_RepeatItemsOnEachPrintedPage(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"RepeatItemsOnEachPrintedPage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_RepeatItemsOnEachPrintedPage(PivotTable.IDispatch, RepeatItemsOnEachPrintedPage.w)
	COM_PutPropertyBool(PivotTable, @"RepeatItemsOnEachPrintedPage", RepeatItemsOnEachPrintedPage, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_TotalsAnnotation(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"TotalsAnnotation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_TotalsAnnotation(PivotTable.IDispatch, TotalsAnnotation.w)
	COM_PutPropertyBool(PivotTable, @"TotalsAnnotation", TotalsAnnotation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_PivotSelect(PivotTable.IDispatch, Name.s, Mode.l, *UseStandardName.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*UseStandardName, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Mode
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(PivotTable, @"PivotSelect", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_PivotSelectionStandard(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"PivotSelectionStandard", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PivotSelectionStandard(PivotTable.IDispatch, PivotSelectionStandard.s)
	COM_PutPropertyString(PivotTable, @"PivotSelectionStandard", PivotSelectionStandard, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_GetPivotData(PivotTable.IDispatch, *DataField.VARIANT, *Field1.VARIANT, *Item1.VARIANT, *Field2.VARIANT, *Item2.VARIANT, *Field3.VARIANT, *Item3.VARIANT, *Field4.VARIANT, *Item4.VARIANT, *Field5.VARIANT, *Item5.VARIANT, *Field6.VARIANT, *Item6.VARIANT, *Field7.VARIANT, *Item7.VARIANT, *Field8.VARIANT, *Item8.VARIANT, *Field9.VARIANT, *Item9.VARIANT, *Field10.VARIANT, *Item10.VARIANT, *Field11.VARIANT, *Item11.VARIANT, *Field12.VARIANT, *Item12.VARIANT, *Field13.VARIANT, *Item13.VARIANT, *Field14.VARIANT, *Item14.VARIANT)
	Dim args.VARIANT(28)
	COM_VarClone(*Item14, @args(0))
	COM_VarClone(*Field14, @args(1))
	COM_VarClone(*Item13, @args(2))
	COM_VarClone(*Field13, @args(3))
	COM_VarClone(*Item12, @args(4))
	COM_VarClone(*Field12, @args(5))
	COM_VarClone(*Item11, @args(6))
	COM_VarClone(*Field11, @args(7))
	COM_VarClone(*Item10, @args(8))
	COM_VarClone(*Field10, @args(9))
	COM_VarClone(*Item9, @args(10))
	COM_VarClone(*Field9, @args(11))
	COM_VarClone(*Item8, @args(12))
	COM_VarClone(*Field8, @args(13))
	COM_VarClone(*Item7, @args(14))
	COM_VarClone(*Field7, @args(15))
	COM_VarClone(*Item6, @args(16))
	COM_VarClone(*Field6, @args(17))
	COM_VarClone(*Item5, @args(18))
	COM_VarClone(*Field5, @args(19))
	COM_VarClone(*Item4, @args(20))
	COM_VarClone(*Field4, @args(21))
	COM_VarClone(*Item3, @args(22))
	COM_VarClone(*Field3, @args(23))
	COM_VarClone(*Item2, @args(24))
	COM_VarClone(*Field2, @args(25))
	COM_VarClone(*Item1, @args(26))
	COM_VarClone(*Field1, @args(27))
	COM_VarClone(*DataField, @args(28))
	ProcedureReturn COM_CallFunctionDispatch(PivotTable, @"GetPivotData", @args(), 29, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_DataPivotField(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"DataPivotField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_EnableDataValueEditing(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"EnableDataValueEditing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_EnableDataValueEditing(PivotTable.IDispatch, EnableDataValueEditing.w)
	COM_PutPropertyBool(PivotTable, @"EnableDataValueEditing", EnableDataValueEditing, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_AddDataField(PivotTable.IDispatch, Field.IDispatch, *Caption.VARIANT, *Function.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Function, @args(0))
	COM_VarClone(*Caption, @args(1))
	args(2)\vt = #VT_DISPATCH : args(2)\pdispVal = Field
	ProcedureReturn COM_CallFunctionDispatch(PivotTable, @"AddDataField", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_MDX(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"MDX", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ViewCalculatedMembers(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ViewCalculatedMembers", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ViewCalculatedMembers(PivotTable.IDispatch, ViewCalculatedMembers.w)
	COM_PutPropertyBool(PivotTable, @"ViewCalculatedMembers", ViewCalculatedMembers, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_CalculatedMembers(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"CalculatedMembers", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayImmediateItems(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayImmediateItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayImmediateItems(PivotTable.IDispatch, DisplayImmediateItems.w)
	COM_PutPropertyBool(PivotTable, @"DisplayImmediateItems", DisplayImmediateItems, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Dummy15(PivotTable.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT, *result.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	COM_CallFunction(PivotTable, @"Dummy15", @args(), 30, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_EnableFieldList(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"EnableFieldList", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_EnableFieldList(PivotTable.IDispatch, EnableFieldList.w)
	COM_PutPropertyBool(PivotTable, @"EnableFieldList", EnableFieldList, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_VisualTotals(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"VisualTotals", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_VisualTotals(PivotTable.IDispatch, VisualTotals.w)
	COM_PutPropertyBool(PivotTable, @"VisualTotals", VisualTotals, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowPageMultipleItemLabel(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowPageMultipleItemLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowPageMultipleItemLabel(PivotTable.IDispatch, ShowPageMultipleItemLabel.w)
	COM_PutPropertyBool(PivotTable, @"ShowPageMultipleItemLabel", ShowPageMultipleItemLabel, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_Version(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"Version", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_CreateCubeFile(PivotTable.IDispatch, File.s, *Measures.VARIANT, *Levels.VARIANT, *Members.VARIANT, *Properties.VARIANT)
	Dim args.VARIANT(4)
	Protected.s r
	COM_VarClone(*Properties, @args(0))
	COM_VarClone(*Members, @args(1))
	COM_VarClone(*Levels, @args(2))
	COM_VarClone(*Measures, @args(3))
	args(4)\vt = #VT_BSTR : args(4)\bstrVal = SysAllocString_(File)
	r = COM_CallFunctionString(PivotTable, @"CreateCubeFile", @args(), 5, @_g_Excel_error)
	VariantClear_(@args(4))
	ProcedureReturn r
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayEmptyRow(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayEmptyRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayEmptyRow(PivotTable.IDispatch, DisplayEmptyRow.w)
	COM_PutPropertyBool(PivotTable, @"DisplayEmptyRow", DisplayEmptyRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayEmptyColumn(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayEmptyColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayEmptyColumn(PivotTable.IDispatch, DisplayEmptyColumn.w)
	COM_PutPropertyBool(PivotTable, @"DisplayEmptyColumn", DisplayEmptyColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowCellBackgroundFromOLAP(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowCellBackgroundFromOLAP", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowCellBackgroundFromOLAP(PivotTable.IDispatch, ShowCellBackgroundFromOLAP.w)
	COM_PutPropertyBool(PivotTable, @"ShowCellBackgroundFromOLAP", ShowCellBackgroundFromOLAP, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PivotColumnAxis(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PivotColumnAxis", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_PivotRowAxis(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"PivotRowAxis", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowDrillIndicators(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowDrillIndicators", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowDrillIndicators(PivotTable.IDispatch, ShowDrillIndicators.w)
	COM_PutPropertyBool(PivotTable, @"ShowDrillIndicators", ShowDrillIndicators, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_PrintDrillIndicators(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"PrintDrillIndicators", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_PrintDrillIndicators(PivotTable.IDispatch, PrintDrillIndicators.w)
	COM_PutPropertyBool(PivotTable, @"PrintDrillIndicators", PrintDrillIndicators, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayMemberPropertyTooltips(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayMemberPropertyTooltips", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayMemberPropertyTooltips(PivotTable.IDispatch, DisplayMemberPropertyTooltips.w)
	COM_PutPropertyBool(PivotTable, @"DisplayMemberPropertyTooltips", DisplayMemberPropertyTooltips, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayContextTooltips(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayContextTooltips", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayContextTooltips(PivotTable.IDispatch, DisplayContextTooltips.w)
	COM_PutPropertyBool(PivotTable, @"DisplayContextTooltips", DisplayContextTooltips, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ClearTable(PivotTable.IDispatch)
	COM_CallFunction(PivotTable, @"ClearTable", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_CompactRowIndent(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"CompactRowIndent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_CompactRowIndent(PivotTable.IDispatch, CompactRowIndent.l)
	COM_PutPropertyLong(PivotTable, @"CompactRowIndent", CompactRowIndent, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_LayoutRowDefault(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTable, @"LayoutRowDefault", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_LayoutRowDefault(PivotTable.IDispatch, LayoutRowDefault.l)
	COM_PutPropertyLong(PivotTable, @"LayoutRowDefault", LayoutRowDefault, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_DisplayFieldCaptions(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"DisplayFieldCaptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_DisplayFieldCaptions(PivotTable.IDispatch, DisplayFieldCaptions.w)
	COM_PutPropertyBool(PivotTable, @"DisplayFieldCaptions", DisplayFieldCaptions, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_RowAxisLayout(PivotTable.IDispatch, RowLayout.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = RowLayout
	COM_CallFunction(PivotTable, @"RowAxisLayout", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_SubtotalLocation(PivotTable.IDispatch, Location.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Location
	COM_CallFunction(PivotTable, @"SubtotalLocation", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTable_Get_ActiveFilters(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTable, @"ActiveFilters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_InGridDropZones(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"InGridDropZones", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_InGridDropZones(PivotTable.IDispatch, InGridDropZones.w)
	COM_PutPropertyBool(PivotTable, @"InGridDropZones", InGridDropZones, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ClearAllFilters(PivotTable.IDispatch)
	COM_CallFunction(PivotTable, @"ClearAllFilters", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Get_TableStyle2(PivotTable.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotTable, @"TableStyle2", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_TableStyle2(PivotTable.IDispatch, *TableStyle2.VARIANT)
	COM_PutProperty(PivotTable, @"TableStyle2", *TableStyle2, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowTableStyleLastColumn(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowTableStyleLastColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowTableStyleLastColumn(PivotTable.IDispatch, ShowTableStyleLastColumn.w)
	COM_PutPropertyBool(PivotTable, @"ShowTableStyleLastColumn", ShowTableStyleLastColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowTableStyleRowStripes(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowTableStyleRowStripes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowTableStyleRowStripes(PivotTable.IDispatch, ShowTableStyleRowStripes.w)
	COM_PutPropertyBool(PivotTable, @"ShowTableStyleRowStripes", ShowTableStyleRowStripes, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowTableStyleColumnStripes(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowTableStyleColumnStripes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowTableStyleColumnStripes(PivotTable.IDispatch, ShowTableStyleColumnStripes.w)
	COM_PutPropertyBool(PivotTable, @"ShowTableStyleColumnStripes", ShowTableStyleColumnStripes, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowTableStyleRowHeaders(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowTableStyleRowHeaders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowTableStyleRowHeaders(PivotTable.IDispatch, ShowTableStyleRowHeaders.w)
	COM_PutPropertyBool(PivotTable, @"ShowTableStyleRowHeaders", ShowTableStyleRowHeaders, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_ShowTableStyleColumnHeaders(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"ShowTableStyleColumnHeaders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_ShowTableStyleColumnHeaders(PivotTable.IDispatch, ShowTableStyleColumnHeaders.w)
	COM_PutPropertyBool(PivotTable, @"ShowTableStyleColumnHeaders", ShowTableStyleColumnHeaders, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ConvertToFormulas(PivotTable.IDispatch, ConvertFilters.w)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = ConvertFilters
	COM_CallFunction(PivotTable, @"ConvertToFormulas", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_AllowMultipleFilters(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"AllowMultipleFilters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_AllowMultipleFilters(PivotTable.IDispatch, AllowMultipleFilters.w)
	COM_PutPropertyBool(PivotTable, @"AllowMultipleFilters", AllowMultipleFilters, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_CompactLayoutRowHeader(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"CompactLayoutRowHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_CompactLayoutRowHeader(PivotTable.IDispatch, CompactLayoutRowHeader.s)
	COM_PutPropertyString(PivotTable, @"CompactLayoutRowHeader", CompactLayoutRowHeader, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_CompactLayoutColumnHeader(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"CompactLayoutColumnHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_CompactLayoutColumnHeader(PivotTable.IDispatch, CompactLayoutColumnHeader.s)
	COM_PutPropertyString(PivotTable, @"CompactLayoutColumnHeader", CompactLayoutColumnHeader, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_FieldListSortAscending(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"FieldListSortAscending", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_FieldListSortAscending(PivotTable.IDispatch, FieldListSortAscending.w)
	COM_PutPropertyBool(PivotTable, @"FieldListSortAscending", FieldListSortAscending, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotTable_Get_SortUsingCustomLists(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotTable, @"SortUsingCustomLists", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_SortUsingCustomLists(PivotTable.IDispatch, SortUsingCustomLists.w)
	COM_PutPropertyBool(PivotTable, @"SortUsingCustomLists", SortUsingCustomLists, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ChangeConnection(PivotTable.IDispatch, conn.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = conn
	COM_CallFunction(PivotTable, @"ChangeConnection", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_ChangePivotCache(PivotTable.IDispatch, *PivotCache.VARIANT)
	COM_CallFunction(PivotTable, @"ChangePivotCache", *PivotCache, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotTable_Get_Location(PivotTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotTable, @"Location", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTable_Put_Location(PivotTable.IDispatch, Location.s)
	COM_PutPropertyString(PivotTable, @"Location", Location, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotTables
;- -------------------------
ProcedureDLL.i Excel_PivotTables_Get_Application(PivotTables.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTables, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTables_Get_Creator(PivotTables.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTables, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTables_Get_Parent(PivotTables.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotTables, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotTables_Get_Count(PivotTables.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotTables, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTables_Item(PivotTables.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotTables, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTables__NewEnum(PivotTables.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotTables, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotTables_Add(PivotTables.IDispatch, PivotCache.IDispatch, *TableDestination.VARIANT, *TableName.VARIANT, *ReadData.VARIANT, *DefaultVersion.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*DefaultVersion, @args(0))
	COM_VarClone(*ReadData, @args(1))
	COM_VarClone(*TableName, @args(2))
	COM_VarClone(*TableDestination, @args(3))
	args(4)\vt = #VT_DISPATCH : args(4)\pdispVal = PivotCache
	ProcedureReturn COM_CallFunctionDispatch(PivotTables, @"Add", @args(), 5, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotField
;- -------------------------
ProcedureDLL.i Excel_PivotField_Get_Application(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Creator(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_Parent(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Calculation(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"Calculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Calculation(PivotField.IDispatch, Calculation.l)
	COM_PutPropertyLong(PivotField, @"Calculation", Calculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_ChildField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"ChildField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_ChildItems(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotField, @"ChildItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_CurrentPage(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"CurrentPage", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_CurrentPage(PivotField.IDispatch, *CurrentPage.VARIANT)
	COM_PutProperty(PivotField, @"CurrentPage", *CurrentPage, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_DataRange(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"DataRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_DataType(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"DataType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get__Default(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put__Default(PivotField.IDispatch, _Default.s)
	COM_PutPropertyString(PivotField, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Function(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"Function", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Function(PivotField.IDispatch, Function.l)
	COM_PutPropertyLong(PivotField, @"Function", Function, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_GroupLevel(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"GroupLevel", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_HiddenItems(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotField, @"HiddenItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_LabelRange(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"LabelRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_Name(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Name(PivotField.IDispatch, Name.s)
	COM_PutPropertyString(PivotField, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_NumberFormat(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"NumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_NumberFormat(PivotField.IDispatch, NumberFormat.s)
	COM_PutPropertyString(PivotField, @"NumberFormat", NumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Orientation(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Orientation(PivotField.IDispatch, Orientation.l)
	COM_PutPropertyLong(PivotField, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_ShowAllItems(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"ShowAllItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_ShowAllItems(PivotField.IDispatch, ShowAllItems.w)
	COM_PutPropertyBool(PivotField, @"ShowAllItems", ShowAllItems, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_ParentField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"ParentField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_ParentItems(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotField, @"ParentItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_PivotItems(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_CallFunction(PivotField, @"PivotItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Position(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"Position", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Position(PivotField.IDispatch, *Position.VARIANT)
	COM_PutProperty(PivotField, @"Position", *Position, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_SourceName(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"SourceName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_Subtotals(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotField, @"Subtotals", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Subtotals(PivotField.IDispatch, *Index.VARIANT, *Subtotals.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Subtotals, @args(0))
	COM_VarClone(*Index, @args(1))
	COM_PutProperty(PivotField, @"Subtotals", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_BaseField(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"BaseField", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_BaseField(PivotField.IDispatch, *BaseField.VARIANT)
	COM_PutProperty(PivotField, @"BaseField", *BaseField, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_BaseItem(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"BaseItem", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_BaseItem(PivotField.IDispatch, *BaseItem.VARIANT)
	COM_PutProperty(PivotField, @"BaseItem", *BaseItem, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_TotalLevels(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"TotalLevels", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_Value(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Value(PivotField.IDispatch, Value.s)
	COM_PutPropertyString(PivotField, @"Value", Value, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_VisibleItems(PivotField.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotField, @"VisibleItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_CalculatedItems(PivotField.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(PivotField, @"CalculatedItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Delete(PivotField.IDispatch)
	COM_CallFunction(PivotField, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DragToColumn(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DragToColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DragToColumn(PivotField.IDispatch, DragToColumn.w)
	COM_PutPropertyBool(PivotField, @"DragToColumn", DragToColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DragToHide(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DragToHide", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DragToHide(PivotField.IDispatch, DragToHide.w)
	COM_PutPropertyBool(PivotField, @"DragToHide", DragToHide, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DragToPage(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DragToPage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DragToPage(PivotField.IDispatch, DragToPage.w)
	COM_PutPropertyBool(PivotField, @"DragToPage", DragToPage, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DragToRow(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DragToRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DragToRow(PivotField.IDispatch, DragToRow.w)
	COM_PutPropertyBool(PivotField, @"DragToRow", DragToRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DragToData(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DragToData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DragToData(PivotField.IDispatch, DragToData.w)
	COM_PutPropertyBool(PivotField, @"DragToData", DragToData, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_Formula(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Formula(PivotField.IDispatch, Formula.s)
	COM_PutPropertyString(PivotField, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_IsCalculated(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"IsCalculated", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_MemoryUsed(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"MemoryUsed", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_ServerBased(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"ServerBased", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_ServerBased(PivotField.IDispatch, ServerBased.w)
	COM_PutPropertyBool(PivotField, @"ServerBased", ServerBased, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField__AutoSort(PivotField.IDispatch, Order.l, Field.s)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Field)
	args(1)\vt = #VT_I4 : args(1)\lVal = Order
	COM_CallFunction(PivotField, @"_AutoSort", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_PivotField_AutoShow(PivotField.IDispatch, Type.l, Range.l, Count.l, Field.s)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Field)
	args(1)\vt = #VT_I4 : args(1)\lVal = Count
	args(2)\vt = #VT_I4 : args(2)\lVal = Range
	args(3)\vt = #VT_I4 : args(3)\lVal = Type
	COM_CallFunction(PivotField, @"AutoShow", @args(), 4, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_AutoSortOrder(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"AutoSortOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_AutoSortField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"AutoSortField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_AutoShowType(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"AutoShowType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_AutoShowRange(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"AutoShowRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_AutoShowCount(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"AutoShowCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_AutoShowField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"AutoShowField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_LayoutBlankLine(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"LayoutBlankLine", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_LayoutBlankLine(PivotField.IDispatch, LayoutBlankLine.w)
	COM_PutPropertyBool(PivotField, @"LayoutBlankLine", LayoutBlankLine, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_LayoutSubtotalLocation(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"LayoutSubtotalLocation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_LayoutSubtotalLocation(PivotField.IDispatch, LayoutSubtotalLocation.l)
	COM_PutPropertyLong(PivotField, @"LayoutSubtotalLocation", LayoutSubtotalLocation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_LayoutPageBreak(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"LayoutPageBreak", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_LayoutPageBreak(PivotField.IDispatch, LayoutPageBreak.w)
	COM_PutPropertyBool(PivotField, @"LayoutPageBreak", LayoutPageBreak, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_LayoutForm(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"LayoutForm", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_LayoutForm(PivotField.IDispatch, LayoutForm.l)
	COM_PutPropertyLong(PivotField, @"LayoutForm", LayoutForm, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_SubtotalName(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"SubtotalName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_SubtotalName(PivotField.IDispatch, SubtotalName.s)
	COM_PutPropertyString(PivotField, @"SubtotalName", SubtotalName, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_Caption(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Caption(PivotField.IDispatch, Caption.s)
	COM_PutPropertyString(PivotField, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DrilledDown(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DrilledDown", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DrilledDown(PivotField.IDispatch, DrilledDown.w)
	COM_PutPropertyBool(PivotField, @"DrilledDown", DrilledDown, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_CubeField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"CubeField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_CurrentPageName(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"CurrentPageName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_CurrentPageName(PivotField.IDispatch, CurrentPageName.s)
	COM_PutPropertyString(PivotField, @"CurrentPageName", CurrentPageName, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_StandardFormula(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"StandardFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_StandardFormula(PivotField.IDispatch, StandardFormula.s)
	COM_PutPropertyString(PivotField, @"StandardFormula", StandardFormula, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_HiddenItemsList(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"HiddenItemsList", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_HiddenItemsList(PivotField.IDispatch, *HiddenItemsList.VARIANT)
	COM_PutProperty(PivotField, @"HiddenItemsList", *HiddenItemsList, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DatabaseSort(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DatabaseSort", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DatabaseSort(PivotField.IDispatch, DatabaseSort.w)
	COM_PutPropertyBool(PivotField, @"DatabaseSort", DatabaseSort, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_IsMemberProperty(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"IsMemberProperty", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_PropertyParentField(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"PropertyParentField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_PropertyOrder(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"PropertyOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_PropertyOrder(PivotField.IDispatch, PropertyOrder.l)
	COM_PutPropertyLong(PivotField, @"PropertyOrder", PropertyOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_EnableItemSelection(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"EnableItemSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_EnableItemSelection(PivotField.IDispatch, EnableItemSelection.w)
	COM_PutPropertyBool(PivotField, @"EnableItemSelection", EnableItemSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_CurrentPageList(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"CurrentPageList", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_CurrentPageList(PivotField.IDispatch, *CurrentPageList.VARIANT)
	COM_PutProperty(PivotField, @"CurrentPageList", *CurrentPageList, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_AddPageItem(PivotField.IDispatch, Item.s, *ClearList.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ClearList, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Item)
	COM_CallFunction(PivotField, @"AddPageItem", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_Hidden(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"Hidden", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_Hidden(PivotField.IDispatch, Hidden.w)
	COM_PutPropertyBool(PivotField, @"Hidden", Hidden, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_DrillTo(PivotField.IDispatch, Field.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Field)
	COM_CallFunction(PivotField, @"DrillTo", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_UseMemberPropertyAsCaption(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"UseMemberPropertyAsCaption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_UseMemberPropertyAsCaption(PivotField.IDispatch, UseMemberPropertyAsCaption.w)
	COM_PutPropertyBool(PivotField, @"UseMemberPropertyAsCaption", UseMemberPropertyAsCaption, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_MemberPropertyCaption(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"MemberPropertyCaption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_MemberPropertyCaption(PivotField.IDispatch, MemberPropertyCaption.s)
	COM_PutPropertyString(PivotField, @"MemberPropertyCaption", MemberPropertyCaption, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DisplayAsTooltip(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DisplayAsTooltip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DisplayAsTooltip(PivotField.IDispatch, DisplayAsTooltip.w)
	COM_PutPropertyBool(PivotField, @"DisplayAsTooltip", DisplayAsTooltip, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DisplayInReport(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DisplayInReport", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_DisplayInReport(PivotField.IDispatch, DisplayInReport.w)
	COM_PutPropertyBool(PivotField, @"DisplayInReport", DisplayInReport, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_DisplayAsCaption(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"DisplayAsCaption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_LayoutCompactRow(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"LayoutCompactRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_LayoutCompactRow(PivotField.IDispatch, LayoutCompactRow.w)
	COM_PutPropertyBool(PivotField, @"LayoutCompactRow", LayoutCompactRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_IncludeNewItemsInFilter(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"IncludeNewItemsInFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_IncludeNewItemsInFilter(PivotField.IDispatch, IncludeNewItemsInFilter.w)
	COM_PutPropertyBool(PivotField, @"IncludeNewItemsInFilter", IncludeNewItemsInFilter, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_VisibleItemsList(PivotField.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotField, @"VisibleItemsList", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_VisibleItemsList(PivotField.IDispatch, *VisibleItemsList.VARIANT)
	COM_PutProperty(PivotField, @"VisibleItemsList", *VisibleItemsList, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_PivotFilters(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"PivotFilters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotField_Get_AutoSortPivotLine(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotField, @"AutoSortPivotLine", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Get_AutoSortCustomSubtotal(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotField, @"AutoSortCustomSubtotal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_ShowingInAxis(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"ShowingInAxis", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_EnableMultiplePageItems(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"EnableMultiplePageItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_EnableMultiplePageItems(PivotField.IDispatch, EnableMultiplePageItems.w)
	COM_PutPropertyBool(PivotField, @"EnableMultiplePageItems", EnableMultiplePageItems, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_AllItemsVisible(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"AllItemsVisible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_ClearManualFilter(PivotField.IDispatch)
	COM_CallFunction(PivotField, @"ClearManualFilter", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_ClearAllFilters(PivotField.IDispatch)
	COM_CallFunction(PivotField, @"ClearAllFilters", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_ClearValueFilters(PivotField.IDispatch)
	COM_CallFunction(PivotField, @"ClearValueFilters", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_ClearLabelFilters(PivotField.IDispatch)
	COM_CallFunction(PivotField, @"ClearLabelFilters", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_AutoSort(PivotField.IDispatch, Order.l, Field.s, *PivotLine.VARIANT, *CustomSubtotal.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*CustomSubtotal, @args(0))
	COM_VarClone(*PivotLine, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Field)
	args(3)\vt = #VT_I4 : args(3)\lVal = Order
	COM_CallFunction(PivotField, @"AutoSort", @args(), 4, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.s Excel_PivotField_Get_SourceCaption(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotField, @"SourceCaption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotField_Get_ShowDetail(PivotField.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotField, @"ShowDetail", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotField_Put_ShowDetail(PivotField.IDispatch, ShowDetail.w)
	COM_PutPropertyBool(PivotField, @"ShowDetail", ShowDetail, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotFields
;- -------------------------
ProcedureDLL.i Excel_PivotFields_Get_Application(PivotFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFields, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFields_Get_Creator(PivotFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFields, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFields_Get_Parent(PivotFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFields, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFields_Get_Count(PivotFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFields, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFields_Item(PivotFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotFields, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFields__NewEnum(PivotFields.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotFields, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CalculatedFields
;- -------------------------
ProcedureDLL.i Excel_CalculatedFields_Get_Application(CalculatedFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedFields, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedFields_Get_Creator(CalculatedFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedFields, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedFields_Get_Parent(CalculatedFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedFields, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedFields_Get_Count(CalculatedFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedFields, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedFields__Add(CalculatedFields.IDispatch, Name.s, Formula.s)
	Dim args.VARIANT(1)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Formula)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CalculatedFields, @"_Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_CalculatedFields_Item(CalculatedFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(CalculatedFields, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedFields_Get__Default(CalculatedFields.IDispatch, *Field.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedFields, @"_Default", *Field, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedFields__NewEnum(CalculatedFields.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(CalculatedFields, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedFields_Add(CalculatedFields.IDispatch, Name.s, Formula.s, *UseStandardFormula.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*UseStandardFormula, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Formula)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CalculatedFields, @"Add", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_PivotItem
;- -------------------------
ProcedureDLL.i Excel_PivotItem_Get_Application(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItem, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Get_Creator(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItem, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItem_Get_Parent(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItem, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Get_ChildItems(PivotItem.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PivotItem, @"ChildItems", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItem_Get_DataRange(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItem, @"DataRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get__Default(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put__Default(PivotItem.IDispatch, _Default.s)
	COM_PutPropertyString(PivotItem, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItem_Get_LabelRange(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItem, @"LabelRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_Name(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Name(PivotItem.IDispatch, Name.s)
	COM_PutPropertyString(PivotItem, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItem_Get_ParentItem(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItem, @"ParentItem", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotItem_Get_ParentShowDetail(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotItem, @"ParentShowDetail", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Get_Position(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItem, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Position(PivotItem.IDispatch, Position.l)
	COM_PutPropertyLong(PivotItem, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotItem_Get_ShowDetail(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotItem, @"ShowDetail", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_ShowDetail(PivotItem.IDispatch, ShowDetail.w)
	COM_PutPropertyBool(PivotItem, @"ShowDetail", ShowDetail, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Get_SourceName(PivotItem.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotItem, @"SourceName", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_Value(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Value(PivotItem.IDispatch, Value.s)
	COM_PutPropertyString(PivotItem, @"Value", Value, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotItem_Get_Visible(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotItem, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Visible(PivotItem.IDispatch, Visible.w)
	COM_PutPropertyBool(PivotItem, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Delete(PivotItem.IDispatch)
	COM_CallFunction(PivotItem, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotItem_Get_IsCalculated(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotItem, @"IsCalculated", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Get_RecordCount(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItem, @"RecordCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_Formula(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Formula(PivotItem.IDispatch, Formula.s)
	COM_PutPropertyString(PivotItem, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_Caption(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_Caption(PivotItem.IDispatch, Caption.s)
	COM_PutPropertyString(PivotItem, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotItem_Get_DrilledDown(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotItem, @"DrilledDown", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_DrilledDown(PivotItem.IDispatch, DrilledDown.w)
	COM_PutPropertyBool(PivotItem, @"DrilledDown", DrilledDown, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_StandardFormula(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"StandardFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_Put_StandardFormula(PivotItem.IDispatch, StandardFormula.s)
	COM_PutPropertyString(PivotItem, @"StandardFormula", StandardFormula, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotItem_Get_SourceNameStandard(PivotItem.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotItem, @"SourceNameStandard", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItem_DrillTo(PivotItem.IDispatch, Field.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Field)
	COM_CallFunction(PivotItem, @"DrillTo", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

;- -------------------------
;- Excel_PivotItems
;- -------------------------
ProcedureDLL.i Excel_PivotItems_Get_Application(PivotItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItems, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItems_Get_Creator(PivotItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItems, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItems_Get_Parent(PivotItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItems, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItems_Add(PivotItems.IDispatch, Name.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Name)
	COM_CallFunction(PivotItems, @"Add", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_PivotItems_Get_Count(PivotItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItems, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItems_Item(PivotItems.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotItems, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItems__NewEnum(PivotItems.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotItems, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CalculatedItems
;- -------------------------
ProcedureDLL.i Excel_CalculatedItems_Get_Application(CalculatedItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedItems, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedItems_Get_Creator(CalculatedItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedItems, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedItems_Get_Parent(CalculatedItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedItems, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedItems_Get_Count(CalculatedItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedItems, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedItems__Add(CalculatedItems.IDispatch, Name.s, Formula.s)
	Dim args.VARIANT(1)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Formula)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CalculatedItems, @"_Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_CalculatedItems_Item(CalculatedItems.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(CalculatedItems, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedItems_Get__Default(CalculatedItems.IDispatch, *Field.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedItems, @"_Default", *Field, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedItems__NewEnum(CalculatedItems.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(CalculatedItems, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedItems_Add(CalculatedItems.IDispatch, Name.s, Formula.s, *UseStandardFormula.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*UseStandardFormula, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Formula)
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CalculatedItems, @"Add", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(1))
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_Characters
;- -------------------------
ProcedureDLL.i Excel_Characters_Get_Application(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Characters, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Get_Creator(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Characters, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Characters_Get_Parent(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Characters, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Characters_Get_Caption(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyString(Characters, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Put_Caption(Characters.IDispatch, Caption.s)
	COM_PutPropertyString(Characters, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Get_Count(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Characters, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Delete(Characters.IDispatch, *result.VARIANT)
	COM_CallFunction(Characters, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Characters_Get_Font(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Characters, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Insert(Characters.IDispatch, String.s, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(String)
	COM_CallFunction(Characters, @"Insert", @args(), 1, *result, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.s Excel_Characters_Get_Text(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyString(Characters, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Put_Text(Characters.IDispatch, Text.s)
	COM_PutPropertyString(Characters, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Characters_Get_PhoneticCharacters(Characters.IDispatch)
	ProcedureReturn COM_GetPropertyString(Characters, @"PhoneticCharacters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Characters_Put_PhoneticCharacters(Characters.IDispatch, PhoneticCharacters.s)
	COM_PutPropertyString(Characters, @"PhoneticCharacters", PhoneticCharacters, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Dialogs
;- -------------------------
ProcedureDLL.i Excel_Dialogs_Get_Application(Dialogs.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Dialogs, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Dialogs_Get_Creator(Dialogs.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Dialogs, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Dialogs_Get_Parent(Dialogs.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Dialogs, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Dialogs_Get_Count(Dialogs.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Dialogs, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Dialogs_Get_Item(Dialogs.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Dialogs, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Dialogs_Get__Default(Dialogs.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Dialogs, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Dialogs_Get__NewEnum(Dialogs.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Dialogs, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Dialog
;- -------------------------
ProcedureDLL.i Excel_Dialog_Get_Application(Dialog.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Dialog, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Dialog_Get_Creator(Dialog.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Dialog, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Dialog_Get_Parent(Dialog.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Dialog, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Dialog_Show(Dialog.IDispatch, *Arg1.VARIANT, *Arg2.VARIANT, *Arg3.VARIANT, *Arg4.VARIANT, *Arg5.VARIANT, *Arg6.VARIANT, *Arg7.VARIANT, *Arg8.VARIANT, *Arg9.VARIANT, *Arg10.VARIANT, *Arg11.VARIANT, *Arg12.VARIANT, *Arg13.VARIANT, *Arg14.VARIANT, *Arg15.VARIANT, *Arg16.VARIANT, *Arg17.VARIANT, *Arg18.VARIANT, *Arg19.VARIANT, *Arg20.VARIANT, *Arg21.VARIANT, *Arg22.VARIANT, *Arg23.VARIANT, *Arg24.VARIANT, *Arg25.VARIANT, *Arg26.VARIANT, *Arg27.VARIANT, *Arg28.VARIANT, *Arg29.VARIANT, *Arg30.VARIANT)
	Dim args.VARIANT(29)
	COM_VarClone(*Arg30, @args(0))
	COM_VarClone(*Arg29, @args(1))
	COM_VarClone(*Arg28, @args(2))
	COM_VarClone(*Arg27, @args(3))
	COM_VarClone(*Arg26, @args(4))
	COM_VarClone(*Arg25, @args(5))
	COM_VarClone(*Arg24, @args(6))
	COM_VarClone(*Arg23, @args(7))
	COM_VarClone(*Arg22, @args(8))
	COM_VarClone(*Arg21, @args(9))
	COM_VarClone(*Arg20, @args(10))
	COM_VarClone(*Arg19, @args(11))
	COM_VarClone(*Arg18, @args(12))
	COM_VarClone(*Arg17, @args(13))
	COM_VarClone(*Arg16, @args(14))
	COM_VarClone(*Arg15, @args(15))
	COM_VarClone(*Arg14, @args(16))
	COM_VarClone(*Arg13, @args(17))
	COM_VarClone(*Arg12, @args(18))
	COM_VarClone(*Arg11, @args(19))
	COM_VarClone(*Arg10, @args(20))
	COM_VarClone(*Arg9, @args(21))
	COM_VarClone(*Arg8, @args(22))
	COM_VarClone(*Arg7, @args(23))
	COM_VarClone(*Arg6, @args(24))
	COM_VarClone(*Arg5, @args(25))
	COM_VarClone(*Arg4, @args(26))
	COM_VarClone(*Arg3, @args(27))
	COM_VarClone(*Arg2, @args(28))
	COM_VarClone(*Arg1, @args(29))
	ProcedureReturn COM_CallFunctionBool(Dialog, @"Show", @args(), 30, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SoundNote
;- -------------------------
ProcedureDLL.i Excel_SoundNote_Get_Application(SoundNote.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SoundNote, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SoundNote_Get_Creator(SoundNote.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SoundNote, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SoundNote_Get_Parent(SoundNote.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SoundNote, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SoundNote_Delete(SoundNote.IDispatch, *result.VARIANT)
	COM_CallFunction(SoundNote, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SoundNote_Import(SoundNote.IDispatch, Filename.s, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(SoundNote, @"Import", @args(), 1, *result, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_SoundNote_Play(SoundNote.IDispatch, *result.VARIANT)
	COM_CallFunction(SoundNote, @"Play", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SoundNote_Record(SoundNote.IDispatch, *result.VARIANT)
	COM_CallFunction(SoundNote, @"Record", 0, 0, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Panes
;- -------------------------
ProcedureDLL.i Excel_Panes_Get_Application(Panes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Panes, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Panes_Get_Creator(Panes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Panes, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Panes_Get_Parent(Panes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Panes, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Panes_Get_Count(Panes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Panes, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Panes_Get_Item(Panes.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Panes, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Panes_Get__Default(Panes.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Panes, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Pane
;- -------------------------
ProcedureDLL.i Excel_Pane_Get_Application(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Pane, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Get_Creator(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Pane, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Pane_Get_Parent(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Pane, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Pane_Activate(Pane.IDispatch)
	ProcedureReturn COM_CallFunctionBool(Pane, @"Activate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Get_Index(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Pane, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_LargeScroll(Pane.IDispatch, *Down.VARIANT, *Up.VARIANT, *ToRight.VARIANT, *ToLeft.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*ToLeft, @args(0))
	COM_VarClone(*ToRight, @args(1))
	COM_VarClone(*Up, @args(2))
	COM_VarClone(*Down, @args(3))
	COM_CallFunction(Pane, @"LargeScroll", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Get_ScrollColumn(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Pane, @"ScrollColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Put_ScrollColumn(Pane.IDispatch, ScrollColumn.l)
	COM_PutPropertyLong(Pane, @"ScrollColumn", ScrollColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Get_ScrollRow(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Pane, @"ScrollRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_Put_ScrollRow(Pane.IDispatch, ScrollRow.l)
	COM_PutPropertyLong(Pane, @"ScrollRow", ScrollRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_SmallScroll(Pane.IDispatch, *Down.VARIANT, *Up.VARIANT, *ToRight.VARIANT, *ToLeft.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*ToLeft, @args(0))
	COM_VarClone(*ToRight, @args(1))
	COM_VarClone(*Up, @args(2))
	COM_VarClone(*Down, @args(3))
	COM_CallFunction(Pane, @"SmallScroll", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Pane_Get_VisibleRange(Pane.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Pane, @"VisibleRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_ScrollIntoView(Pane.IDispatch, Left.l, Top.l, Width.l, Height.l, *Start.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Start, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Height
	args(2)\vt = #VT_I4 : args(2)\lVal = Width
	args(3)\vt = #VT_I4 : args(3)\lVal = Top
	args(4)\vt = #VT_I4 : args(4)\lVal = Left
	COM_CallFunction(Pane, @"ScrollIntoView", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_PointsToScreenPixelsX(Pane.IDispatch, Points.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Points
	ProcedureReturn COM_CallFunctionLong(Pane, @"PointsToScreenPixelsX", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pane_PointsToScreenPixelsY(Pane.IDispatch, Points.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Points
	ProcedureReturn COM_CallFunctionLong(Pane, @"PointsToScreenPixelsY", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Scenarios
;- -------------------------
ProcedureDLL.i Excel_Scenarios_Get_Application(Scenarios.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Scenarios, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenarios_Get_Creator(Scenarios.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Scenarios, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenarios_Get_Parent(Scenarios.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Scenarios, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenarios_Add(Scenarios.IDispatch, Name.s, *ChangingCells.VARIANT, *Values.VARIANT, *Comment.VARIANT, *Locked.VARIANT, *Hidden.VARIANT)
	Dim args.VARIANT(5)
	Protected.i r
	COM_VarClone(*Hidden, @args(0))
	COM_VarClone(*Locked, @args(1))
	COM_VarClone(*Comment, @args(2))
	COM_VarClone(*Values, @args(3))
	COM_VarClone(*ChangingCells, @args(4))
	args(5)\vt = #VT_BSTR : args(5)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(Scenarios, @"Add", @args(), 6, @_g_Excel_error)
	VariantClear_(@args(5))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Scenarios_Get_Count(Scenarios.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Scenarios, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenarios_CreateSummary(Scenarios.IDispatch, ReportType.l, *ResultCells.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ResultCells, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = ReportType
	COM_CallFunction(Scenarios, @"CreateSummary", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenarios_Item(Scenarios.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Scenarios, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenarios_Merge(Scenarios.IDispatch, *Source.VARIANT, *result.VARIANT)
	COM_CallFunction(Scenarios, @"Merge", *Source, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenarios__NewEnum(Scenarios.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(Scenarios, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Scenario
;- -------------------------
ProcedureDLL.i Excel_Scenario_Get_Application(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Scenario, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Get_Creator(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Scenario, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenario_Get_Parent(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Scenario, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_ChangeScenario(Scenario.IDispatch, *ChangingCells.VARIANT, *Values.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Values, @args(0))
	COM_VarClone(*ChangingCells, @args(1))
	COM_CallFunction(Scenario, @"ChangeScenario", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Scenario_Get_ChangingCells(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Scenario, @"ChangingCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Scenario_Get_Comment(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyString(Scenario, @"Comment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Put_Comment(Scenario.IDispatch, Comment.s)
	COM_PutPropertyString(Scenario, @"Comment", Comment, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Delete(Scenario.IDispatch, *result.VARIANT)
	COM_CallFunction(Scenario, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Scenario_Get_Hidden(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Scenario, @"Hidden", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Put_Hidden(Scenario.IDispatch, Hidden.w)
	COM_PutPropertyBool(Scenario, @"Hidden", Hidden, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Get_Index(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Scenario, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Scenario_Get_Locked(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Scenario, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Put_Locked(Scenario.IDispatch, Locked.w)
	COM_PutPropertyBool(Scenario, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Scenario_Get_Name(Scenario.IDispatch)
	ProcedureReturn COM_GetPropertyString(Scenario, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Put_Name(Scenario.IDispatch, Name.s)
	COM_PutPropertyString(Scenario, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Show(Scenario.IDispatch, *result.VARIANT)
	COM_CallFunction(Scenario, @"Show", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Scenario_Get_Values(Scenario.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(Scenario, @"Values", *Index, 1, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEObject
;- -------------------------
ProcedureDLL.i Excel_OLEObject_Get_Application(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Get_Creator(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObject, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_Parent(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_BottomRightCell(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"BottomRightCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_BringToFront(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"BringToFront", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Copy(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_CopyPicture(OLEObject.IDispatch, Appearance.l, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_I4 : args(1)\lVal = Appearance
	COM_CallFunction(OLEObject, @"CopyPicture", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Cut(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Cut", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Delete(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Duplicate(OLEObject.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(OLEObject, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_Enabled(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Enabled(OLEObject.IDispatch, Enabled.w)
	COM_PutPropertyBool(OLEObject, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObject_Get_Height(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObject, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Height(OLEObject.IDispatch, Height.d)
	COM_PutPropertyDouble(OLEObject, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Get_Index(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObject, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObject_Get_Left(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObject, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Left(OLEObject.IDispatch, Left.d)
	COM_PutPropertyDouble(OLEObject, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_Locked(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Locked(OLEObject.IDispatch, Locked.w)
	COM_PutPropertyBool(OLEObject, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_Name(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Name(OLEObject.IDispatch, Name.s)
	COM_PutPropertyString(OLEObject, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_OnAction(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"OnAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_OnAction(OLEObject.IDispatch, OnAction.s)
	COM_PutPropertyString(OLEObject, @"OnAction", OnAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Get_Placement(OLEObject.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEObject, @"Placement", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Placement(OLEObject.IDispatch, *Placement.VARIANT)
	COM_PutProperty(OLEObject, @"Placement", *Placement, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_PrintObject(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"PrintObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_PrintObject(OLEObject.IDispatch, PrintObject.w)
	COM_PutPropertyBool(OLEObject, @"PrintObject", PrintObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Select(OLEObject.IDispatch, *Replace.VARIANT, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Select", *Replace, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_SendToBack(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"SendToBack", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObject_Get_Top(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObject, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Top(OLEObject.IDispatch, Top.d)
	COM_PutPropertyDouble(OLEObject, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_TopLeftCell(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"TopLeftCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_Visible(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Visible(OLEObject.IDispatch, Visible.w)
	COM_PutPropertyBool(OLEObject, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObject_Get_Width(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObject, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Width(OLEObject.IDispatch, Width.d)
	COM_PutPropertyDouble(OLEObject, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Get_ZOrder(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObject, @"ZOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_ShapeRange(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"ShapeRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_Border(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_Interior(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_Shadow(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_Shadow(OLEObject.IDispatch, Shadow.w)
	COM_PutPropertyBool(OLEObject, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Activate(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Activate", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_AutoLoad(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"AutoLoad", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_AutoLoad(OLEObject.IDispatch, AutoLoad.w)
	COM_PutPropertyBool(OLEObject, @"AutoLoad", AutoLoad, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObject_Get_AutoUpdate(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObject, @"AutoUpdate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_AutoUpdate(OLEObject.IDispatch, AutoUpdate.w)
	COM_PutPropertyBool(OLEObject, @"AutoUpdate", AutoUpdate, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObject_Get_Object(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObject, @"Object", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Get_OLEType(OLEObject.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEObject, @"OLEType", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_SourceName(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"SourceName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_SourceName(OLEObject.IDispatch, SourceName.s)
	COM_PutPropertyString(OLEObject, @"SourceName", SourceName, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Update(OLEObject.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObject, @"Update", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Verb(OLEObject.IDispatch, Verb.l, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Verb
	COM_CallFunction(OLEObject, @"Verb", @args(), 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_LinkedCell(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"LinkedCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_LinkedCell(OLEObject.IDispatch, LinkedCell.s)
	COM_PutPropertyString(OLEObject, @"LinkedCell", LinkedCell, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_ListFillRange(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"ListFillRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_ListFillRange(OLEObject.IDispatch, ListFillRange.s)
	COM_PutPropertyString(OLEObject, @"ListFillRange", ListFillRange, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_progID(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"progID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObject_Get_AltHTML(OLEObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObject, @"AltHTML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObject_Put_AltHTML(OLEObject.IDispatch, AltHTML.s)
	COM_PutPropertyString(OLEObject, @"AltHTML", AltHTML, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEObjects
;- -------------------------
ProcedureDLL.i Excel_OLEObjects_Get_Application(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObjects, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Get_Creator(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObjects, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Get_Parent(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObjects, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy3(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy3", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_BringToFront(OLEObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"BringToFront", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Copy(OLEObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_CopyPicture(OLEObjects.IDispatch, Appearance.l, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_I4 : args(1)\lVal = Appearance
	COM_CallFunction(OLEObjects, @"CopyPicture", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Cut(OLEObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"Cut", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Delete(OLEObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Duplicate(OLEObjects.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(OLEObjects, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_Enabled(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Enabled(OLEObjects.IDispatch, Enabled.w)
	COM_PutPropertyBool(OLEObjects, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObjects_Get_Height(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObjects, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Height(OLEObjects.IDispatch, Height.d)
	COM_PutPropertyDouble(OLEObjects, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy12(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy12", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObjects_Get_Left(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObjects, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Left(OLEObjects.IDispatch, Left.d)
	COM_PutPropertyDouble(OLEObjects, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_Locked(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Locked(OLEObjects.IDispatch, Locked.w)
	COM_PutPropertyBool(OLEObjects, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy15(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy15", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObjects_Get_OnAction(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObjects, @"OnAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_OnAction(OLEObjects.IDispatch, OnAction.s)
	COM_PutPropertyString(OLEObjects, @"OnAction", OnAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Get_Placement(OLEObjects.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEObjects, @"Placement", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Placement(OLEObjects.IDispatch, *Placement.VARIANT)
	COM_PutProperty(OLEObjects, @"Placement", *Placement, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_PrintObject(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"PrintObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_PrintObject(OLEObjects.IDispatch, PrintObject.w)
	COM_PutPropertyBool(OLEObjects, @"PrintObject", PrintObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Select(OLEObjects.IDispatch, *Replace.VARIANT, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"Select", *Replace, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_SendToBack(OLEObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(OLEObjects, @"SendToBack", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObjects_Get_Top(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObjects, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Top(OLEObjects.IDispatch, Top.d)
	COM_PutPropertyDouble(OLEObjects, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy22(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy22", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_Visible(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Visible(OLEObjects.IDispatch, Visible.w)
	COM_PutPropertyBool(OLEObjects, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEObjects_Get_Width(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEObjects, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Width(OLEObjects.IDispatch, Width.d)
	COM_PutPropertyDouble(OLEObjects, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Get_ZOrder(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObjects, @"ZOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Get_ShapeRange(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObjects, @"ShapeRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Get_Border(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObjects, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Get_Interior(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEObjects, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_Shadow(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_Shadow(OLEObjects.IDispatch, Shadow.w)
	COM_PutPropertyBool(OLEObjects, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy30(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy30", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEObjects_Get_AutoLoad(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEObjects, @"AutoLoad", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_AutoLoad(OLEObjects.IDispatch, AutoLoad.w)
	COM_PutPropertyBool(OLEObjects, @"AutoLoad", AutoLoad, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy32(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy32", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy33(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy33", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy34(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy34", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEObjects_Get_SourceName(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEObjects, @"SourceName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Put_SourceName(OLEObjects.IDispatch, SourceName.s)
	COM_PutPropertyString(OLEObjects, @"SourceName", SourceName, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy36(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy36", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy37(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy37", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy38(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy38", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy39(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy39", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy40(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy40", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects__Dummy41(OLEObjects.IDispatch)
	COM_CallFunction(OLEObjects, @"_Dummy41", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Add(OLEObjects.IDispatch, *ClassType.VARIANT, *Filename.VARIANT, *Link.VARIANT, *DisplayAsIcon.VARIANT, *IconFileName.VARIANT, *IconIndex.VARIANT, *IconLabel.VARIANT, *Left.VARIANT, *Top.VARIANT, *Width.VARIANT, *Height.VARIANT)
	Dim args.VARIANT(10)
	COM_VarClone(*Height, @args(0))
	COM_VarClone(*Width, @args(1))
	COM_VarClone(*Top, @args(2))
	COM_VarClone(*Left, @args(3))
	COM_VarClone(*IconLabel, @args(4))
	COM_VarClone(*IconIndex, @args(5))
	COM_VarClone(*IconFileName, @args(6))
	COM_VarClone(*DisplayAsIcon, @args(7))
	COM_VarClone(*Link, @args(8))
	COM_VarClone(*Filename, @args(9))
	COM_VarClone(*ClassType, @args(10))
	ProcedureReturn COM_CallFunctionDispatch(OLEObjects, @"Add", @args(), 11, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEObjects_Get_Count(OLEObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEObjects, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Group(OLEObjects.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(OLEObjects, @"Group", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects_Item(OLEObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(OLEObjects, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEObjects__NewEnum(OLEObjects.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(OLEObjects, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_RoutingSlip
;- -------------------------
ProcedureDLL.i Excel_RoutingSlip_Get_Application(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RoutingSlip, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Creator(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RoutingSlip, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RoutingSlip_Get_Parent(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RoutingSlip, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Delivery(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RoutingSlip, @"Delivery", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_Delivery(RoutingSlip.IDispatch, Delivery.l)
	COM_PutPropertyLong(RoutingSlip, @"Delivery", Delivery, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Message(RoutingSlip.IDispatch, *result.VARIANT)
	COM_GetProperty(RoutingSlip, @"Message", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_Message(RoutingSlip.IDispatch, *Message.VARIANT)
	COM_PutProperty(RoutingSlip, @"Message", *Message, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Recipients(RoutingSlip.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(RoutingSlip, @"Recipients", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_Recipients(RoutingSlip.IDispatch, *Index.VARIANT, *Recipients.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Recipients, @args(0))
	COM_VarClone(*Index, @args(1))
	COM_PutProperty(RoutingSlip, @"Recipients", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Reset(RoutingSlip.IDispatch, *result.VARIANT)
	COM_CallFunction(RoutingSlip, @"Reset", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_RoutingSlip_Get_ReturnWhenDone(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyBool(RoutingSlip, @"ReturnWhenDone", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_ReturnWhenDone(RoutingSlip.IDispatch, ReturnWhenDone.w)
	COM_PutPropertyBool(RoutingSlip, @"ReturnWhenDone", ReturnWhenDone, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Status(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RoutingSlip, @"Status", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Get_Subject(RoutingSlip.IDispatch, *result.VARIANT)
	COM_GetProperty(RoutingSlip, @"Subject", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_Subject(RoutingSlip.IDispatch, *Subject.VARIANT)
	COM_PutProperty(RoutingSlip, @"Subject", *Subject, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_RoutingSlip_Get_TrackStatus(RoutingSlip.IDispatch)
	ProcedureReturn COM_GetPropertyBool(RoutingSlip, @"TrackStatus", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RoutingSlip_Put_TrackStatus(RoutingSlip.IDispatch, TrackStatus.w)
	COM_PutPropertyBool(RoutingSlip, @"TrackStatus", TrackStatus, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Outline
;- -------------------------
ProcedureDLL.i Excel_Outline_Get_Application(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Outline, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Get_Creator(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Outline, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Outline_Get_Parent(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Outline, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Outline_Get_AutomaticStyles(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Outline, @"AutomaticStyles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Put_AutomaticStyles(Outline.IDispatch, AutomaticStyles.w)
	COM_PutPropertyBool(Outline, @"AutomaticStyles", AutomaticStyles, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_ShowLevels(Outline.IDispatch, *RowLevels.VARIANT, *ColumnLevels.VARIANT, *result.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ColumnLevels, @args(0))
	COM_VarClone(*RowLevels, @args(1))
	COM_CallFunction(Outline, @"ShowLevels", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Get_SummaryColumn(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Outline, @"SummaryColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Put_SummaryColumn(Outline.IDispatch, SummaryColumn.l)
	COM_PutPropertyLong(Outline, @"SummaryColumn", SummaryColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Get_SummaryRow(Outline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Outline, @"SummaryRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Outline_Put_SummaryRow(Outline.IDispatch, SummaryRow.l)
	COM_PutPropertyLong(Outline, @"SummaryRow", SummaryRow, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Worksheets
;- -------------------------
ProcedureDLL.i Excel_Worksheets_Get_Application(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Get_Creator(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheets, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get_Parent(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Add(Worksheets.IDispatch, *Before.VARIANT, *After.VARIANT, *Count.VARIANT, *Type.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*Count, @args(1))
	COM_VarClone(*After, @args(2))
	COM_VarClone(*Before, @args(3))
	ProcedureReturn COM_CallFunctionDispatch(Worksheets, @"Add", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Copy(Worksheets.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Worksheets, @"Copy", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Get_Count(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Worksheets, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Delete(Worksheets.IDispatch)
	COM_CallFunction(Worksheets, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_FillAcrossSheets(Worksheets.IDispatch, Range.IDispatch, Type.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Type
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Range
	COM_CallFunction(Worksheets, @"FillAcrossSheets", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get_Item(Worksheets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Move(Worksheets.IDispatch, *Before.VARIANT, *After.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*After, @args(0))
	COM_VarClone(*Before, @args(1))
	COM_CallFunction(Worksheets, @"Move", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get__NewEnum(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Worksheets, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets___PrintOut(Worksheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT)
	Dim args.VARIANT(6)
	COM_VarClone(*Collate, @args(0))
	COM_VarClone(*PrintToFile, @args(1))
	COM_VarClone(*ActivePrinter, @args(2))
	COM_VarClone(*Preview, @args(3))
	COM_VarClone(*Copies, @args(4))
	COM_VarClone(*To, @args(5))
	COM_VarClone(*From, @args(6))
	COM_CallFunction(Worksheets, @"__PrintOut", @args(), 7, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_PrintPreview(Worksheets.IDispatch, *EnableChanges.VARIANT)
	COM_CallFunction(Worksheets, @"PrintPreview", *EnableChanges, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Select(Worksheets.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Worksheets, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get_HPageBreaks(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"HPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get_VPageBreaks(Worksheets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"VPageBreaks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Get_Visible(Worksheets.IDispatch, *result.VARIANT)
	COM_GetProperty(Worksheets, @"Visible", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_Put_Visible(Worksheets.IDispatch, *Visible.VARIANT)
	COM_PutProperty(Worksheets, @"Visible", *Visible, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Worksheets_Get__Default(Worksheets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Worksheets, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets__PrintOut(Worksheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*PrToFileName, @args(0))
	COM_VarClone(*Collate, @args(1))
	COM_VarClone(*PrintToFile, @args(2))
	COM_VarClone(*ActivePrinter, @args(3))
	COM_VarClone(*Preview, @args(4))
	COM_VarClone(*Copies, @args(5))
	COM_VarClone(*To, @args(6))
	COM_VarClone(*From, @args(7))
	COM_CallFunction(Worksheets, @"_PrintOut", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Worksheets_PrintOut(Worksheets.IDispatch, *From.VARIANT, *To.VARIANT, *Copies.VARIANT, *Preview.VARIANT, *ActivePrinter.VARIANT, *PrintToFile.VARIANT, *Collate.VARIANT, *PrToFileName.VARIANT, *IgnorePrintAreas.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*IgnorePrintAreas, @args(0))
	COM_VarClone(*PrToFileName, @args(1))
	COM_VarClone(*Collate, @args(2))
	COM_VarClone(*PrintToFile, @args(3))
	COM_VarClone(*ActivePrinter, @args(4))
	COM_VarClone(*Preview, @args(5))
	COM_VarClone(*Copies, @args(6))
	COM_VarClone(*To, @args(7))
	COM_VarClone(*From, @args(8))
	COM_CallFunction(Worksheets, @"PrintOut", @args(), 9, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PageSetup
;- -------------------------
ProcedureDLL.i Excel_PageSetup_Get_Application(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_Creator(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_Parent(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_BlackAndWhite(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"BlackAndWhite", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_BlackAndWhite(PageSetup.IDispatch, BlackAndWhite.w)
	COM_PutPropertyBool(PageSetup, @"BlackAndWhite", BlackAndWhite, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_BottomMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"BottomMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_BottomMargin(PageSetup.IDispatch, BottomMargin.d)
	COM_PutPropertyDouble(PageSetup, @"BottomMargin", BottomMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_CenterFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"CenterFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_CenterFooter(PageSetup.IDispatch, CenterFooter.s)
	COM_PutPropertyString(PageSetup, @"CenterFooter", CenterFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_CenterHeader(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"CenterHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_CenterHeader(PageSetup.IDispatch, CenterHeader.s)
	COM_PutPropertyString(PageSetup, @"CenterHeader", CenterHeader, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_CenterHorizontally(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"CenterHorizontally", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_CenterHorizontally(PageSetup.IDispatch, CenterHorizontally.w)
	COM_PutPropertyBool(PageSetup, @"CenterHorizontally", CenterHorizontally, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_CenterVertically(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"CenterVertically", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_CenterVertically(PageSetup.IDispatch, CenterVertically.w)
	COM_PutPropertyBool(PageSetup, @"CenterVertically", CenterVertically, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_ChartSize(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"ChartSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_ChartSize(PageSetup.IDispatch, ChartSize.l)
	COM_PutPropertyLong(PageSetup, @"ChartSize", ChartSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_Draft(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"Draft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_Draft(PageSetup.IDispatch, Draft.w)
	COM_PutPropertyBool(PageSetup, @"Draft", Draft, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_FirstPageNumber(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"FirstPageNumber", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_FirstPageNumber(PageSetup.IDispatch, FirstPageNumber.l)
	COM_PutPropertyLong(PageSetup, @"FirstPageNumber", FirstPageNumber, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_FitToPagesTall(PageSetup.IDispatch, *result.VARIANT)
	COM_GetProperty(PageSetup, @"FitToPagesTall", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_FitToPagesTall(PageSetup.IDispatch, *FitToPagesTall.VARIANT)
	COM_PutProperty(PageSetup, @"FitToPagesTall", *FitToPagesTall, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_FitToPagesWide(PageSetup.IDispatch, *result.VARIANT)
	COM_GetProperty(PageSetup, @"FitToPagesWide", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_FitToPagesWide(PageSetup.IDispatch, *FitToPagesWide.VARIANT)
	COM_PutProperty(PageSetup, @"FitToPagesWide", *FitToPagesWide, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_FooterMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"FooterMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_FooterMargin(PageSetup.IDispatch, FooterMargin.d)
	COM_PutPropertyDouble(PageSetup, @"FooterMargin", FooterMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_HeaderMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"HeaderMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_HeaderMargin(PageSetup.IDispatch, HeaderMargin.d)
	COM_PutPropertyDouble(PageSetup, @"HeaderMargin", HeaderMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_LeftFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"LeftFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_LeftFooter(PageSetup.IDispatch, LeftFooter.s)
	COM_PutPropertyString(PageSetup, @"LeftFooter", LeftFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_LeftHeader(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"LeftHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_LeftHeader(PageSetup.IDispatch, LeftHeader.s)
	COM_PutPropertyString(PageSetup, @"LeftHeader", LeftHeader, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_LeftMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"LeftMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_LeftMargin(PageSetup.IDispatch, LeftMargin.d)
	COM_PutPropertyDouble(PageSetup, @"LeftMargin", LeftMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_Order(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"Order", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_Order(PageSetup.IDispatch, Order.l)
	COM_PutPropertyLong(PageSetup, @"Order", Order, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_Orientation(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_Orientation(PageSetup.IDispatch, Orientation.l)
	COM_PutPropertyLong(PageSetup, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_PaperSize(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"PaperSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PaperSize(PageSetup.IDispatch, PaperSize.l)
	COM_PutPropertyLong(PageSetup, @"PaperSize", PaperSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_PrintArea(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"PrintArea", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintArea(PageSetup.IDispatch, PrintArea.s)
	COM_PutPropertyString(PageSetup, @"PrintArea", PrintArea, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_PrintGridlines(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"PrintGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintGridlines(PageSetup.IDispatch, PrintGridlines.w)
	COM_PutPropertyBool(PageSetup, @"PrintGridlines", PrintGridlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_PrintHeadings(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"PrintHeadings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintHeadings(PageSetup.IDispatch, PrintHeadings.w)
	COM_PutPropertyBool(PageSetup, @"PrintHeadings", PrintHeadings, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_PrintNotes(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"PrintNotes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintNotes(PageSetup.IDispatch, PrintNotes.w)
	COM_PutPropertyBool(PageSetup, @"PrintNotes", PrintNotes, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_PrintQuality(PageSetup.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(PageSetup, @"PrintQuality", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintQuality(PageSetup.IDispatch, *Index.VARIANT, *PrintQuality.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*PrintQuality, @args(0))
	COM_VarClone(*Index, @args(1))
	COM_PutProperty(PageSetup, @"PrintQuality", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_PrintTitleColumns(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"PrintTitleColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintTitleColumns(PageSetup.IDispatch, PrintTitleColumns.s)
	COM_PutPropertyString(PageSetup, @"PrintTitleColumns", PrintTitleColumns, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_PrintTitleRows(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"PrintTitleRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintTitleRows(PageSetup.IDispatch, PrintTitleRows.s)
	COM_PutPropertyString(PageSetup, @"PrintTitleRows", PrintTitleRows, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_RightFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"RightFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_RightFooter(PageSetup.IDispatch, RightFooter.s)
	COM_PutPropertyString(PageSetup, @"RightFooter", RightFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PageSetup_Get_RightHeader(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyString(PageSetup, @"RightHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_RightHeader(PageSetup.IDispatch, RightHeader.s)
	COM_PutPropertyString(PageSetup, @"RightHeader", RightHeader, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_RightMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"RightMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_RightMargin(PageSetup.IDispatch, RightMargin.d)
	COM_PutPropertyDouble(PageSetup, @"RightMargin", RightMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PageSetup_Get_TopMargin(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PageSetup, @"TopMargin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_TopMargin(PageSetup.IDispatch, TopMargin.d)
	COM_PutPropertyDouble(PageSetup, @"TopMargin", TopMargin, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_Zoom(PageSetup.IDispatch, *result.VARIANT)
	COM_GetProperty(PageSetup, @"Zoom", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_Zoom(PageSetup.IDispatch, *Zoom.VARIANT)
	COM_PutProperty(PageSetup, @"Zoom", *Zoom, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_PrintComments(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"PrintComments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintComments(PageSetup.IDispatch, PrintComments.l)
	COM_PutPropertyLong(PageSetup, @"PrintComments", PrintComments, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Get_PrintErrors(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PageSetup, @"PrintErrors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_PrintErrors(PageSetup.IDispatch, PrintErrors.l)
	COM_PutPropertyLong(PageSetup, @"PrintErrors", PrintErrors, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_CenterHeaderPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"CenterHeaderPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_CenterFooterPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"CenterFooterPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_LeftHeaderPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"LeftHeaderPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_LeftFooterPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"LeftFooterPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_RightHeaderPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"RightHeaderPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_RightFooterPicture(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"RightFooterPicture", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_OddAndEvenPagesHeaderFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"OddAndEvenPagesHeaderFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_OddAndEvenPagesHeaderFooter(PageSetup.IDispatch, OddAndEvenPagesHeaderFooter.w)
	COM_PutPropertyBool(PageSetup, @"OddAndEvenPagesHeaderFooter", OddAndEvenPagesHeaderFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_DifferentFirstPageHeaderFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"DifferentFirstPageHeaderFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_DifferentFirstPageHeaderFooter(PageSetup.IDispatch, DifferentFirstPageHeaderFooter.w)
	COM_PutPropertyBool(PageSetup, @"DifferentFirstPageHeaderFooter", DifferentFirstPageHeaderFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_ScaleWithDocHeaderFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"ScaleWithDocHeaderFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_ScaleWithDocHeaderFooter(PageSetup.IDispatch, ScaleWithDocHeaderFooter.w)
	COM_PutPropertyBool(PageSetup, @"ScaleWithDocHeaderFooter", ScaleWithDocHeaderFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PageSetup_Get_AlignMarginsHeaderFooter(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PageSetup, @"AlignMarginsHeaderFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PageSetup_Put_AlignMarginsHeaderFooter(PageSetup.IDispatch, AlignMarginsHeaderFooter.w)
	COM_PutPropertyBool(PageSetup, @"AlignMarginsHeaderFooter", AlignMarginsHeaderFooter, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_Pages(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"Pages", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_EvenPage(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"EvenPage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PageSetup_Get_FirstPage(PageSetup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PageSetup, @"FirstPage", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Names
;- -------------------------
ProcedureDLL.i Excel_Names_Get_Application(Names.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Names, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Names_Get_Creator(Names.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Names, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Names_Get_Parent(Names.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Names, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Names_Add(Names.IDispatch, *Name.VARIANT, *RefersTo.VARIANT, *Visible.VARIANT, *MacroType.VARIANT, *ShortcutKey.VARIANT, *Category.VARIANT, *NameLocal.VARIANT, *RefersToLocal.VARIANT, *CategoryLocal.VARIANT, *RefersToR1C1.VARIANT, *RefersToR1C1Local.VARIANT)
	Dim args.VARIANT(10)
	COM_VarClone(*RefersToR1C1Local, @args(0))
	COM_VarClone(*RefersToR1C1, @args(1))
	COM_VarClone(*CategoryLocal, @args(2))
	COM_VarClone(*RefersToLocal, @args(3))
	COM_VarClone(*NameLocal, @args(4))
	COM_VarClone(*Category, @args(5))
	COM_VarClone(*ShortcutKey, @args(6))
	COM_VarClone(*MacroType, @args(7))
	COM_VarClone(*Visible, @args(8))
	COM_VarClone(*RefersTo, @args(9))
	COM_VarClone(*Name, @args(10))
	ProcedureReturn COM_CallFunctionDispatch(Names, @"Add", @args(), 11, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Names_Item(Names.IDispatch, *Index.VARIANT, *IndexLocal.VARIANT, *RefersTo.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*RefersTo, @args(0))
	COM_VarClone(*IndexLocal, @args(1))
	COM_VarClone(*Index, @args(2))
	ProcedureReturn COM_CallFunctionDispatch(Names, @"Item", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Names__Default(Names.IDispatch, *Index.VARIANT, *IndexLocal.VARIANT, *RefersTo.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*RefersTo, @args(0))
	COM_VarClone(*IndexLocal, @args(1))
	COM_VarClone(*Index, @args(2))
	ProcedureReturn COM_CallFunctionDispatch(Names, @"_Default", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Names_Get_Count(Names.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Names, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Names_Get__NewEnum(Names.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Names, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Name
;- -------------------------
ProcedureDLL.i Excel_Name_Get_Application(Name.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Name, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_Creator(Name.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Name, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Name_Get_Parent(Name.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Name, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get__Default(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_Index(Name.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Name, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_Category(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"Category", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_Category(Name.IDispatch, Category.s)
	COM_PutPropertyString(Name, @"Category", Category, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_CategoryLocal(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"CategoryLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_CategoryLocal(Name.IDispatch, CategoryLocal.s)
	COM_PutPropertyString(Name, @"CategoryLocal", CategoryLocal, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Delete(Name.IDispatch)
	COM_CallFunction(Name, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_MacroType(Name.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Name, @"MacroType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_MacroType(Name.IDispatch, MacroType.l)
	COM_PutPropertyLong(Name, @"MacroType", MacroType, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_Name(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_Name(Name.IDispatch, _Name.s)
	COM_PutPropertyString(Name, @"Name", _Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_RefersTo(Name.IDispatch, *result.VARIANT)
	COM_GetProperty(Name, @"RefersTo", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_RefersTo(Name.IDispatch, *RefersTo.VARIANT)
	COM_PutProperty(Name, @"RefersTo", *RefersTo, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_ShortcutKey(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"ShortcutKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_ShortcutKey(Name.IDispatch, ShortcutKey.s)
	COM_PutPropertyString(Name, @"ShortcutKey", ShortcutKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_Value(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_Value(Name.IDispatch, Value.s)
	COM_PutPropertyString(Name, @"Value", Value, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Name_Get_Visible(Name.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Name, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_Visible(Name.IDispatch, Visible.w)
	COM_PutPropertyBool(Name, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_NameLocal(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"NameLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_NameLocal(Name.IDispatch, NameLocal.s)
	COM_PutPropertyString(Name, @"NameLocal", NameLocal, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_RefersToLocal(Name.IDispatch, *result.VARIANT)
	COM_GetProperty(Name, @"RefersToLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_RefersToLocal(Name.IDispatch, *RefersToLocal.VARIANT)
	COM_PutProperty(Name, @"RefersToLocal", *RefersToLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_RefersToR1C1(Name.IDispatch, *result.VARIANT)
	COM_GetProperty(Name, @"RefersToR1C1", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_RefersToR1C1(Name.IDispatch, *RefersToR1C1.VARIANT)
	COM_PutProperty(Name, @"RefersToR1C1", *RefersToR1C1, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Get_RefersToR1C1Local(Name.IDispatch, *result.VARIANT)
	COM_GetProperty(Name, @"RefersToR1C1Local", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_RefersToR1C1Local(Name.IDispatch, *RefersToR1C1Local.VARIANT)
	COM_PutProperty(Name, @"RefersToR1C1Local", *RefersToR1C1Local, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Name_Get_RefersToRange(Name.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Name, @"RefersToRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Name_Get_Comment(Name.IDispatch)
	ProcedureReturn COM_GetPropertyString(Name, @"Comment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_Comment(Name.IDispatch, Comment.s)
	COM_PutPropertyString(Name, @"Comment", Comment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Name_Get_WorkbookParameter(Name.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Name, @"WorkbookParameter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Name_Put_WorkbookParameter(Name.IDispatch, WorkbookParameter.w)
	COM_PutPropertyBool(Name, @"WorkbookParameter", WorkbookParameter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Name_Get_ValidWorkbookParameter(Name.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Name, @"ValidWorkbookParameter", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartObject
;- -------------------------
ProcedureDLL.i Excel_ChartObject_Get_Application(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Get_Creator(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartObject, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_Parent(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_BottomRightCell(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"BottomRightCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_BringToFront(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"BringToFront", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject__Copy(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"_Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_CopyPicture(ChartObject.IDispatch, Appearance.l, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_I4 : args(1)\lVal = Appearance
	COM_CallFunction(ChartObject, @"CopyPicture", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Cut(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"Cut", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Delete(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Duplicate(ChartObject.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ChartObject, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_Enabled(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Enabled(ChartObject.IDispatch, Enabled.w)
	COM_PutPropertyBool(ChartObject, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObject_Get_Height(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObject, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Height(ChartObject.IDispatch, Height.d)
	COM_PutPropertyDouble(ChartObject, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Get_Index(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartObject, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObject_Get_Left(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObject, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Left(ChartObject.IDispatch, Left.d)
	COM_PutPropertyDouble(ChartObject, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_Locked(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Locked(ChartObject.IDispatch, Locked.w)
	COM_PutPropertyBool(ChartObject, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartObject_Get_Name(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartObject, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Name(ChartObject.IDispatch, Name.s)
	COM_PutPropertyString(ChartObject, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartObject_Get_OnAction(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartObject, @"OnAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_OnAction(ChartObject.IDispatch, OnAction.s)
	COM_PutPropertyString(ChartObject, @"OnAction", OnAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Get_Placement(ChartObject.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartObject, @"Placement", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Placement(ChartObject.IDispatch, *Placement.VARIANT)
	COM_PutProperty(ChartObject, @"Placement", *Placement, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_PrintObject(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"PrintObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_PrintObject(ChartObject.IDispatch, PrintObject.w)
	COM_PutPropertyBool(ChartObject, @"PrintObject", PrintObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Select(ChartObject.IDispatch, *Replace.VARIANT, *result.VARIANT)
	COM_CallFunction(ChartObject, @"Select", *Replace, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_SendToBack(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"SendToBack", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObject_Get_Top(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObject, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Top(ChartObject.IDispatch, Top.d)
	COM_PutPropertyDouble(ChartObject, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_TopLeftCell(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"TopLeftCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_Visible(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Visible(ChartObject.IDispatch, Visible.w)
	COM_PutPropertyBool(ChartObject, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObject_Get_Width(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObject, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Width(ChartObject.IDispatch, Width.d)
	COM_PutPropertyDouble(ChartObject, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Get_ZOrder(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartObject, @"ZOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_ShapeRange(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"ShapeRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Activate(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"Activate", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_Chart(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"Chart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_ProtectChartObject(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"ProtectChartObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_ProtectChartObject(ChartObject.IDispatch, ProtectChartObject.w)
	COM_PutPropertyBool(ChartObject, @"ProtectChartObject", ProtectChartObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_RoundedCorners(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"RoundedCorners", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_RoundedCorners(ChartObject.IDispatch, RoundedCorners.w)
	COM_PutPropertyBool(ChartObject, @"RoundedCorners", RoundedCorners, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_Border(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObject_Get_Interior(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObject, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObject_Get_Shadow(ChartObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObject, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Put_Shadow(ChartObject.IDispatch, Shadow.w)
	COM_PutPropertyBool(ChartObject, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObject_Copy(ChartObject.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObject, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartObjects
;- -------------------------
ProcedureDLL.i Excel_ChartObjects_Get_Application(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObjects, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Get_Creator(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartObjects, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Get_Parent(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObjects, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy3(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy3", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_BringToFront(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"BringToFront", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Copy(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"_Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_CopyPicture(ChartObjects.IDispatch, Appearance.l, Format.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = Format
	args(1)\vt = #VT_I4 : args(1)\lVal = Appearance
	COM_CallFunction(ChartObjects, @"CopyPicture", @args(), 2, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Cut(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"Cut", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Delete(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Duplicate(ChartObjects.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ChartObjects, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_Enabled(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Enabled(ChartObjects.IDispatch, Enabled.w)
	COM_PutPropertyBool(ChartObjects, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObjects_Get_Height(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObjects, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Height(ChartObjects.IDispatch, Height.d)
	COM_PutPropertyDouble(ChartObjects, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy12(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy12", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObjects_Get_Left(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObjects, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Left(ChartObjects.IDispatch, Left.d)
	COM_PutPropertyDouble(ChartObjects, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_Locked(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Locked(ChartObjects.IDispatch, Locked.w)
	COM_PutPropertyBool(ChartObjects, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy15(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy15", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartObjects_Get_OnAction(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartObjects, @"OnAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_OnAction(ChartObjects.IDispatch, OnAction.s)
	COM_PutPropertyString(ChartObjects, @"OnAction", OnAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Get_Placement(ChartObjects.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartObjects, @"Placement", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Placement(ChartObjects.IDispatch, *Placement.VARIANT)
	COM_PutProperty(ChartObjects, @"Placement", *Placement, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_PrintObject(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"PrintObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_PrintObject(ChartObjects.IDispatch, PrintObject.w)
	COM_PutPropertyBool(ChartObjects, @"PrintObject", PrintObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Select(ChartObjects.IDispatch, *Replace.VARIANT, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"Select", *Replace, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_SendToBack(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"SendToBack", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObjects_Get_Top(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObjects, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Top(ChartObjects.IDispatch, Top.d)
	COM_PutPropertyDouble(ChartObjects, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy22(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy22", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_Visible(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Visible(ChartObjects.IDispatch, Visible.w)
	COM_PutPropertyBool(ChartObjects, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartObjects_Get_Width(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartObjects, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Width(ChartObjects.IDispatch, Width.d)
	COM_PutPropertyDouble(ChartObjects, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy25(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy25", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Get_ShapeRange(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObjects, @"ShapeRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy27(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy27", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects__Dummy28(ChartObjects.IDispatch)
	COM_CallFunction(ChartObjects, @"_Dummy28", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_ProtectChartObject(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"ProtectChartObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_ProtectChartObject(ChartObjects.IDispatch, ProtectChartObject.w)
	COM_PutPropertyBool(ChartObjects, @"ProtectChartObject", ProtectChartObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_RoundedCorners(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"RoundedCorners", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_RoundedCorners(ChartObjects.IDispatch, RoundedCorners.w)
	COM_PutPropertyBool(ChartObjects, @"RoundedCorners", RoundedCorners, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Get_Border(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObjects, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Get_Interior(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartObjects, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartObjects_Get_Shadow(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartObjects, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Put_Shadow(ChartObjects.IDispatch, Shadow.w)
	COM_PutPropertyBool(ChartObjects, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Copy(ChartObjects.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartObjects, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Add(ChartObjects.IDispatch, Left.d, Top.d, Width.d, Height.d)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Height
	args(1)\vt = #VT_R8 : args(1)\dblVal = Width
	args(2)\vt = #VT_R8 : args(2)\dblVal = Top
	args(3)\vt = #VT_R8 : args(3)\dblVal = Left
	ProcedureReturn COM_CallFunctionDispatch(ChartObjects, @"Add", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartObjects_Get_Count(ChartObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartObjects, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Group(ChartObjects.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ChartObjects, @"Group", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects_Item(ChartObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ChartObjects, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects__NewEnum(ChartObjects.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(ChartObjects, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartObjects__Default(ChartObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ChartObjects, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Mailer
;- -------------------------
ProcedureDLL.i Excel_Mailer_Get_Application(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Mailer, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_Creator(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Mailer, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Mailer_Get_Parent(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Mailer, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_BCCRecipients(Mailer.IDispatch, *result.VARIANT)
	COM_GetProperty(Mailer, @"BCCRecipients", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_BCCRecipients(Mailer.IDispatch, *BCCRecipients.VARIANT)
	COM_PutProperty(Mailer, @"BCCRecipients", *BCCRecipients, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_CCRecipients(Mailer.IDispatch, *result.VARIANT)
	COM_GetProperty(Mailer, @"CCRecipients", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_CCRecipients(Mailer.IDispatch, *CCRecipients.VARIANT)
	COM_PutProperty(Mailer, @"CCRecipients", *CCRecipients, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_Enclosures(Mailer.IDispatch, *result.VARIANT)
	COM_GetProperty(Mailer, @"Enclosures", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_Enclosures(Mailer.IDispatch, *Enclosures.VARIANT)
	COM_PutProperty(Mailer, @"Enclosures", *Enclosures, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Mailer_Get_Received(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Mailer, @"Received", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Mailer_Get_SendDateTime(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Mailer, @"SendDateTime", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Mailer_Get_Sender(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyString(Mailer, @"Sender", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Mailer_Get_Subject(Mailer.IDispatch)
	ProcedureReturn COM_GetPropertyString(Mailer, @"Subject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_Subject(Mailer.IDispatch, Subject.s)
	COM_PutPropertyString(Mailer, @"Subject", Subject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_ToRecipients(Mailer.IDispatch, *result.VARIANT)
	COM_GetProperty(Mailer, @"ToRecipients", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_ToRecipients(Mailer.IDispatch, *ToRecipients.VARIANT)
	COM_PutProperty(Mailer, @"ToRecipients", *ToRecipients, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Get_WhichAddress(Mailer.IDispatch, *result.VARIANT)
	COM_GetProperty(Mailer, @"WhichAddress", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Mailer_Put_WhichAddress(Mailer.IDispatch, *WhichAddress.VARIANT)
	COM_PutProperty(Mailer, @"WhichAddress", *WhichAddress, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CustomViews
;- -------------------------
ProcedureDLL.i Excel_CustomViews_Get_Application(CustomViews.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomViews, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomViews_Get_Creator(CustomViews.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomViews, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomViews_Get_Parent(CustomViews.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomViews, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomViews_Get_Count(CustomViews.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomViews, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomViews_Item(CustomViews.IDispatch, *ViewName.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(CustomViews, @"Item", *ViewName, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomViews_Add(CustomViews.IDispatch, ViewName.s, *PrintSettings.VARIANT, *RowColSettings.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*RowColSettings, @args(0))
	COM_VarClone(*PrintSettings, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(ViewName)
	r = COM_CallFunctionDispatch(CustomViews, @"Add", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_CustomViews_Get__Default(CustomViews.IDispatch, *ViewName.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CustomViews, @"_Default", *ViewName, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomViews_Get__NewEnum(CustomViews.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(CustomViews, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CustomView
;- -------------------------
ProcedureDLL.i Excel_CustomView_Get_Application(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomView, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomView_Get_Creator(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomView, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomView_Get_Parent(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomView, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CustomView_Get_Name(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyString(CustomView, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CustomView_Get_PrintSettings(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CustomView, @"PrintSettings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CustomView_Get_RowColSettings(CustomView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CustomView, @"RowColSettings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomView_Show(CustomView.IDispatch)
	COM_CallFunction(CustomView, @"Show", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomView_Delete(CustomView.IDispatch)
	COM_CallFunction(CustomView, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FormatConditions
;- -------------------------
ProcedureDLL.i Excel_FormatConditions_Get_Application(FormatConditions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatConditions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatConditions_Get_Creator(FormatConditions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatConditions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_Get_Parent(FormatConditions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatConditions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatConditions_Get_Count(FormatConditions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatConditions, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_Item(FormatConditions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_Add(FormatConditions.IDispatch, Type.l, *Operator.VARIANT, *Formula1.VARIANT, *Formula2.VARIANT, *String.VARIANT, *TextOperator.VARIANT, *DateOperator.VARIANT, *ScopeType.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*ScopeType, @args(0))
	COM_VarClone(*DateOperator, @args(1))
	COM_VarClone(*TextOperator, @args(2))
	COM_VarClone(*String, @args(3))
	COM_VarClone(*Formula2, @args(4))
	COM_VarClone(*Formula1, @args(5))
	COM_VarClone(*Operator, @args(6))
	args(7)\vt = #VT_I4 : args(7)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"Add", @args(), 8, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_Get__Default(FormatConditions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(FormatConditions, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_Get__NewEnum(FormatConditions.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(FormatConditions, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatConditions_Delete(FormatConditions.IDispatch)
	COM_CallFunction(FormatConditions, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddColorScale(FormatConditions.IDispatch, ColorScaleType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ColorScaleType
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddColorScale", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddDatabar(FormatConditions.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddDatabar", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddIconSetCondition(FormatConditions.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddIconSetCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddTop10(FormatConditions.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddTop10", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddAboveAverage(FormatConditions.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddAboveAverage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatConditions_AddUniqueValues(FormatConditions.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FormatConditions, @"AddUniqueValues", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FormatCondition
;- -------------------------
ProcedureDLL.i Excel_FormatCondition_Get_Application(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_Creator(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatCondition_Get_Parent(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition__Modify(FormatCondition.IDispatch, Type.l, *Operator.VARIANT, *Formula1.VARIANT, *Formula2.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Formula2, @args(0))
	COM_VarClone(*Formula1, @args(1))
	COM_VarClone(*Operator, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Type
	COM_CallFunction(FormatCondition, @"_Modify", @args(), 4, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_Type(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_Operator(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"Operator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FormatCondition_Get_Formula1(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyString(FormatCondition, @"Formula1", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FormatCondition_Get_Formula2(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyString(FormatCondition, @"Formula2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatCondition_Get_Interior(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatCondition_Get_Borders(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatCondition_Get_Font(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Delete(FormatCondition.IDispatch)
	COM_CallFunction(FormatCondition, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Modify(FormatCondition.IDispatch, Type.l, *Operator.VARIANT, *Formula1.VARIANT, *Formula2.VARIANT, *String.VARIANT, *Operator2.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*Operator2, @args(0))
	COM_VarClone(*String, @args(1))
	COM_VarClone(*Formula2, @args(2))
	COM_VarClone(*Formula1, @args(3))
	COM_VarClone(*Operator, @args(4))
	args(5)\vt = #VT_I4 : args(5)\lVal = Type
	COM_CallFunction(FormatCondition, @"Modify", @args(), 6, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FormatCondition_Get_Text(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyString(FormatCondition, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_Text(FormatCondition.IDispatch, Text.s)
	COM_PutPropertyString(FormatCondition, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_TextOperator(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"TextOperator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_TextOperator(FormatCondition.IDispatch, TextOperator.l)
	COM_PutPropertyLong(FormatCondition, @"TextOperator", TextOperator, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_DateOperator(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"DateOperator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_DateOperator(FormatCondition.IDispatch, DateOperator.l)
	COM_PutPropertyLong(FormatCondition, @"DateOperator", DateOperator, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_NumberFormat(FormatCondition.IDispatch, *result.VARIANT)
	COM_GetProperty(FormatCondition, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_NumberFormat(FormatCondition.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(FormatCondition, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_Priority(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_Priority(FormatCondition.IDispatch, Priority.l)
	COM_PutPropertyLong(FormatCondition, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_FormatCondition_Get_StopIfTrue(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(FormatCondition, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_StopIfTrue(FormatCondition.IDispatch, StopIfTrue.w)
	COM_PutPropertyBool(FormatCondition, @"StopIfTrue", StopIfTrue, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatCondition_Get_AppliesTo(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatCondition, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_ModifyAppliesToRange(FormatCondition.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(FormatCondition, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_SetFirstPriority(FormatCondition.IDispatch)
	COM_CallFunction(FormatCondition, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_SetLastPriority(FormatCondition.IDispatch)
	COM_CallFunction(FormatCondition, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_FormatCondition_Get_PTCondition(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(FormatCondition, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Get_ScopeType(FormatCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatCondition, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatCondition_Put_ScopeType(FormatCondition.IDispatch, ScopeType.l)
	COM_PutPropertyLong(FormatCondition, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Comments
;- -------------------------
ProcedureDLL.i Excel_Comments_Get_Application(Comments.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Comments, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Comments_Get_Creator(Comments.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Comments, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comments_Get_Parent(Comments.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Comments, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Comments_Get_Count(Comments.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Comments, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comments_Item(Comments.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(Comments, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comments_Get__Default(Comments.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Comments, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comments_Get__NewEnum(Comments.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Comments, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Comment
;- -------------------------
ProcedureDLL.i Excel_Comment_Get_Application(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Comment, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Comment_Get_Creator(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Comment, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comment_Get_Parent(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Comment, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Comment_Get_Author(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyString(Comment, @"Author", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comment_Get_Shape(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Comment, @"Shape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Comment_Get_Visible(Comment.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Comment, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Comment_Put_Visible(Comment.IDispatch, Visible.w)
	COM_PutPropertyBool(Comment, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Comment_Text(Comment.IDispatch, *Text.VARIANT, *Start.VARIANT, *Overwrite.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Overwrite, @args(0))
	COM_VarClone(*Start, @args(1))
	COM_VarClone(*Text, @args(2))
	ProcedureReturn COM_CallFunctionString(Comment, @"Text", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Comment_Delete(Comment.IDispatch)
	COM_CallFunction(Comment, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comment_Next(Comment.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Comment, @"Next", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Comment_Previous(Comment.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Comment, @"Previous", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_QueryTable
;- -------------------------
ProcedureDLL.i Excel_QueryTable_Get_Application(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_Creator(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_Parent(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_Name(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_Name(QueryTable.IDispatch, Name.s)
	COM_PutPropertyString(QueryTable, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_FieldNames(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"FieldNames", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_FieldNames(QueryTable.IDispatch, FieldNames.w)
	COM_PutPropertyBool(QueryTable, @"FieldNames", FieldNames, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_RowNumbers(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"RowNumbers", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_RowNumbers(QueryTable.IDispatch, RowNumbers.w)
	COM_PutPropertyBool(QueryTable, @"RowNumbers", RowNumbers, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_FillAdjacentFormulas(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"FillAdjacentFormulas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_FillAdjacentFormulas(QueryTable.IDispatch, FillAdjacentFormulas.w)
	COM_PutPropertyBool(QueryTable, @"FillAdjacentFormulas", FillAdjacentFormulas, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_HasAutoFormat(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"HasAutoFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_HasAutoFormat(QueryTable.IDispatch, HasAutoFormat.w)
	COM_PutPropertyBool(QueryTable, @"HasAutoFormat", HasAutoFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_RefreshOnFileOpen(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"RefreshOnFileOpen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_RefreshOnFileOpen(QueryTable.IDispatch, RefreshOnFileOpen.w)
	COM_PutPropertyBool(QueryTable, @"RefreshOnFileOpen", RefreshOnFileOpen, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_Refreshing(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"Refreshing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_FetchedRowOverflow(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"FetchedRowOverflow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_BackgroundQuery(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"BackgroundQuery", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_BackgroundQuery(QueryTable.IDispatch, BackgroundQuery.w)
	COM_PutPropertyBool(QueryTable, @"BackgroundQuery", BackgroundQuery, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_CancelRefresh(QueryTable.IDispatch)
	COM_CallFunction(QueryTable, @"CancelRefresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_RefreshStyle(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"RefreshStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_RefreshStyle(QueryTable.IDispatch, RefreshStyle.l)
	COM_PutPropertyLong(QueryTable, @"RefreshStyle", RefreshStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_EnableRefresh(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"EnableRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_EnableRefresh(QueryTable.IDispatch, EnableRefresh.w)
	COM_PutPropertyBool(QueryTable, @"EnableRefresh", EnableRefresh, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_SavePassword(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"SavePassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_SavePassword(QueryTable.IDispatch, SavePassword.w)
	COM_PutPropertyBool(QueryTable, @"SavePassword", SavePassword, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_Destination(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Destination", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_Connection(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"Connection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_Connection(QueryTable.IDispatch, *Connection.VARIANT)
	COM_PutProperty(QueryTable, @"Connection", *Connection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_Sql(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"Sql", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_Sql(QueryTable.IDispatch, *Sql.VARIANT)
	COM_PutProperty(QueryTable, @"Sql", *Sql, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_PostText(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"PostText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_PostText(QueryTable.IDispatch, PostText.s)
	COM_PutPropertyString(QueryTable, @"PostText", PostText, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_ResultRange(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"ResultRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Delete(QueryTable.IDispatch)
	COM_CallFunction(QueryTable, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Refresh(QueryTable.IDispatch, *BackgroundQuery.VARIANT)
	ProcedureReturn COM_CallFunctionBool(QueryTable, @"Refresh", *BackgroundQuery, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_Parameters(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Parameters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_Recordset(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Recordset", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_Recordset_(QueryTable.IDispatch, Recordset.IDispatch)
	COM_PutPropertyDispatch(QueryTable, @"Recordset", Recordset, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_SaveData(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"SaveData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_SaveData(QueryTable.IDispatch, SaveData.w)
	COM_PutPropertyBool(QueryTable, @"SaveData", SaveData, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TablesOnlyFromHTML(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TablesOnlyFromHTML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TablesOnlyFromHTML(QueryTable.IDispatch, TablesOnlyFromHTML.w)
	COM_PutPropertyBool(QueryTable, @"TablesOnlyFromHTML", TablesOnlyFromHTML, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_EnableEditing(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"EnableEditing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_EnableEditing(QueryTable.IDispatch, EnableEditing.w)
	COM_PutPropertyBool(QueryTable, @"EnableEditing", EnableEditing, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFilePlatform(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"TextFilePlatform", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFilePlatform(QueryTable.IDispatch, TextFilePlatform.l)
	COM_PutPropertyLong(QueryTable, @"TextFilePlatform", TextFilePlatform, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileStartRow(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"TextFileStartRow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileStartRow(QueryTable.IDispatch, TextFileStartRow.l)
	COM_PutPropertyLong(QueryTable, @"TextFileStartRow", TextFileStartRow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileParseType(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"TextFileParseType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileParseType(QueryTable.IDispatch, TextFileParseType.l)
	COM_PutPropertyLong(QueryTable, @"TextFileParseType", TextFileParseType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileTextQualifier(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"TextFileTextQualifier", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileTextQualifier(QueryTable.IDispatch, TextFileTextQualifier.l)
	COM_PutPropertyLong(QueryTable, @"TextFileTextQualifier", TextFileTextQualifier, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileConsecutiveDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileConsecutiveDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileConsecutiveDelimiter(QueryTable.IDispatch, TextFileConsecutiveDelimiter.w)
	COM_PutPropertyBool(QueryTable, @"TextFileConsecutiveDelimiter", TextFileConsecutiveDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileTabDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileTabDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileTabDelimiter(QueryTable.IDispatch, TextFileTabDelimiter.w)
	COM_PutPropertyBool(QueryTable, @"TextFileTabDelimiter", TextFileTabDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileSemicolonDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileSemicolonDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileSemicolonDelimiter(QueryTable.IDispatch, TextFileSemicolonDelimiter.w)
	COM_PutPropertyBool(QueryTable, @"TextFileSemicolonDelimiter", TextFileSemicolonDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileCommaDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileCommaDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileCommaDelimiter(QueryTable.IDispatch, TextFileCommaDelimiter.w)
	COM_PutPropertyBool(QueryTable, @"TextFileCommaDelimiter", TextFileCommaDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileSpaceDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileSpaceDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileSpaceDelimiter(QueryTable.IDispatch, TextFileSpaceDelimiter.w)
	COM_PutPropertyBool(QueryTable, @"TextFileSpaceDelimiter", TextFileSpaceDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_TextFileOtherDelimiter(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"TextFileOtherDelimiter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileOtherDelimiter(QueryTable.IDispatch, TextFileOtherDelimiter.s)
	COM_PutPropertyString(QueryTable, @"TextFileOtherDelimiter", TextFileOtherDelimiter, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileColumnDataTypes(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"TextFileColumnDataTypes", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileColumnDataTypes(QueryTable.IDispatch, *TextFileColumnDataTypes.VARIANT)
	COM_PutProperty(QueryTable, @"TextFileColumnDataTypes", *TextFileColumnDataTypes, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileFixedColumnWidths(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"TextFileFixedColumnWidths", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileFixedColumnWidths(QueryTable.IDispatch, *TextFileFixedColumnWidths.VARIANT)
	COM_PutProperty(QueryTable, @"TextFileFixedColumnWidths", *TextFileFixedColumnWidths, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_PreserveColumnInfo(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"PreserveColumnInfo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_PreserveColumnInfo(QueryTable.IDispatch, PreserveColumnInfo.w)
	COM_PutPropertyBool(QueryTable, @"PreserveColumnInfo", PreserveColumnInfo, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_PreserveFormatting(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"PreserveFormatting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_PreserveFormatting(QueryTable.IDispatch, PreserveFormatting.w)
	COM_PutPropertyBool(QueryTable, @"PreserveFormatting", PreserveFormatting, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_AdjustColumnWidth(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"AdjustColumnWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_AdjustColumnWidth(QueryTable.IDispatch, AdjustColumnWidth.w)
	COM_PutPropertyBool(QueryTable, @"AdjustColumnWidth", AdjustColumnWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_CommandText(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"CommandText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_CommandText(QueryTable.IDispatch, *CommandText.VARIANT)
	COM_PutProperty(QueryTable, @"CommandText", *CommandText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_CommandType(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"CommandType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_CommandType(QueryTable.IDispatch, CommandType.l)
	COM_PutPropertyLong(QueryTable, @"CommandType", CommandType, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFilePromptOnRefresh(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFilePromptOnRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFilePromptOnRefresh(QueryTable.IDispatch, TextFilePromptOnRefresh.w)
	COM_PutPropertyBool(QueryTable, @"TextFilePromptOnRefresh", TextFilePromptOnRefresh, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_QueryType(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"QueryType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_MaintainConnection(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"MaintainConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_MaintainConnection(QueryTable.IDispatch, MaintainConnection.w)
	COM_PutPropertyBool(QueryTable, @"MaintainConnection", MaintainConnection, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_TextFileDecimalSeparator(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"TextFileDecimalSeparator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileDecimalSeparator(QueryTable.IDispatch, TextFileDecimalSeparator.s)
	COM_PutPropertyString(QueryTable, @"TextFileDecimalSeparator", TextFileDecimalSeparator, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_TextFileThousandsSeparator(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"TextFileThousandsSeparator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileThousandsSeparator(QueryTable.IDispatch, TextFileThousandsSeparator.s)
	COM_PutPropertyString(QueryTable, @"TextFileThousandsSeparator", TextFileThousandsSeparator, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_RefreshPeriod(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"RefreshPeriod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_RefreshPeriod(QueryTable.IDispatch, RefreshPeriod.l)
	COM_PutPropertyLong(QueryTable, @"RefreshPeriod", RefreshPeriod, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_ResetTimer(QueryTable.IDispatch)
	COM_CallFunction(QueryTable, @"ResetTimer", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_WebSelectionType(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"WebSelectionType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebSelectionType(QueryTable.IDispatch, WebSelectionType.l)
	COM_PutPropertyLong(QueryTable, @"WebSelectionType", WebSelectionType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_WebFormatting(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"WebFormatting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebFormatting(QueryTable.IDispatch, WebFormatting.l)
	COM_PutPropertyLong(QueryTable, @"WebFormatting", WebFormatting, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_WebTables(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"WebTables", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebTables(QueryTable.IDispatch, WebTables.s)
	COM_PutPropertyString(QueryTable, @"WebTables", WebTables, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_WebPreFormattedTextToColumns(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"WebPreFormattedTextToColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebPreFormattedTextToColumns(QueryTable.IDispatch, WebPreFormattedTextToColumns.w)
	COM_PutPropertyBool(QueryTable, @"WebPreFormattedTextToColumns", WebPreFormattedTextToColumns, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_WebSingleBlockTextImport(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"WebSingleBlockTextImport", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebSingleBlockTextImport(QueryTable.IDispatch, WebSingleBlockTextImport.w)
	COM_PutPropertyBool(QueryTable, @"WebSingleBlockTextImport", WebSingleBlockTextImport, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_WebDisableDateRecognition(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"WebDisableDateRecognition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebDisableDateRecognition(QueryTable.IDispatch, WebDisableDateRecognition.w)
	COM_PutPropertyBool(QueryTable, @"WebDisableDateRecognition", WebDisableDateRecognition, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_WebConsecutiveDelimitersAsOne(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"WebConsecutiveDelimitersAsOne", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebConsecutiveDelimitersAsOne(QueryTable.IDispatch, WebConsecutiveDelimitersAsOne.w)
	COM_PutPropertyBool(QueryTable, @"WebConsecutiveDelimitersAsOne", WebConsecutiveDelimitersAsOne, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_WebDisableRedirections(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"WebDisableRedirections", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_WebDisableRedirections(QueryTable.IDispatch, WebDisableRedirections.w)
	COM_PutPropertyBool(QueryTable, @"WebDisableRedirections", WebDisableRedirections, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_EditWebPage(QueryTable.IDispatch, *result.VARIANT)
	COM_GetProperty(QueryTable, @"EditWebPage", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_EditWebPage(QueryTable.IDispatch, *EditWebPage.VARIANT)
	COM_PutProperty(QueryTable, @"EditWebPage", *EditWebPage, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_SourceConnectionFile(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"SourceConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_SourceConnectionFile(QueryTable.IDispatch, SourceConnectionFile.s)
	COM_PutPropertyString(QueryTable, @"SourceConnectionFile", SourceConnectionFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_QueryTable_Get_SourceDataFile(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyString(QueryTable, @"SourceDataFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_SourceDataFile(QueryTable.IDispatch, SourceDataFile.s)
	COM_PutPropertyString(QueryTable, @"SourceDataFile", SourceDataFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_RobustConnect(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"RobustConnect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_RobustConnect(QueryTable.IDispatch, RobustConnect.l)
	COM_PutPropertyLong(QueryTable, @"RobustConnect", RobustConnect, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_QueryTable_Get_TextFileTrailingMinusNumbers(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(QueryTable, @"TextFileTrailingMinusNumbers", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileTrailingMinusNumbers(QueryTable.IDispatch, TextFileTrailingMinusNumbers.w)
	COM_PutPropertyBool(QueryTable, @"TextFileTrailingMinusNumbers", TextFileTrailingMinusNumbers, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_SaveAsODC(QueryTable.IDispatch, ODCFileName.s, *Description.VARIANT, *Keywords.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Keywords, @args(0))
	COM_VarClone(*Description, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(ODCFileName)
	COM_CallFunction(QueryTable, @"SaveAsODC", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_ListObject(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"ListObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Get_TextFileVisualLayout(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTable, @"TextFileVisualLayout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTable_Put_TextFileVisualLayout(QueryTable.IDispatch, TextFileVisualLayout.l)
	COM_PutPropertyLong(QueryTable, @"TextFileVisualLayout", TextFileVisualLayout, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_WorkbookConnection(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"WorkbookConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTable_Get_Sort(QueryTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTable, @"Sort", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_QueryTables
;- -------------------------
ProcedureDLL.i Excel_QueryTables_Get_Application(QueryTables.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTables, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTables_Get_Creator(QueryTables.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTables, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTables_Get_Parent(QueryTables.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(QueryTables, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_QueryTables_Get_Count(QueryTables.IDispatch)
	ProcedureReturn COM_GetPropertyLong(QueryTables, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTables_Add(QueryTables.IDispatch, *Connection.VARIANT, Destination.IDispatch, *Sql.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Sql, @args(0))
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Destination
	COM_VarClone(*Connection, @args(2))
	ProcedureReturn COM_CallFunctionDispatch(QueryTables, @"Add", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTables_Item(QueryTables.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(QueryTables, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTables_Get__Default(QueryTables.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(QueryTables, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_QueryTables__NewEnum(QueryTables.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(QueryTables, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Parameter
;- -------------------------
ProcedureDLL.i Excel_Parameter_Get_Application(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Parameter, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Get_Creator(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Parameter, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameter_Get_Parent(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Parameter, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Get_DataType(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Parameter, @"DataType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Put_DataType(Parameter.IDispatch, DataType.l)
	COM_PutPropertyLong(Parameter, @"DataType", DataType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Get_Type(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Parameter, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Parameter_Get_PromptString(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyString(Parameter, @"PromptString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Get_Value(Parameter.IDispatch, *result.VARIANT)
	COM_GetProperty(Parameter, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameter_Get_SourceRange(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Parameter, @"SourceRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Parameter_Get_Name(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyString(Parameter, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Put_Name(Parameter.IDispatch, Name.s)
	COM_PutPropertyString(Parameter, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_SetParam(Parameter.IDispatch, Type.l, *Value.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Value, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Type
	COM_CallFunction(Parameter, @"SetParam", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Parameter_Get_RefreshOnChange(Parameter.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Parameter, @"RefreshOnChange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameter_Put_RefreshOnChange(Parameter.IDispatch, RefreshOnChange.w)
	COM_PutPropertyBool(Parameter, @"RefreshOnChange", RefreshOnChange, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Parameters
;- -------------------------
ProcedureDLL.i Excel_Parameters_Get_Application(Parameters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Parameters, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameters_Get_Creator(Parameters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Parameters, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameters_Get_Parent(Parameters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Parameters, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameters_Add(Parameters.IDispatch, Name.s, *iDataType.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*iDataType, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(Parameters, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Parameters_Get_Count(Parameters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Parameters, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameters_Item(Parameters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Parameters, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameters_Get__Default(Parameters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Parameters, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Parameters_Delete(Parameters.IDispatch)
	COM_CallFunction(Parameters, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Parameters__NewEnum(Parameters.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(Parameters, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ODBCError
;- -------------------------
ProcedureDLL.i Excel_ODBCError_Get_Application(ODBCError.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCError, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCError_Get_Creator(ODBCError.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCError, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCError_Get_Parent(ODBCError.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCError, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ODBCError_Get_SqlState(ODBCError.IDispatch)
	ProcedureReturn COM_GetPropertyString(ODBCError, @"SqlState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ODBCError_Get_ErrorString(ODBCError.IDispatch)
	ProcedureReturn COM_GetPropertyString(ODBCError, @"ErrorString", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ODBCErrors
;- -------------------------
ProcedureDLL.i Excel_ODBCErrors_Get_Application(ODBCErrors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCErrors, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCErrors_Get_Creator(ODBCErrors.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCErrors, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCErrors_Get_Parent(ODBCErrors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCErrors, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCErrors_Get_Count(ODBCErrors.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCErrors, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCErrors_Item(ODBCErrors.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(ODBCErrors, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCErrors_Get__Default(ODBCErrors.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(ODBCErrors, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCErrors__NewEnum(ODBCErrors.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(ODBCErrors, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Validation
;- -------------------------
ProcedureDLL.i Excel_Validation_Get_Application(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Validation, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Get_Creator(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Validation, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Validation_Get_Parent(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Validation, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Add(Validation.IDispatch, Type.l, *AlertStyle.VARIANT, *Operator.VARIANT, *Formula1.VARIANT, *Formula2.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Formula2, @args(0))
	COM_VarClone(*Formula1, @args(1))
	COM_VarClone(*Operator, @args(2))
	COM_VarClone(*AlertStyle, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	COM_CallFunction(Validation, @"Add", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Get_AlertStyle(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Validation, @"AlertStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Validation_Get_IgnoreBlank(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Validation, @"IgnoreBlank", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_IgnoreBlank(Validation.IDispatch, IgnoreBlank.w)
	COM_PutPropertyBool(Validation, @"IgnoreBlank", IgnoreBlank, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Get_IMEMode(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Validation, @"IMEMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_IMEMode(Validation.IDispatch, IMEMode.l)
	COM_PutPropertyLong(Validation, @"IMEMode", IMEMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Validation_Get_InCellDropdown(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Validation, @"InCellDropdown", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_InCellDropdown(Validation.IDispatch, InCellDropdown.w)
	COM_PutPropertyBool(Validation, @"InCellDropdown", InCellDropdown, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Delete(Validation.IDispatch)
	COM_CallFunction(Validation, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_ErrorMessage(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"ErrorMessage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_ErrorMessage(Validation.IDispatch, ErrorMessage.s)
	COM_PutPropertyString(Validation, @"ErrorMessage", ErrorMessage, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_ErrorTitle(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"ErrorTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_ErrorTitle(Validation.IDispatch, ErrorTitle.s)
	COM_PutPropertyString(Validation, @"ErrorTitle", ErrorTitle, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_InputMessage(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"InputMessage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_InputMessage(Validation.IDispatch, InputMessage.s)
	COM_PutPropertyString(Validation, @"InputMessage", InputMessage, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_InputTitle(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"InputTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_InputTitle(Validation.IDispatch, InputTitle.s)
	COM_PutPropertyString(Validation, @"InputTitle", InputTitle, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_Formula1(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"Formula1", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Validation_Get_Formula2(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyString(Validation, @"Formula2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Modify(Validation.IDispatch, *Type.VARIANT, *AlertStyle.VARIANT, *Operator.VARIANT, *Formula1.VARIANT, *Formula2.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Formula2, @args(0))
	COM_VarClone(*Formula1, @args(1))
	COM_VarClone(*Operator, @args(2))
	COM_VarClone(*AlertStyle, @args(3))
	COM_VarClone(*Type, @args(4))
	COM_CallFunction(Validation, @"Modify", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Get_Operator(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Validation, @"Operator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Validation_Get_ShowError(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Validation, @"ShowError", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_ShowError(Validation.IDispatch, ShowError.w)
	COM_PutPropertyBool(Validation, @"ShowError", ShowError, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Validation_Get_ShowInput(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Validation, @"ShowInput", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Put_ShowInput(Validation.IDispatch, ShowInput.w)
	COM_PutPropertyBool(Validation, @"ShowInput", ShowInput, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Validation_Get_Type(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Validation, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Validation_Get_Value(Validation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Validation, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Hyperlinks
;- -------------------------
ProcedureDLL.i Excel_Hyperlinks_Get_Application(Hyperlinks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlinks, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlinks_Get_Creator(Hyperlinks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Hyperlinks, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlinks_Get_Parent(Hyperlinks.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlinks, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlinks_Add(Hyperlinks.IDispatch, Anchor.IDispatch, Address.s, *SubAddress.VARIANT, *ScreenTip.VARIANT, *TextToDisplay.VARIANT)
	Dim args.VARIANT(4)
	Protected.i r
	COM_VarClone(*TextToDisplay, @args(0))
	COM_VarClone(*ScreenTip, @args(1))
	COM_VarClone(*SubAddress, @args(2))
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Address)
	args(4)\vt = #VT_DISPATCH : args(4)\pdispVal = Anchor
	r = COM_CallFunctionDispatch(Hyperlinks, @"Add", @args(), 5, @_g_Excel_error)
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Hyperlinks_Get_Count(Hyperlinks.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Hyperlinks, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlinks_Get_Item(Hyperlinks.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlinks, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlinks_Get__Default(Hyperlinks.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlinks, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlinks_Get__NewEnum(Hyperlinks.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Hyperlinks, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlinks_Delete(Hyperlinks.IDispatch)
	COM_CallFunction(Hyperlinks, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Hyperlink
;- -------------------------
ProcedureDLL.i Excel_Hyperlink_Get_Application(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlink, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Get_Creator(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Hyperlink, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlink_Get_Parent(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlink, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_Name(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlink_Get_Range(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlink, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Hyperlink_Get_Shape(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Hyperlink, @"Shape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_SubAddress(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"SubAddress", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Put_SubAddress(Hyperlink.IDispatch, SubAddress.s)
	COM_PutPropertyString(Hyperlink, @"SubAddress", SubAddress, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_Address(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"Address", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Put_Address(Hyperlink.IDispatch, Address.s)
	COM_PutPropertyString(Hyperlink, @"Address", Address, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Get_Type(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Hyperlink, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_AddToFavorites(Hyperlink.IDispatch)
	COM_CallFunction(Hyperlink, @"AddToFavorites", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Delete(Hyperlink.IDispatch)
	COM_CallFunction(Hyperlink, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Follow(Hyperlink.IDispatch, *NewWindow.VARIANT, *AddHistory.VARIANT, *ExtraInfo.VARIANT, *Method.VARIANT, *HeaderInfo.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*HeaderInfo, @args(0))
	COM_VarClone(*Method, @args(1))
	COM_VarClone(*ExtraInfo, @args(2))
	COM_VarClone(*AddHistory, @args(3))
	COM_VarClone(*NewWindow, @args(4))
	COM_CallFunction(Hyperlink, @"Follow", @args(), 5, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_EmailSubject(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"EmailSubject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Put_EmailSubject(Hyperlink.IDispatch, EmailSubject.s)
	COM_PutPropertyString(Hyperlink, @"EmailSubject", EmailSubject, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_ScreenTip(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"ScreenTip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Put_ScreenTip(Hyperlink.IDispatch, ScreenTip.s)
	COM_PutPropertyString(Hyperlink, @"ScreenTip", ScreenTip, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Hyperlink_Get_TextToDisplay(Hyperlink.IDispatch)
	ProcedureReturn COM_GetPropertyString(Hyperlink, @"TextToDisplay", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_Put_TextToDisplay(Hyperlink.IDispatch, TextToDisplay.s)
	COM_PutPropertyString(Hyperlink, @"TextToDisplay", TextToDisplay, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Hyperlink_CreateNewDocument(Hyperlink.IDispatch, Filename.s, EditNow.w, Overwrite.w)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = Overwrite
	args(1)\vt = #VT_BOOL : args(1)\boolVal = EditNow
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Filename)
	COM_CallFunction(Hyperlink, @"CreateNewDocument", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

;- -------------------------
;- Excel_AutoFilter
;- -------------------------
ProcedureDLL.i Excel_AutoFilter_Get_Application(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoFilter, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoFilter_Get_Creator(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AutoFilter, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoFilter_Get_Parent(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoFilter, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoFilter_Get_Range(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoFilter, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoFilter_Get_Filters(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoFilter, @"Filters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoFilter_Get_FilterMode(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoFilter, @"FilterMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoFilter_Get_Sort(AutoFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoFilter, @"Sort", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoFilter_ApplyFilter(AutoFilter.IDispatch)
	COM_CallFunction(AutoFilter, @"ApplyFilter", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoFilter_ShowAllData(AutoFilter.IDispatch)
	COM_CallFunction(AutoFilter, @"ShowAllData", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Filters
;- -------------------------
ProcedureDLL.i Excel_Filters_Get_Application(Filters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Filters, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filters_Get_Creator(Filters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filters, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Filters_Get_Parent(Filters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Filters, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filters_Get_Count(Filters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filters, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Filters_Get__Default(Filters.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Filters, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Filters_Get_Item(Filters.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Filters, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Filters_Get__NewEnum(Filters.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Filters, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Filter
;- -------------------------
ProcedureDLL.i Excel_Filter_Get_Application(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Filter, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get_Creator(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filter, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Filter_Get_Parent(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Filter, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Filter_Get_On(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Filter, @"On", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get_Criteria1(Filter.IDispatch, *result.VARIANT)
	COM_GetProperty(Filter, @"Criteria1", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get__Operator(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filter, @"_Operator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get_Criteria2(Filter.IDispatch, *result.VARIANT)
	COM_GetProperty(Filter, @"Criteria2", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get_Operator(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filter, @"Operator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Put_Operator(Filter.IDispatch, Operator.l)
	COM_PutPropertyLong(Filter, @"Operator", Operator, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Filter_Get_Count(Filter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Filter, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AutoCorrect
;- -------------------------
ProcedureDLL.i Excel_AutoCorrect_Get_Application(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoCorrect, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Get_Creator(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AutoCorrect, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoCorrect_Get_Parent(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoCorrect, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_AddReplacement(AutoCorrect.IDispatch, What.s, Replacement.s, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Replacement)
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(What)
	COM_CallFunction(AutoCorrect, @"AddReplacement", @args(), 2, *result, @_g_Excel_error)
	VariantClear_(@args(0))
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_CapitalizeNamesOfDays(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"CapitalizeNamesOfDays", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_CapitalizeNamesOfDays(AutoCorrect.IDispatch, CapitalizeNamesOfDays.w)
	COM_PutPropertyBool(AutoCorrect, @"CapitalizeNamesOfDays", CapitalizeNamesOfDays, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_DeleteReplacement(AutoCorrect.IDispatch, What.s, *result.VARIANT)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(What)
	COM_CallFunction(AutoCorrect, @"DeleteReplacement", @args(), 1, *result, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Get_ReplacementList(AutoCorrect.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_GetProperty(AutoCorrect, @"ReplacementList", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_ReplacementList(AutoCorrect.IDispatch, *Index.VARIANT, *ReplacementList.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*ReplacementList, @args(0))
	COM_VarClone(*Index, @args(1))
	COM_PutProperty(AutoCorrect, @"ReplacementList", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_ReplaceText(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"ReplaceText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_ReplaceText(AutoCorrect.IDispatch, ReplaceText.w)
	COM_PutPropertyBool(AutoCorrect, @"ReplaceText", ReplaceText, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_TwoInitialCapitals(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"TwoInitialCapitals", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_TwoInitialCapitals(AutoCorrect.IDispatch, TwoInitialCapitals.w)
	COM_PutPropertyBool(AutoCorrect, @"TwoInitialCapitals", TwoInitialCapitals, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_CorrectSentenceCap(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"CorrectSentenceCap", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_CorrectSentenceCap(AutoCorrect.IDispatch, CorrectSentenceCap.w)
	COM_PutPropertyBool(AutoCorrect, @"CorrectSentenceCap", CorrectSentenceCap, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_CorrectCapsLock(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"CorrectCapsLock", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_CorrectCapsLock(AutoCorrect.IDispatch, CorrectCapsLock.w)
	COM_PutPropertyBool(AutoCorrect, @"CorrectCapsLock", CorrectCapsLock, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_DisplayAutoCorrectOptions(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"DisplayAutoCorrectOptions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_DisplayAutoCorrectOptions(AutoCorrect.IDispatch, DisplayAutoCorrectOptions.w)
	COM_PutPropertyBool(AutoCorrect, @"DisplayAutoCorrectOptions", DisplayAutoCorrectOptions, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_AutoExpandListRange(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"AutoExpandListRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_AutoExpandListRange(AutoCorrect.IDispatch, AutoExpandListRange.w)
	COM_PutPropertyBool(AutoCorrect, @"AutoExpandListRange", AutoExpandListRange, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoCorrect_Get_AutoFillFormulasInLists(AutoCorrect.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoCorrect, @"AutoFillFormulasInLists", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoCorrect_Put_AutoFillFormulasInLists(AutoCorrect.IDispatch, AutoFillFormulasInLists.w)
	COM_PutPropertyBool(AutoCorrect, @"AutoFillFormulasInLists", AutoFillFormulasInLists, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Border
;- -------------------------
ProcedureDLL.i Excel_Border_Get_Application(Border.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Border, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_Creator(Border.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Border, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Border_Get_Parent(Border.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Border, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_Color(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_Color(Border.IDispatch, *Color.VARIANT)
	COM_PutProperty(Border, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_ColorIndex(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"ColorIndex", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_ColorIndex(Border.IDispatch, *ColorIndex.VARIANT)
	COM_PutProperty(Border, @"ColorIndex", *ColorIndex, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_LineStyle(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"LineStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_LineStyle(Border.IDispatch, *LineStyle.VARIANT)
	COM_PutProperty(Border, @"LineStyle", *LineStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_Weight(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"Weight", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_Weight(Border.IDispatch, *Weight.VARIANT)
	COM_PutProperty(Border, @"Weight", *Weight, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_ThemeColor(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"ThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_ThemeColor(Border.IDispatch, *ThemeColor.VARIANT)
	COM_PutProperty(Border, @"ThemeColor", *ThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Get_TintAndShade(Border.IDispatch, *result.VARIANT)
	COM_GetProperty(Border, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Border_Put_TintAndShade(Border.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(Border, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Interior
;- -------------------------
ProcedureDLL.i Excel_Interior_Get_Application(Interior.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Interior, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_Creator(Interior.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Interior, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Interior_Get_Parent(Interior.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Interior, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_Color(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_Color(Interior.IDispatch, *Color.VARIANT)
	COM_PutProperty(Interior, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_ColorIndex(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"ColorIndex", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_ColorIndex(Interior.IDispatch, *ColorIndex.VARIANT)
	COM_PutProperty(Interior, @"ColorIndex", *ColorIndex, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_InvertIfNegative(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"InvertIfNegative", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_InvertIfNegative(Interior.IDispatch, *InvertIfNegative.VARIANT)
	COM_PutProperty(Interior, @"InvertIfNegative", *InvertIfNegative, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_Pattern(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"Pattern", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_Pattern(Interior.IDispatch, *Pattern.VARIANT)
	COM_PutProperty(Interior, @"Pattern", *Pattern, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_PatternColor(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"PatternColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_PatternColor(Interior.IDispatch, *PatternColor.VARIANT)
	COM_PutProperty(Interior, @"PatternColor", *PatternColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_PatternColorIndex(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"PatternColorIndex", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_PatternColorIndex(Interior.IDispatch, *PatternColorIndex.VARIANT)
	COM_PutProperty(Interior, @"PatternColorIndex", *PatternColorIndex, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_ThemeColor(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"ThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_ThemeColor(Interior.IDispatch, *ThemeColor.VARIANT)
	COM_PutProperty(Interior, @"ThemeColor", *ThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_TintAndShade(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_TintAndShade(Interior.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(Interior, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_PatternThemeColor(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"PatternThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_PatternThemeColor(Interior.IDispatch, *PatternThemeColor.VARIANT)
	COM_PutProperty(Interior, @"PatternThemeColor", *PatternThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Get_PatternTintAndShade(Interior.IDispatch, *result.VARIANT)
	COM_GetProperty(Interior, @"PatternTintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Interior_Put_PatternTintAndShade(Interior.IDispatch, *PatternTintAndShade.VARIANT)
	COM_PutProperty(Interior, @"PatternTintAndShade", *PatternTintAndShade, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Interior_Get_Gradient(Interior.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Interior, @"Gradient", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Axis
;- -------------------------
ProcedureDLL.i Excel_Axis_Get_Application(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_Creator(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_Parent(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_AxisBetweenCategories(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"AxisBetweenCategories", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_AxisBetweenCategories(Axis.IDispatch, AxisBetweenCategories.w)
	COM_PutPropertyBool(Axis, @"AxisBetweenCategories", AxisBetweenCategories, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_AxisGroup(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"AxisGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_AxisTitle(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"AxisTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_Border(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_CategoryNames(Axis.IDispatch, *result.VARIANT)
	COM_GetProperty(Axis, @"CategoryNames", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_CategoryNames(Axis.IDispatch, *CategoryNames.VARIANT)
	COM_PutProperty(Axis, @"CategoryNames", *CategoryNames, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_Crosses(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"Crosses", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_Crosses(Axis.IDispatch, Crosses.l)
	COM_PutPropertyLong(Axis, @"Crosses", Crosses, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_CrossesAt(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"CrossesAt", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_CrossesAt(Axis.IDispatch, CrossesAt.d)
	COM_PutPropertyDouble(Axis, @"CrossesAt", CrossesAt, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Delete(Axis.IDispatch, *result.VARIANT)
	COM_CallFunction(Axis, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_HasMajorGridlines(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"HasMajorGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_HasMajorGridlines(Axis.IDispatch, HasMajorGridlines.w)
	COM_PutPropertyBool(Axis, @"HasMajorGridlines", HasMajorGridlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_HasMinorGridlines(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"HasMinorGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_HasMinorGridlines(Axis.IDispatch, HasMinorGridlines.w)
	COM_PutPropertyBool(Axis, @"HasMinorGridlines", HasMinorGridlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_HasTitle(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"HasTitle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_HasTitle(Axis.IDispatch, HasTitle.w)
	COM_PutPropertyBool(Axis, @"HasTitle", HasTitle, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_MajorGridlines(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"MajorGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_MajorTickMark(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"MajorTickMark", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MajorTickMark(Axis.IDispatch, MajorTickMark.l)
	COM_PutPropertyLong(Axis, @"MajorTickMark", MajorTickMark, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_MajorUnit(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"MajorUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MajorUnit(Axis.IDispatch, MajorUnit.d)
	COM_PutPropertyDouble(Axis, @"MajorUnit", MajorUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_MajorUnitIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"MajorUnitIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MajorUnitIsAuto(Axis.IDispatch, MajorUnitIsAuto.w)
	COM_PutPropertyBool(Axis, @"MajorUnitIsAuto", MajorUnitIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_MaximumScale(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"MaximumScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MaximumScale(Axis.IDispatch, MaximumScale.d)
	COM_PutPropertyDouble(Axis, @"MaximumScale", MaximumScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_MaximumScaleIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"MaximumScaleIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MaximumScaleIsAuto(Axis.IDispatch, MaximumScaleIsAuto.w)
	COM_PutPropertyBool(Axis, @"MaximumScaleIsAuto", MaximumScaleIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_MinimumScale(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"MinimumScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinimumScale(Axis.IDispatch, MinimumScale.d)
	COM_PutPropertyDouble(Axis, @"MinimumScale", MinimumScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_MinimumScaleIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"MinimumScaleIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinimumScaleIsAuto(Axis.IDispatch, MinimumScaleIsAuto.w)
	COM_PutPropertyBool(Axis, @"MinimumScaleIsAuto", MinimumScaleIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_MinorGridlines(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"MinorGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_MinorTickMark(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"MinorTickMark", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinorTickMark(Axis.IDispatch, MinorTickMark.l)
	COM_PutPropertyLong(Axis, @"MinorTickMark", MinorTickMark, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_MinorUnit(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"MinorUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinorUnit(Axis.IDispatch, MinorUnit.d)
	COM_PutPropertyDouble(Axis, @"MinorUnit", MinorUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_MinorUnitIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"MinorUnitIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinorUnitIsAuto(Axis.IDispatch, MinorUnitIsAuto.w)
	COM_PutPropertyBool(Axis, @"MinorUnitIsAuto", MinorUnitIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_ReversePlotOrder(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"ReversePlotOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_ReversePlotOrder(Axis.IDispatch, ReversePlotOrder.w)
	COM_PutPropertyBool(Axis, @"ReversePlotOrder", ReversePlotOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_ScaleType(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"ScaleType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_ScaleType(Axis.IDispatch, ScaleType.l)
	COM_PutPropertyLong(Axis, @"ScaleType", ScaleType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Select(Axis.IDispatch, *result.VARIANT)
	COM_CallFunction(Axis, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_TickLabelPosition(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"TickLabelPosition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_TickLabelPosition(Axis.IDispatch, TickLabelPosition.l)
	COM_PutPropertyLong(Axis, @"TickLabelPosition", TickLabelPosition, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_TickLabels(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"TickLabels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_TickLabelSpacing(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"TickLabelSpacing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_TickLabelSpacing(Axis.IDispatch, TickLabelSpacing.l)
	COM_PutPropertyLong(Axis, @"TickLabelSpacing", TickLabelSpacing, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_TickMarkSpacing(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"TickMarkSpacing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_TickMarkSpacing(Axis.IDispatch, TickMarkSpacing.l)
	COM_PutPropertyLong(Axis, @"TickMarkSpacing", TickMarkSpacing, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_Type(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_Type(Axis.IDispatch, Type.l)
	COM_PutPropertyLong(Axis, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_BaseUnit(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"BaseUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_BaseUnit(Axis.IDispatch, BaseUnit.l)
	COM_PutPropertyLong(Axis, @"BaseUnit", BaseUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_BaseUnitIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"BaseUnitIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_BaseUnitIsAuto(Axis.IDispatch, BaseUnitIsAuto.w)
	COM_PutPropertyBool(Axis, @"BaseUnitIsAuto", BaseUnitIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_MajorUnitScale(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"MajorUnitScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MajorUnitScale(Axis.IDispatch, MajorUnitScale.l)
	COM_PutPropertyLong(Axis, @"MajorUnitScale", MajorUnitScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_MinorUnitScale(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"MinorUnitScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_MinorUnitScale(Axis.IDispatch, MinorUnitScale.l)
	COM_PutPropertyLong(Axis, @"MinorUnitScale", MinorUnitScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_CategoryType(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"CategoryType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_CategoryType(Axis.IDispatch, CategoryType.l)
	COM_PutPropertyLong(Axis, @"CategoryType", CategoryType, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_Left(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_Top(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_Width(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_Height(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Get_DisplayUnit(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axis, @"DisplayUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_DisplayUnit(Axis.IDispatch, DisplayUnit.l)
	COM_PutPropertyLong(Axis, @"DisplayUnit", DisplayUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_DisplayUnitCustom(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"DisplayUnitCustom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_DisplayUnitCustom(Axis.IDispatch, DisplayUnitCustom.d)
	COM_PutPropertyDouble(Axis, @"DisplayUnitCustom", DisplayUnitCustom, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_HasDisplayUnitLabel(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"HasDisplayUnitLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_HasDisplayUnitLabel(Axis.IDispatch, HasDisplayUnitLabel.w)
	COM_PutPropertyBool(Axis, @"HasDisplayUnitLabel", HasDisplayUnitLabel, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_DisplayUnitLabel(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"DisplayUnitLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Axis_Get_LogBase(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Axis, @"LogBase", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_LogBase(Axis.IDispatch, LogBase.d)
	COM_PutPropertyDouble(Axis, @"LogBase", LogBase, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Axis_Get_TickLabelSpacingIsAuto(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Axis, @"TickLabelSpacingIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axis_Put_TickLabelSpacingIsAuto(Axis.IDispatch, TickLabelSpacingIsAuto.w)
	COM_PutPropertyBool(Axis, @"TickLabelSpacingIsAuto", TickLabelSpacingIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axis_Get_Format(Axis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axis, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartTitle
;- -------------------------
ProcedureDLL.i Excel_ChartTitle_Get_Application(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_Creator(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartTitle, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Parent(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartTitle_Get_Name(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartTitle, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Select(ChartTitle.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartTitle, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Border(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Delete(ChartTitle.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartTitle, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Interior(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Fill(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartTitle_Get_Caption(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartTitle, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Caption(ChartTitle.IDispatch, Caption.s)
	COM_PutPropertyString(ChartTitle, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Characters(ChartTitle.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Font(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_HorizontalAlignment(ChartTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartTitle, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_HorizontalAlignment(ChartTitle.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(ChartTitle, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartTitle_Get_Left(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartTitle, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Left(ChartTitle.IDispatch, Left.d)
	COM_PutPropertyDouble(ChartTitle, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_Orientation(ChartTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartTitle, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Orientation(ChartTitle.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(ChartTitle, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartTitle_Get_Shadow(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartTitle, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Shadow(ChartTitle.IDispatch, Shadow.w)
	COM_PutPropertyBool(ChartTitle, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartTitle_Get_Text(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartTitle, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Text(ChartTitle.IDispatch, Text.s)
	COM_PutPropertyString(ChartTitle, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartTitle_Get_Top(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartTitle, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Top(ChartTitle.IDispatch, Top.d)
	COM_PutPropertyDouble(ChartTitle, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_VerticalAlignment(ChartTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartTitle, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_VerticalAlignment(ChartTitle.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(ChartTitle, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_ReadingOrder(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartTitle, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_ReadingOrder(ChartTitle.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(ChartTitle, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_AutoScaleFont(ChartTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartTitle, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_AutoScaleFont(ChartTitle.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(ChartTitle, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartTitle_Get_IncludeInLayout(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartTitle, @"IncludeInLayout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_IncludeInLayout(ChartTitle.IDispatch, IncludeInLayout.w)
	COM_PutPropertyBool(ChartTitle, @"IncludeInLayout", IncludeInLayout, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Get_Position(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartTitle, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartTitle_Put_Position(ChartTitle.IDispatch, Position.l)
	COM_PutPropertyLong(ChartTitle, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartTitle_Get_Format(ChartTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartTitle, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AxisTitle
;- -------------------------
ProcedureDLL.i Excel_AxisTitle_Get_Application(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_Creator(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AxisTitle, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Parent(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AxisTitle_Get_Name(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(AxisTitle, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Select(AxisTitle.IDispatch, *result.VARIANT)
	COM_CallFunction(AxisTitle, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Border(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Delete(AxisTitle.IDispatch, *result.VARIANT)
	COM_CallFunction(AxisTitle, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Interior(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Fill(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AxisTitle_Get_Caption(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(AxisTitle, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Caption(AxisTitle.IDispatch, Caption.s)
	COM_PutPropertyString(AxisTitle, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Characters(AxisTitle.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Font(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_HorizontalAlignment(AxisTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(AxisTitle, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_HorizontalAlignment(AxisTitle.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(AxisTitle, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_AxisTitle_Get_Left(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(AxisTitle, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Left(AxisTitle.IDispatch, Left.d)
	COM_PutPropertyDouble(AxisTitle, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_Orientation(AxisTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(AxisTitle, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Orientation(AxisTitle.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(AxisTitle, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AxisTitle_Get_Shadow(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AxisTitle, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Shadow(AxisTitle.IDispatch, Shadow.w)
	COM_PutPropertyBool(AxisTitle, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AxisTitle_Get_Text(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyString(AxisTitle, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Text(AxisTitle.IDispatch, Text.s)
	COM_PutPropertyString(AxisTitle, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_AxisTitle_Get_Top(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(AxisTitle, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Top(AxisTitle.IDispatch, Top.d)
	COM_PutPropertyDouble(AxisTitle, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_VerticalAlignment(AxisTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(AxisTitle, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_VerticalAlignment(AxisTitle.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(AxisTitle, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_ReadingOrder(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AxisTitle, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_ReadingOrder(AxisTitle.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(AxisTitle, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_AutoScaleFont(AxisTitle.IDispatch, *result.VARIANT)
	COM_GetProperty(AxisTitle, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_AutoScaleFont(AxisTitle.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(AxisTitle, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AxisTitle_Get_IncludeInLayout(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AxisTitle, @"IncludeInLayout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_IncludeInLayout(AxisTitle.IDispatch, IncludeInLayout.w)
	COM_PutPropertyBool(AxisTitle, @"IncludeInLayout", IncludeInLayout, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Get_Position(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AxisTitle, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AxisTitle_Put_Position(AxisTitle.IDispatch, Position.l)
	COM_PutPropertyLong(AxisTitle, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AxisTitle_Get_Format(AxisTitle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AxisTitle, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartGroup
;- -------------------------
ProcedureDLL.i Excel_ChartGroup_Get_Application(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_Creator(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_Parent(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_AxisGroup(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"AxisGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_AxisGroup(ChartGroup.IDispatch, AxisGroup.l)
	COM_PutPropertyLong(ChartGroup, @"AxisGroup", AxisGroup, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_DoughnutHoleSize(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"DoughnutHoleSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_DoughnutHoleSize(ChartGroup.IDispatch, DoughnutHoleSize.l)
	COM_PutPropertyLong(ChartGroup, @"DoughnutHoleSize", DoughnutHoleSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_DownBars(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"DownBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_DropLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"DropLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_FirstSliceAngle(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"FirstSliceAngle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_FirstSliceAngle(ChartGroup.IDispatch, FirstSliceAngle.l)
	COM_PutPropertyLong(ChartGroup, @"FirstSliceAngle", FirstSliceAngle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_GapWidth(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"GapWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_GapWidth(ChartGroup.IDispatch, GapWidth.l)
	COM_PutPropertyLong(ChartGroup, @"GapWidth", GapWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_HasDropLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"HasDropLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_HasDropLines(ChartGroup.IDispatch, HasDropLines.w)
	COM_PutPropertyBool(ChartGroup, @"HasDropLines", HasDropLines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_HasHiLoLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"HasHiLoLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_HasHiLoLines(ChartGroup.IDispatch, HasHiLoLines.w)
	COM_PutPropertyBool(ChartGroup, @"HasHiLoLines", HasHiLoLines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_HasRadarAxisLabels(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"HasRadarAxisLabels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_HasRadarAxisLabels(ChartGroup.IDispatch, HasRadarAxisLabels.w)
	COM_PutPropertyBool(ChartGroup, @"HasRadarAxisLabels", HasRadarAxisLabels, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_HasSeriesLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"HasSeriesLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_HasSeriesLines(ChartGroup.IDispatch, HasSeriesLines.w)
	COM_PutPropertyBool(ChartGroup, @"HasSeriesLines", HasSeriesLines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_HasUpDownBars(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"HasUpDownBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_HasUpDownBars(ChartGroup.IDispatch, HasUpDownBars.w)
	COM_PutPropertyBool(ChartGroup, @"HasUpDownBars", HasUpDownBars, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_HiLoLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"HiLoLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_Index(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_Overlap(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"Overlap", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_Overlap(ChartGroup.IDispatch, Overlap.l)
	COM_PutPropertyLong(ChartGroup, @"Overlap", Overlap, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_RadarAxisLabels(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"RadarAxisLabels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_SeriesCollection(ChartGroup.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ChartGroup, @"SeriesCollection", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_SeriesLines(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"SeriesLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_SubType(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"SubType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_SubType(ChartGroup.IDispatch, SubType.l)
	COM_PutPropertyLong(ChartGroup, @"SubType", SubType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_Type(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_Type(ChartGroup.IDispatch, Type.l)
	COM_PutPropertyLong(ChartGroup, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroup_Get_UpBars(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroup, @"UpBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_VaryByCategories(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"VaryByCategories", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_VaryByCategories(ChartGroup.IDispatch, VaryByCategories.w)
	COM_PutPropertyBool(ChartGroup, @"VaryByCategories", VaryByCategories, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_SizeRepresents(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"SizeRepresents", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_SizeRepresents(ChartGroup.IDispatch, SizeRepresents.l)
	COM_PutPropertyLong(ChartGroup, @"SizeRepresents", SizeRepresents, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_BubbleScale(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"BubbleScale", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_BubbleScale(ChartGroup.IDispatch, BubbleScale.l)
	COM_PutPropertyLong(ChartGroup, @"BubbleScale", BubbleScale, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_ShowNegativeBubbles(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"ShowNegativeBubbles", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_ShowNegativeBubbles(ChartGroup.IDispatch, ShowNegativeBubbles.w)
	COM_PutPropertyBool(ChartGroup, @"ShowNegativeBubbles", ShowNegativeBubbles, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_SplitType(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"SplitType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_SplitType(ChartGroup.IDispatch, SplitType.l)
	COM_PutPropertyLong(ChartGroup, @"SplitType", SplitType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_SplitValue(ChartGroup.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartGroup, @"SplitValue", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_SplitValue(ChartGroup.IDispatch, *SplitValue.VARIANT)
	COM_PutProperty(ChartGroup, @"SplitValue", *SplitValue, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Get_SecondPlotSize(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroup, @"SecondPlotSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_SecondPlotSize(ChartGroup.IDispatch, SecondPlotSize.l)
	COM_PutPropertyLong(ChartGroup, @"SecondPlotSize", SecondPlotSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartGroup_Get_Has3DShading(ChartGroup.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartGroup, @"Has3DShading", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroup_Put_Has3DShading(ChartGroup.IDispatch, Has3DShading.w)
	COM_PutPropertyBool(ChartGroup, @"Has3DShading", Has3DShading, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartGroups
;- -------------------------
ProcedureDLL.i Excel_ChartGroups_Get_Application(ChartGroups.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroups, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroups_Get_Creator(ChartGroups.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroups, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroups_Get_Parent(ChartGroups.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartGroups, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartGroups_Get_Count(ChartGroups.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartGroups, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroups_Item(ChartGroups.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ChartGroups, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartGroups__NewEnum(ChartGroups.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(ChartGroups, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Axes
;- -------------------------
ProcedureDLL.i Excel_Axes_Get_Application(Axes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axes, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axes_Get_Creator(Axes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axes, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axes_Get_Parent(Axes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Axes, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Axes_Get_Count(Axes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Axes, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axes_Item(Axes.IDispatch, Type.l, AxisGroup.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = AxisGroup
	args(1)\vt = #VT_I4 : args(1)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Axes, @"Item", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axes__NewEnum(Axes.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(Axes, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Axes__Default(Axes.IDispatch, Type.l, AxisGroup.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = AxisGroup
	args(1)\vt = #VT_I4 : args(1)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Axes, @"_Default", @args(), 2, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Points
;- -------------------------
ProcedureDLL.i Excel_Points_Get_Application(Points.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Points, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Points_Get_Creator(Points.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Points, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Points_Get_Parent(Points.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Points, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Points_Get_Count(Points.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Points, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Points_Item(Points.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(Points, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Points__NewEnum(Points.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(Points, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Points__Default(Points.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(Points, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Point
;- -------------------------
ProcedureDLL.i Excel_Point_Get_Application(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_Creator(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_Parent(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point__ApplyDataLabels(Point.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*HasLeaderLines, @args(0))
	COM_VarClone(*AutoText, @args(1))
	COM_VarClone(*LegendKey, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Type
	COM_CallFunction(Point, @"_ApplyDataLabels", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_Border(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_ClearFormats(Point.IDispatch, *result.VARIANT)
	COM_CallFunction(Point, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Copy(Point.IDispatch, *result.VARIANT)
	COM_CallFunction(Point, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_DataLabel(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"DataLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Delete(Point.IDispatch, *result.VARIANT)
	COM_CallFunction(Point, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_Explosion(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"Explosion", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_Explosion(Point.IDispatch, Explosion.l)
	COM_PutPropertyLong(Point, @"Explosion", Explosion, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_HasDataLabel(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"HasDataLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_HasDataLabel(Point.IDispatch, HasDataLabel.w)
	COM_PutPropertyBool(Point, @"HasDataLabel", HasDataLabel, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_Interior(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_InvertIfNegative(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"InvertIfNegative", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_InvertIfNegative(Point.IDispatch, InvertIfNegative.w)
	COM_PutPropertyBool(Point, @"InvertIfNegative", InvertIfNegative, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerBackgroundColor(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerBackgroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerBackgroundColor(Point.IDispatch, MarkerBackgroundColor.l)
	COM_PutPropertyLong(Point, @"MarkerBackgroundColor", MarkerBackgroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerBackgroundColorIndex(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerBackgroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerBackgroundColorIndex(Point.IDispatch, MarkerBackgroundColorIndex.l)
	COM_PutPropertyLong(Point, @"MarkerBackgroundColorIndex", MarkerBackgroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerForegroundColor(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerForegroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerForegroundColor(Point.IDispatch, MarkerForegroundColor.l)
	COM_PutPropertyLong(Point, @"MarkerForegroundColor", MarkerForegroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerForegroundColorIndex(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerForegroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerForegroundColorIndex(Point.IDispatch, MarkerForegroundColorIndex.l)
	COM_PutPropertyLong(Point, @"MarkerForegroundColorIndex", MarkerForegroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerSize(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerSize(Point.IDispatch, MarkerSize.l)
	COM_PutPropertyLong(Point, @"MarkerSize", MarkerSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_MarkerStyle(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"MarkerStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_MarkerStyle(Point.IDispatch, MarkerStyle.l)
	COM_PutPropertyLong(Point, @"MarkerStyle", MarkerStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Paste(Point.IDispatch, *result.VARIANT)
	COM_CallFunction(Point, @"Paste", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_PictureType(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"PictureType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_PictureType(Point.IDispatch, PictureType.l)
	COM_PutPropertyLong(Point, @"PictureType", PictureType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Get_PictureUnit(Point.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Point, @"PictureUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_PictureUnit(Point.IDispatch, PictureUnit.l)
	COM_PutPropertyLong(Point, @"PictureUnit", PictureUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Select(Point.IDispatch, *result.VARIANT)
	COM_CallFunction(Point, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_ApplyPictToSides(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"ApplyPictToSides", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_ApplyPictToSides(Point.IDispatch, ApplyPictToSides.w)
	COM_PutPropertyBool(Point, @"ApplyPictToSides", ApplyPictToSides, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_ApplyPictToFront(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"ApplyPictToFront", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_ApplyPictToFront(Point.IDispatch, ApplyPictToFront.w)
	COM_PutPropertyBool(Point, @"ApplyPictToFront", ApplyPictToFront, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_ApplyPictToEnd(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"ApplyPictToEnd", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_ApplyPictToEnd(Point.IDispatch, ApplyPictToEnd.w)
	COM_PutPropertyBool(Point, @"ApplyPictToEnd", ApplyPictToEnd, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_Shadow(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_Shadow(Point.IDispatch, Shadow.w)
	COM_PutPropertyBool(Point, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_SecondaryPlot(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"SecondaryPlot", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_SecondaryPlot(Point.IDispatch, SecondaryPlot.w)
	COM_PutPropertyBool(Point, @"SecondaryPlot", SecondaryPlot, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_Fill(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_ApplyDataLabels(Point.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT, *ShowSeriesName.VARIANT, *ShowCategoryName.VARIANT, *ShowValue.VARIANT, *ShowPercentage.VARIANT, *ShowBubbleSize.VARIANT, *Separator.VARIANT, *result.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*Separator, @args(0))
	COM_VarClone(*ShowBubbleSize, @args(1))
	COM_VarClone(*ShowPercentage, @args(2))
	COM_VarClone(*ShowValue, @args(3))
	COM_VarClone(*ShowCategoryName, @args(4))
	COM_VarClone(*ShowSeriesName, @args(5))
	COM_VarClone(*HasLeaderLines, @args(6))
	COM_VarClone(*AutoText, @args(7))
	COM_VarClone(*LegendKey, @args(8))
	args(9)\vt = #VT_I4 : args(9)\lVal = Type
	COM_CallFunction(Point, @"ApplyDataLabels", @args(), 10, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Point_Get_Has3DEffect(Point.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Point, @"Has3DEffect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_Has3DEffect(Point.IDispatch, Has3DEffect.w)
	COM_PutPropertyBool(Point, @"Has3DEffect", Has3DEffect, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Point_Get_PictureUnit2(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Point, @"PictureUnit2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Point_Put_PictureUnit2(Point.IDispatch, PictureUnit2.d)
	COM_PutPropertyDouble(Point, @"PictureUnit2", PictureUnit2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Point_Get_Format(Point.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Point, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Series
;- -------------------------
ProcedureDLL.i Excel_Series_Get_Application(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_Creator(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_Parent(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series__ApplyDataLabels(Series.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT, *result.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*HasLeaderLines, @args(0))
	COM_VarClone(*AutoText, @args(1))
	COM_VarClone(*LegendKey, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Type
	COM_CallFunction(Series, @"_ApplyDataLabels", @args(), 4, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_AxisGroup(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"AxisGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_AxisGroup(Series.IDispatch, AxisGroup.l)
	COM_PutPropertyLong(Series, @"AxisGroup", AxisGroup, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_Border(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_ClearFormats(Series.IDispatch, *result.VARIANT)
	COM_CallFunction(Series, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Copy(Series.IDispatch, *result.VARIANT)
	COM_CallFunction(Series, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_DataLabels(Series.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Series, @"DataLabels", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Delete(Series.IDispatch, *result.VARIANT)
	COM_CallFunction(Series, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_ErrorBar(Series.IDispatch, Direction.l, Include.l, Type.l, *Amount.VARIANT, *MinusValues.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*MinusValues, @args(0))
	COM_VarClone(*Amount, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = Type
	args(3)\vt = #VT_I4 : args(3)\lVal = Include
	args(4)\vt = #VT_I4 : args(4)\lVal = Direction
	COM_CallFunction(Series, @"ErrorBar", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_ErrorBars(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"ErrorBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_Explosion(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"Explosion", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Explosion(Series.IDispatch, Explosion.l)
	COM_PutPropertyLong(Series, @"Explosion", Explosion, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Series_Get_Formula(Series.IDispatch)
	ProcedureReturn COM_GetPropertyString(Series, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Formula(Series.IDispatch, Formula.s)
	COM_PutPropertyString(Series, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Series_Get_FormulaLocal(Series.IDispatch)
	ProcedureReturn COM_GetPropertyString(Series, @"FormulaLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_FormulaLocal(Series.IDispatch, FormulaLocal.s)
	COM_PutPropertyString(Series, @"FormulaLocal", FormulaLocal, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Series_Get_FormulaR1C1(Series.IDispatch)
	ProcedureReturn COM_GetPropertyString(Series, @"FormulaR1C1", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_FormulaR1C1(Series.IDispatch, FormulaR1C1.s)
	COM_PutPropertyString(Series, @"FormulaR1C1", FormulaR1C1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Series_Get_FormulaR1C1Local(Series.IDispatch)
	ProcedureReturn COM_GetPropertyString(Series, @"FormulaR1C1Local", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_FormulaR1C1Local(Series.IDispatch, FormulaR1C1Local.s)
	COM_PutPropertyString(Series, @"FormulaR1C1Local", FormulaR1C1Local, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_HasDataLabels(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"HasDataLabels", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_HasDataLabels(Series.IDispatch, HasDataLabels.w)
	COM_PutPropertyBool(Series, @"HasDataLabels", HasDataLabels, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_HasErrorBars(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"HasErrorBars", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_HasErrorBars(Series.IDispatch, HasErrorBars.w)
	COM_PutPropertyBool(Series, @"HasErrorBars", HasErrorBars, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_Interior(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_Fill(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_InvertIfNegative(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"InvertIfNegative", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_InvertIfNegative(Series.IDispatch, InvertIfNegative.w)
	COM_PutPropertyBool(Series, @"InvertIfNegative", InvertIfNegative, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerBackgroundColor(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerBackgroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerBackgroundColor(Series.IDispatch, MarkerBackgroundColor.l)
	COM_PutPropertyLong(Series, @"MarkerBackgroundColor", MarkerBackgroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerBackgroundColorIndex(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerBackgroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerBackgroundColorIndex(Series.IDispatch, MarkerBackgroundColorIndex.l)
	COM_PutPropertyLong(Series, @"MarkerBackgroundColorIndex", MarkerBackgroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerForegroundColor(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerForegroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerForegroundColor(Series.IDispatch, MarkerForegroundColor.l)
	COM_PutPropertyLong(Series, @"MarkerForegroundColor", MarkerForegroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerForegroundColorIndex(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerForegroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerForegroundColorIndex(Series.IDispatch, MarkerForegroundColorIndex.l)
	COM_PutPropertyLong(Series, @"MarkerForegroundColorIndex", MarkerForegroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerSize(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerSize(Series.IDispatch, MarkerSize.l)
	COM_PutPropertyLong(Series, @"MarkerSize", MarkerSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_MarkerStyle(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"MarkerStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_MarkerStyle(Series.IDispatch, MarkerStyle.l)
	COM_PutPropertyLong(Series, @"MarkerStyle", MarkerStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Series_Get_Name(Series.IDispatch)
	ProcedureReturn COM_GetPropertyString(Series, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Name(Series.IDispatch, Name.s)
	COM_PutPropertyString(Series, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Paste(Series.IDispatch, *result.VARIANT)
	COM_CallFunction(Series, @"Paste", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_PictureType(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"PictureType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_PictureType(Series.IDispatch, PictureType.l)
	COM_PutPropertyLong(Series, @"PictureType", PictureType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_PictureUnit(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"PictureUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_PictureUnit(Series.IDispatch, PictureUnit.l)
	COM_PutPropertyLong(Series, @"PictureUnit", PictureUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_PlotOrder(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"PlotOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_PlotOrder(Series.IDispatch, PlotOrder.l)
	COM_PutPropertyLong(Series, @"PlotOrder", PlotOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Points(Series.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Series, @"Points", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Select(Series.IDispatch, *result.VARIANT)
	COM_CallFunction(Series, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_Smooth(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"Smooth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Smooth(Series.IDispatch, Smooth.w)
	COM_PutPropertyBool(Series, @"Smooth", Smooth, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Trendlines(Series.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Series, @"Trendlines", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_Type(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Type(Series.IDispatch, Type.l)
	COM_PutPropertyLong(Series, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_ChartType(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"ChartType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_ChartType(Series.IDispatch, ChartType.l)
	COM_PutPropertyLong(Series, @"ChartType", ChartType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_ApplyCustomType(Series.IDispatch, ChartType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ChartType
	COM_CallFunction(Series, @"ApplyCustomType", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_Values(Series.IDispatch, *result.VARIANT)
	COM_GetProperty(Series, @"Values", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Values(Series.IDispatch, *Values.VARIANT)
	COM_PutProperty(Series, @"Values", *Values, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_XValues(Series.IDispatch, *result.VARIANT)
	COM_GetProperty(Series, @"XValues", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_XValues(Series.IDispatch, *XValues.VARIANT)
	COM_PutProperty(Series, @"XValues", *XValues, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_BubbleSizes(Series.IDispatch, *result.VARIANT)
	COM_GetProperty(Series, @"BubbleSizes", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_BubbleSizes(Series.IDispatch, *BubbleSizes.VARIANT)
	COM_PutProperty(Series, @"BubbleSizes", *BubbleSizes, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Get_BarShape(Series.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Series, @"BarShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_BarShape(Series.IDispatch, BarShape.l)
	COM_PutPropertyLong(Series, @"BarShape", BarShape, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_ApplyPictToSides(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"ApplyPictToSides", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_ApplyPictToSides(Series.IDispatch, ApplyPictToSides.w)
	COM_PutPropertyBool(Series, @"ApplyPictToSides", ApplyPictToSides, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_ApplyPictToFront(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"ApplyPictToFront", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_ApplyPictToFront(Series.IDispatch, ApplyPictToFront.w)
	COM_PutPropertyBool(Series, @"ApplyPictToFront", ApplyPictToFront, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_ApplyPictToEnd(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"ApplyPictToEnd", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_ApplyPictToEnd(Series.IDispatch, ApplyPictToEnd.w)
	COM_PutPropertyBool(Series, @"ApplyPictToEnd", ApplyPictToEnd, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_Has3DEffect(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"Has3DEffect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Has3DEffect(Series.IDispatch, Has3DEffect.w)
	COM_PutPropertyBool(Series, @"Has3DEffect", Has3DEffect, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_Shadow(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_Shadow(Series.IDispatch, Shadow.w)
	COM_PutPropertyBool(Series, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Series_Get_HasLeaderLines(Series.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Series, @"HasLeaderLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_HasLeaderLines(Series.IDispatch, HasLeaderLines.w)
	COM_PutPropertyBool(Series, @"HasLeaderLines", HasLeaderLines, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_LeaderLines(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"LeaderLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_ApplyDataLabels(Series.IDispatch, Type.l, *LegendKey.VARIANT, *AutoText.VARIANT, *HasLeaderLines.VARIANT, *ShowSeriesName.VARIANT, *ShowCategoryName.VARIANT, *ShowValue.VARIANT, *ShowPercentage.VARIANT, *ShowBubbleSize.VARIANT, *Separator.VARIANT, *result.VARIANT)
	Dim args.VARIANT(9)
	COM_VarClone(*Separator, @args(0))
	COM_VarClone(*ShowBubbleSize, @args(1))
	COM_VarClone(*ShowPercentage, @args(2))
	COM_VarClone(*ShowValue, @args(3))
	COM_VarClone(*ShowCategoryName, @args(4))
	COM_VarClone(*ShowSeriesName, @args(5))
	COM_VarClone(*HasLeaderLines, @args(6))
	COM_VarClone(*AutoText, @args(7))
	COM_VarClone(*LegendKey, @args(8))
	args(9)\vt = #VT_I4 : args(9)\lVal = Type
	COM_CallFunction(Series, @"ApplyDataLabels", @args(), 10, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Series_Get_PictureUnit2(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Series, @"PictureUnit2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Series_Put_PictureUnit2(Series.IDispatch, PictureUnit2.d)
	COM_PutPropertyDouble(Series, @"PictureUnit2", PictureUnit2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Series_Get_Format(Series.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Series, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SeriesCollection
;- -------------------------
ProcedureDLL.i Excel_SeriesCollection_Get_Application(SeriesCollection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesCollection, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesCollection_Get_Creator(SeriesCollection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SeriesCollection, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection_Get_Parent(SeriesCollection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesCollection, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection_Add(SeriesCollection.IDispatch, *Source.VARIANT, Rowcol.l, *SeriesLabels.VARIANT, *CategoryLabels.VARIANT, *Replace.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Replace, @args(0))
	COM_VarClone(*CategoryLabels, @args(1))
	COM_VarClone(*SeriesLabels, @args(2))
	args(3)\vt = #VT_I4 : args(3)\lVal = Rowcol
	COM_VarClone(*Source, @args(4))
	ProcedureReturn COM_CallFunctionDispatch(SeriesCollection, @"Add", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesCollection_Get_Count(SeriesCollection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SeriesCollection, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesCollection_Extend(SeriesCollection.IDispatch, *Source.VARIANT, *Rowcol.VARIANT, *CategoryLabels.VARIANT, *result.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*CategoryLabels, @args(0))
	COM_VarClone(*Rowcol, @args(1))
	COM_VarClone(*Source, @args(2))
	COM_CallFunction(SeriesCollection, @"Extend", @args(), 3, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection_Item(SeriesCollection.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(SeriesCollection, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection__NewEnum(SeriesCollection.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(SeriesCollection, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesCollection_Paste(SeriesCollection.IDispatch, Rowcol.l, *SeriesLabels.VARIANT, *CategoryLabels.VARIANT, *Replace.VARIANT, *NewSeries.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*NewSeries, @args(0))
	COM_VarClone(*Replace, @args(1))
	COM_VarClone(*CategoryLabels, @args(2))
	COM_VarClone(*SeriesLabels, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = Rowcol
	COM_CallFunction(SeriesCollection, @"Paste", @args(), 5, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection_NewSeries(SeriesCollection.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(SeriesCollection, @"NewSeries", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesCollection__Default(SeriesCollection.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(SeriesCollection, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DataLabel
;- -------------------------
ProcedureDLL.i Excel_DataLabel_Get_Application(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_Creator(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabel, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Parent(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabel_Get_Name(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabel, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Select(DataLabel.IDispatch, *result.VARIANT)
	COM_CallFunction(DataLabel, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Border(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Delete(DataLabel.IDispatch, *result.VARIANT)
	COM_CallFunction(DataLabel, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Interior(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Fill(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabel_Get_Caption(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabel, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Caption(DataLabel.IDispatch, Caption.s)
	COM_PutPropertyString(DataLabel, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Characters(DataLabel.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Font(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_HorizontalAlignment(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_HorizontalAlignment(DataLabel.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(DataLabel, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_DataLabel_Get_Left(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(DataLabel, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Left(DataLabel.IDispatch, Left.d)
	COM_PutPropertyDouble(DataLabel, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_Orientation(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Orientation(DataLabel.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(DataLabel, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_Shadow(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Shadow(DataLabel.IDispatch, Shadow.w)
	COM_PutPropertyBool(DataLabel, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabel_Get_Text(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabel, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Text(DataLabel.IDispatch, Text.s)
	COM_PutPropertyString(DataLabel, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_DataLabel_Get_Top(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(DataLabel, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Top(DataLabel.IDispatch, Top.d)
	COM_PutPropertyDouble(DataLabel, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_VerticalAlignment(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_VerticalAlignment(DataLabel.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(DataLabel, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_ReadingOrder(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabel, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ReadingOrder(DataLabel.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(DataLabel, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_AutoScaleFont(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_AutoScaleFont(DataLabel.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(DataLabel, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_AutoText(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"AutoText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_AutoText(DataLabel.IDispatch, AutoText.w)
	COM_PutPropertyBool(DataLabel, @"AutoText", AutoText, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabel_Get_NumberFormat(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabel, @"NumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_NumberFormat(DataLabel.IDispatch, NumberFormat.s)
	COM_PutPropertyString(DataLabel, @"NumberFormat", NumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_NumberFormatLinked(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"NumberFormatLinked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_NumberFormatLinked(DataLabel.IDispatch, NumberFormatLinked.w)
	COM_PutPropertyBool(DataLabel, @"NumberFormatLinked", NumberFormatLinked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_NumberFormatLocal(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"NumberFormatLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_NumberFormatLocal(DataLabel.IDispatch, *NumberFormatLocal.VARIANT)
	COM_PutProperty(DataLabel, @"NumberFormatLocal", *NumberFormatLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowLegendKey(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowLegendKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowLegendKey(DataLabel.IDispatch, ShowLegendKey.w)
	COM_PutPropertyBool(DataLabel, @"ShowLegendKey", ShowLegendKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_Type(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"Type", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Type(DataLabel.IDispatch, *Type.VARIANT)
	COM_PutProperty(DataLabel, @"Type", *Type, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_Position(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabel, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Position(DataLabel.IDispatch, Position.l)
	COM_PutPropertyLong(DataLabel, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowSeriesName(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowSeriesName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowSeriesName(DataLabel.IDispatch, ShowSeriesName.w)
	COM_PutPropertyBool(DataLabel, @"ShowSeriesName", ShowSeriesName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowCategoryName(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowCategoryName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowCategoryName(DataLabel.IDispatch, ShowCategoryName.w)
	COM_PutPropertyBool(DataLabel, @"ShowCategoryName", ShowCategoryName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowValue(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowValue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowValue(DataLabel.IDispatch, ShowValue.w)
	COM_PutPropertyBool(DataLabel, @"ShowValue", ShowValue, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowPercentage(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowPercentage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowPercentage(DataLabel.IDispatch, ShowPercentage.w)
	COM_PutPropertyBool(DataLabel, @"ShowPercentage", ShowPercentage, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabel_Get_ShowBubbleSize(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabel, @"ShowBubbleSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_ShowBubbleSize(DataLabel.IDispatch, ShowBubbleSize.w)
	COM_PutPropertyBool(DataLabel, @"ShowBubbleSize", ShowBubbleSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Get_Separator(DataLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabel, @"Separator", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabel_Put_Separator(DataLabel.IDispatch, *Separator.VARIANT)
	COM_PutProperty(DataLabel, @"Separator", *Separator, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabel_Get_Format(DataLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabel, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DataLabels
;- -------------------------
ProcedureDLL.i Excel_DataLabels_Get_Application(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Creator(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabels, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Parent(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabels_Get_Name(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabels, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Select(DataLabels.IDispatch, *result.VARIANT)
	COM_CallFunction(DataLabels, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Border(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Delete(DataLabels.IDispatch, *result.VARIANT)
	COM_CallFunction(DataLabels, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Interior(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Fill(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels__Dummy9(DataLabels.IDispatch)
	COM_CallFunction(DataLabels, @"_Dummy9", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels__Dummy10(DataLabels.IDispatch)
	COM_CallFunction(DataLabels, @"_Dummy10", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Font(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_HorizontalAlignment(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_HorizontalAlignment(DataLabels.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(DataLabels, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels__Dummy13(DataLabels.IDispatch)
	COM_CallFunction(DataLabels, @"_Dummy13", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Orientation(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_Orientation(DataLabels.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(DataLabels, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_Shadow(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_Shadow(DataLabels.IDispatch, Shadow.w)
	COM_PutPropertyBool(DataLabels, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels__Dummy16(DataLabels.IDispatch)
	COM_CallFunction(DataLabels, @"_Dummy16", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels__Dummy17(DataLabels.IDispatch)
	COM_CallFunction(DataLabels, @"_Dummy17", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_VerticalAlignment(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_VerticalAlignment(DataLabels.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(DataLabels, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_ReadingOrder(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabels, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ReadingOrder(DataLabels.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(DataLabels, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_AutoScaleFont(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_AutoScaleFont(DataLabels.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(DataLabels, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_AutoText(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"AutoText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_AutoText(DataLabels.IDispatch, AutoText.w)
	COM_PutPropertyBool(DataLabels, @"AutoText", AutoText, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DataLabels_Get_NumberFormat(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyString(DataLabels, @"NumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_NumberFormat(DataLabels.IDispatch, NumberFormat.s)
	COM_PutPropertyString(DataLabels, @"NumberFormat", NumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_NumberFormatLinked(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"NumberFormatLinked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_NumberFormatLinked(DataLabels.IDispatch, NumberFormatLinked.w)
	COM_PutPropertyBool(DataLabels, @"NumberFormatLinked", NumberFormatLinked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_NumberFormatLocal(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"NumberFormatLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_NumberFormatLocal(DataLabels.IDispatch, *NumberFormatLocal.VARIANT)
	COM_PutProperty(DataLabels, @"NumberFormatLocal", *NumberFormatLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowLegendKey(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowLegendKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowLegendKey(DataLabels.IDispatch, ShowLegendKey.w)
	COM_PutPropertyBool(DataLabels, @"ShowLegendKey", ShowLegendKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Type(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"Type", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_Type(DataLabels.IDispatch, *Type.VARIANT)
	COM_PutProperty(DataLabels, @"Type", *Type, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Position(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabels, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_Position(DataLabels.IDispatch, Position.l)
	COM_PutPropertyLong(DataLabels, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowSeriesName(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowSeriesName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowSeriesName(DataLabels.IDispatch, ShowSeriesName.w)
	COM_PutPropertyBool(DataLabels, @"ShowSeriesName", ShowSeriesName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowCategoryName(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowCategoryName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowCategoryName(DataLabels.IDispatch, ShowCategoryName.w)
	COM_PutPropertyBool(DataLabels, @"ShowCategoryName", ShowCategoryName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowValue(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowValue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowValue(DataLabels.IDispatch, ShowValue.w)
	COM_PutPropertyBool(DataLabels, @"ShowValue", ShowValue, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowPercentage(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowPercentage", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowPercentage(DataLabels.IDispatch, ShowPercentage.w)
	COM_PutPropertyBool(DataLabels, @"ShowPercentage", ShowPercentage, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataLabels_Get_ShowBubbleSize(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataLabels, @"ShowBubbleSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_ShowBubbleSize(DataLabels.IDispatch, ShowBubbleSize.w)
	COM_PutPropertyBool(DataLabels, @"ShowBubbleSize", ShowBubbleSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Separator(DataLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(DataLabels, @"Separator", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Put_Separator(DataLabels.IDispatch, *Separator.VARIANT)
	COM_PutProperty(DataLabels, @"Separator", *Separator, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataLabels_Get_Count(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataLabels, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Item(DataLabels.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(DataLabels, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels__NewEnum(DataLabels.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(DataLabels, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels__Default(DataLabels.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(DataLabels, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataLabels_Get_Format(DataLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataLabels, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LegendEntry
;- -------------------------
ProcedureDLL.i Excel_LegendEntry_Get_Application(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntry, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Get_Creator(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendEntry, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntry_Get_Parent(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntry, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Delete(LegendEntry.IDispatch, *result.VARIANT)
	COM_CallFunction(LegendEntry, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntry_Get_Font(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntry, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Get_Index(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendEntry, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntry_Get_LegendKey(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntry, @"LegendKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Select(LegendEntry.IDispatch, *result.VARIANT)
	COM_CallFunction(LegendEntry, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Get_AutoScaleFont(LegendEntry.IDispatch, *result.VARIANT)
	COM_GetProperty(LegendEntry, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntry_Put_AutoScaleFont(LegendEntry.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(LegendEntry, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendEntry_Get_Left(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendEntry, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendEntry_Get_Top(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendEntry, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendEntry_Get_Width(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendEntry, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendEntry_Get_Height(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendEntry, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntry_Get_Format(LegendEntry.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntry, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LegendEntries
;- -------------------------
ProcedureDLL.i Excel_LegendEntries_Get_Application(LegendEntries.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntries, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntries_Get_Creator(LegendEntries.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendEntries, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntries_Get_Parent(LegendEntries.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendEntries, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendEntries_Get_Count(LegendEntries.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendEntries, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntries_Item(LegendEntries.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(LegendEntries, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntries__NewEnum(LegendEntries.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(LegendEntries, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendEntries__Default(LegendEntries.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(LegendEntries, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LegendKey
;- -------------------------
ProcedureDLL.i Excel_LegendKey_Get_Application(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_Creator(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendKey_Get_Parent(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendKey_Get_Border(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_ClearFormats(LegendKey.IDispatch, *result.VARIANT)
	COM_CallFunction(LegendKey, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Delete(LegendKey.IDispatch, *result.VARIANT)
	COM_CallFunction(LegendKey, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendKey_Get_Interior(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendKey_Get_Fill(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_LegendKey_Get_InvertIfNegative(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyBool(LegendKey, @"InvertIfNegative", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_InvertIfNegative(LegendKey.IDispatch, InvertIfNegative.w)
	COM_PutPropertyBool(LegendKey, @"InvertIfNegative", InvertIfNegative, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerBackgroundColor(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerBackgroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerBackgroundColor(LegendKey.IDispatch, MarkerBackgroundColor.l)
	COM_PutPropertyLong(LegendKey, @"MarkerBackgroundColor", MarkerBackgroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerBackgroundColorIndex(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerBackgroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerBackgroundColorIndex(LegendKey.IDispatch, MarkerBackgroundColorIndex.l)
	COM_PutPropertyLong(LegendKey, @"MarkerBackgroundColorIndex", MarkerBackgroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerForegroundColor(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerForegroundColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerForegroundColor(LegendKey.IDispatch, MarkerForegroundColor.l)
	COM_PutPropertyLong(LegendKey, @"MarkerForegroundColor", MarkerForegroundColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerForegroundColorIndex(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerForegroundColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerForegroundColorIndex(LegendKey.IDispatch, MarkerForegroundColorIndex.l)
	COM_PutPropertyLong(LegendKey, @"MarkerForegroundColorIndex", MarkerForegroundColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerSize(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerSize(LegendKey.IDispatch, MarkerSize.l)
	COM_PutPropertyLong(LegendKey, @"MarkerSize", MarkerSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_MarkerStyle(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"MarkerStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_MarkerStyle(LegendKey.IDispatch, MarkerStyle.l)
	COM_PutPropertyLong(LegendKey, @"MarkerStyle", MarkerStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_PictureType(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"PictureType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_PictureType(LegendKey.IDispatch, PictureType.l)
	COM_PutPropertyLong(LegendKey, @"PictureType", PictureType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Get_PictureUnit(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LegendKey, @"PictureUnit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_PictureUnit(LegendKey.IDispatch, PictureUnit.l)
	COM_PutPropertyLong(LegendKey, @"PictureUnit", PictureUnit, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Select(LegendKey.IDispatch, *result.VARIANT)
	COM_CallFunction(LegendKey, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_LegendKey_Get_Smooth(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyBool(LegendKey, @"Smooth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_Smooth(LegendKey.IDispatch, Smooth.w)
	COM_PutPropertyBool(LegendKey, @"Smooth", Smooth, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendKey_Get_Left(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendKey, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendKey_Get_Top(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendKey, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendKey_Get_Width(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendKey, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendKey_Get_Height(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendKey, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_LegendKey_Get_Shadow(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyBool(LegendKey, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_Shadow(LegendKey.IDispatch, Shadow.w)
	COM_PutPropertyBool(LegendKey, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LegendKey_Get_PictureUnit2(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LegendKey, @"PictureUnit2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LegendKey_Put_PictureUnit2(LegendKey.IDispatch, PictureUnit2.d)
	COM_PutPropertyDouble(LegendKey, @"PictureUnit2", PictureUnit2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LegendKey_Get_Format(LegendKey.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LegendKey, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Trendlines
;- -------------------------
ProcedureDLL.i Excel_Trendlines_Get_Application(Trendlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendlines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendlines_Get_Creator(Trendlines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendlines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendlines_Get_Parent(Trendlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendlines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendlines_Add(Trendlines.IDispatch, Type.l, *Order.VARIANT, *Period.VARIANT, *Forward.VARIANT, *Backward.VARIANT, *Intercept.VARIANT, *DisplayEquation.VARIANT, *DisplayRSquared.VARIANT, *Name.VARIANT)
	Dim args.VARIANT(8)
	COM_VarClone(*Name, @args(0))
	COM_VarClone(*DisplayRSquared, @args(1))
	COM_VarClone(*DisplayEquation, @args(2))
	COM_VarClone(*Intercept, @args(3))
	COM_VarClone(*Backward, @args(4))
	COM_VarClone(*Forward, @args(5))
	COM_VarClone(*Period, @args(6))
	COM_VarClone(*Order, @args(7))
	args(8)\vt = #VT_I4 : args(8)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Trendlines, @"Add", @args(), 9, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendlines_Get_Count(Trendlines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendlines, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendlines_Item(Trendlines.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Trendlines, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendlines__NewEnum(Trendlines.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(Trendlines, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendlines__Default(Trendlines.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Trendlines, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Trendline
;- -------------------------
ProcedureDLL.i Excel_Trendline_Get_Application(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendline, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Creator(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendline_Get_Parent(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendline, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Backward(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Backward", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Backward(Trendline.IDispatch, Backward.l)
	COM_PutPropertyLong(Trendline, @"Backward", Backward, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendline_Get_Border(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendline, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_ClearFormats(Trendline.IDispatch, *result.VARIANT)
	COM_CallFunction(Trendline, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendline_Get_DataLabel(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendline, @"DataLabel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Delete(Trendline.IDispatch, *result.VARIANT)
	COM_CallFunction(Trendline, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Trendline_Get_DisplayEquation(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Trendline, @"DisplayEquation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_DisplayEquation(Trendline.IDispatch, DisplayEquation.w)
	COM_PutPropertyBool(Trendline, @"DisplayEquation", DisplayEquation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Trendline_Get_DisplayRSquared(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Trendline, @"DisplayRSquared", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_DisplayRSquared(Trendline.IDispatch, DisplayRSquared.w)
	COM_PutPropertyBool(Trendline, @"DisplayRSquared", DisplayRSquared, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Forward(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Forward", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Forward(Trendline.IDispatch, Forward.l)
	COM_PutPropertyLong(Trendline, @"Forward", Forward, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Index(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Trendline_Get_Intercept(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Trendline, @"Intercept", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Intercept(Trendline.IDispatch, Intercept.d)
	COM_PutPropertyDouble(Trendline, @"Intercept", Intercept, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Trendline_Get_InterceptIsAuto(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Trendline, @"InterceptIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_InterceptIsAuto(Trendline.IDispatch, InterceptIsAuto.w)
	COM_PutPropertyBool(Trendline, @"InterceptIsAuto", InterceptIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Trendline_Get_Name(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyString(Trendline, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Name(Trendline.IDispatch, Name.s)
	COM_PutPropertyString(Trendline, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Trendline_Get_NameIsAuto(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Trendline, @"NameIsAuto", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_NameIsAuto(Trendline.IDispatch, NameIsAuto.w)
	COM_PutPropertyBool(Trendline, @"NameIsAuto", NameIsAuto, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Order(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Order", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Order(Trendline.IDispatch, Order.l)
	COM_PutPropertyLong(Trendline, @"Order", Order, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Period(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Period", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Period(Trendline.IDispatch, Period.l)
	COM_PutPropertyLong(Trendline, @"Period", Period, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Select(Trendline.IDispatch, *result.VARIANT)
	COM_CallFunction(Trendline, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Get_Type(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Trendline, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Type(Trendline.IDispatch, Type.l)
	COM_PutPropertyLong(Trendline, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Trendline_Get_Backward2(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Trendline, @"Backward2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Backward2(Trendline.IDispatch, Backward2.d)
	COM_PutPropertyDouble(Trendline, @"Backward2", Backward2, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Trendline_Get_Forward2(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Trendline, @"Forward2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Trendline_Put_Forward2(Trendline.IDispatch, Forward2.d)
	COM_PutPropertyDouble(Trendline, @"Forward2", Forward2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Trendline_Get_Format(Trendline.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Trendline, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SeriesLines
;- -------------------------
ProcedureDLL.i Excel_SeriesLines_Get_Application(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesLines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesLines_Get_Creator(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SeriesLines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesLines_Get_Parent(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesLines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SeriesLines_Get_Name(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyString(SeriesLines, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesLines_Select(SeriesLines.IDispatch, *result.VARIANT)
	COM_CallFunction(SeriesLines, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesLines_Get_Border(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesLines, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SeriesLines_Delete(SeriesLines.IDispatch, *result.VARIANT)
	COM_CallFunction(SeriesLines, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SeriesLines_Get_Format(SeriesLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SeriesLines, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_HiLoLines
;- -------------------------
ProcedureDLL.i Excel_HiLoLines_Get_Application(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HiLoLines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HiLoLines_Get_Creator(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(HiLoLines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HiLoLines_Get_Parent(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HiLoLines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_HiLoLines_Get_Name(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyString(HiLoLines, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HiLoLines_Select(HiLoLines.IDispatch, *result.VARIANT)
	COM_CallFunction(HiLoLines, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HiLoLines_Get_Border(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HiLoLines, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HiLoLines_Delete(HiLoLines.IDispatch, *result.VARIANT)
	COM_CallFunction(HiLoLines, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HiLoLines_Get_Format(HiLoLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HiLoLines, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Gridlines
;- -------------------------
ProcedureDLL.i Excel_Gridlines_Get_Application(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Gridlines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Gridlines_Get_Creator(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Gridlines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Gridlines_Get_Parent(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Gridlines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Gridlines_Get_Name(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyString(Gridlines, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Gridlines_Select(Gridlines.IDispatch, *result.VARIANT)
	COM_CallFunction(Gridlines, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Gridlines_Get_Border(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Gridlines, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Gridlines_Delete(Gridlines.IDispatch, *result.VARIANT)
	COM_CallFunction(Gridlines, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Gridlines_Get_Format(Gridlines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Gridlines, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DropLines
;- -------------------------
ProcedureDLL.i Excel_DropLines_Get_Application(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DropLines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DropLines_Get_Creator(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DropLines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DropLines_Get_Parent(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DropLines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DropLines_Get_Name(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyString(DropLines, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DropLines_Select(DropLines.IDispatch, *result.VARIANT)
	COM_CallFunction(DropLines, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DropLines_Get_Border(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DropLines, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DropLines_Delete(DropLines.IDispatch, *result.VARIANT)
	COM_CallFunction(DropLines, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DropLines_Get_Format(DropLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DropLines, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LeaderLines
;- -------------------------
ProcedureDLL.i Excel_LeaderLines_Get_Application(LeaderLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LeaderLines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LeaderLines_Get_Creator(LeaderLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LeaderLines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LeaderLines_Get_Parent(LeaderLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LeaderLines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LeaderLines_Get_Border(LeaderLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LeaderLines, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LeaderLines_Delete(LeaderLines.IDispatch)
	COM_CallFunction(LeaderLines, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LeaderLines_Select(LeaderLines.IDispatch)
	COM_CallFunction(LeaderLines, @"Select", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LeaderLines_Get_Format(LeaderLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LeaderLines, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_UpBars
;- -------------------------
ProcedureDLL.i Excel_UpBars_Get_Application(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UpBars_Get_Creator(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UpBars, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UpBars_Get_Parent(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_UpBars_Get_Name(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyString(UpBars, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UpBars_Select(UpBars.IDispatch, *result.VARIANT)
	COM_CallFunction(UpBars, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UpBars_Get_Border(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UpBars_Delete(UpBars.IDispatch, *result.VARIANT)
	COM_CallFunction(UpBars, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UpBars_Get_Interior(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UpBars_Get_Fill(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UpBars_Get_Format(UpBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UpBars, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DownBars
;- -------------------------
ProcedureDLL.i Excel_DownBars_Get_Application(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DownBars_Get_Creator(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DownBars, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DownBars_Get_Parent(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DownBars_Get_Name(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyString(DownBars, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DownBars_Select(DownBars.IDispatch, *result.VARIANT)
	COM_CallFunction(DownBars, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DownBars_Get_Border(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DownBars_Delete(DownBars.IDispatch, *result.VARIANT)
	COM_CallFunction(DownBars, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DownBars_Get_Interior(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DownBars_Get_Fill(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DownBars_Get_Format(DownBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DownBars, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Floor
;- -------------------------
ProcedureDLL.i Excel_Floor_Get_Application(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Get_Creator(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Floor, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Floor_Get_Parent(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Floor_Get_Name(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyString(Floor, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Select(Floor.IDispatch, *result.VARIANT)
	COM_CallFunction(Floor, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Floor_Get_Border(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_ClearFormats(Floor.IDispatch, *result.VARIANT)
	COM_CallFunction(Floor, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Floor_Get_Interior(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Floor_Get_Fill(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Get_PictureType(Floor.IDispatch, *result.VARIANT)
	COM_GetProperty(Floor, @"PictureType", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Put_PictureType(Floor.IDispatch, *PictureType.VARIANT)
	COM_PutProperty(Floor, @"PictureType", *PictureType, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Paste(Floor.IDispatch)
	COM_CallFunction(Floor, @"Paste", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Get_Thickness(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Floor, @"Thickness", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Floor_Put_Thickness(Floor.IDispatch, Thickness.l)
	COM_PutPropertyLong(Floor, @"Thickness", Thickness, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Floor_Get_Format(Floor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Floor, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Walls
;- -------------------------
ProcedureDLL.i Excel_Walls_Get_Application(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Get_Creator(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Walls, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Walls_Get_Parent(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Walls_Get_Name(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyString(Walls, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Select(Walls.IDispatch, *result.VARIANT)
	COM_CallFunction(Walls, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Walls_Get_Border(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_ClearFormats(Walls.IDispatch, *result.VARIANT)
	COM_CallFunction(Walls, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Walls_Get_Interior(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Walls_Get_Fill(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Get_PictureType(Walls.IDispatch, *result.VARIANT)
	COM_GetProperty(Walls, @"PictureType", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Put_PictureType(Walls.IDispatch, *PictureType.VARIANT)
	COM_PutProperty(Walls, @"PictureType", *PictureType, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Paste(Walls.IDispatch)
	COM_CallFunction(Walls, @"Paste", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Get_PictureUnit(Walls.IDispatch, *result.VARIANT)
	COM_GetProperty(Walls, @"PictureUnit", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Put_PictureUnit(Walls.IDispatch, *PictureUnit.VARIANT)
	COM_PutProperty(Walls, @"PictureUnit", *PictureUnit, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Get_Thickness(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Walls, @"Thickness", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Walls_Put_Thickness(Walls.IDispatch, Thickness.l)
	COM_PutPropertyLong(Walls, @"Thickness", Thickness, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Walls_Get_Format(Walls.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Walls, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TickLabels
;- -------------------------
ProcedureDLL.i Excel_TickLabels_Get_Application(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TickLabels, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_Creator(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TickLabels_Get_Parent(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TickLabels, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Delete(TickLabels.IDispatch, *result.VARIANT)
	COM_CallFunction(TickLabels, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TickLabels_Get_Font(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TickLabels, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TickLabels_Get_Name(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyString(TickLabels, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TickLabels_Get_NumberFormat(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyString(TickLabels, @"NumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_NumberFormat(TickLabels.IDispatch, NumberFormat.s)
	COM_PutPropertyString(TickLabels, @"NumberFormat", NumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TickLabels_Get_NumberFormatLinked(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TickLabels, @"NumberFormatLinked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_NumberFormatLinked(TickLabels.IDispatch, NumberFormatLinked.w)
	COM_PutPropertyBool(TickLabels, @"NumberFormatLinked", NumberFormatLinked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_NumberFormatLocal(TickLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(TickLabels, @"NumberFormatLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_NumberFormatLocal(TickLabels.IDispatch, *NumberFormatLocal.VARIANT)
	COM_PutProperty(TickLabels, @"NumberFormatLocal", *NumberFormatLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_Orientation(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_Orientation(TickLabels.IDispatch, Orientation.l)
	COM_PutPropertyLong(TickLabels, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Select(TickLabels.IDispatch, *result.VARIANT)
	COM_CallFunction(TickLabels, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_ReadingOrder(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_ReadingOrder(TickLabels.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(TickLabels, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_AutoScaleFont(TickLabels.IDispatch, *result.VARIANT)
	COM_GetProperty(TickLabels, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_AutoScaleFont(TickLabels.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(TickLabels, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_Depth(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"Depth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_Offset(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"Offset", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_Offset(TickLabels.IDispatch, Offset.l)
	COM_PutPropertyLong(TickLabels, @"Offset", Offset, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Get_Alignment(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TickLabels, @"Alignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_Alignment(TickLabels.IDispatch, Alignment.l)
	COM_PutPropertyLong(TickLabels, @"Alignment", Alignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TickLabels_Get_MultiLevel(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TickLabels, @"MultiLevel", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TickLabels_Put_MultiLevel(TickLabels.IDispatch, MultiLevel.w)
	COM_PutPropertyBool(TickLabels, @"MultiLevel", MultiLevel, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TickLabels_Get_Format(TickLabels.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TickLabels, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PlotArea
;- -------------------------
ProcedureDLL.i Excel_PlotArea_Get_Application(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Get_Creator(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PlotArea, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PlotArea_Get_Parent(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PlotArea_Get_Name(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyString(PlotArea, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Select(PlotArea.IDispatch, *result.VARIANT)
	COM_CallFunction(PlotArea, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PlotArea_Get_Border(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_ClearFormats(PlotArea.IDispatch, *result.VARIANT)
	COM_CallFunction(PlotArea, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_Height(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_Height(PlotArea.IDispatch, Height.d)
	COM_PutPropertyDouble(PlotArea, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PlotArea_Get_Interior(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PlotArea_Get_Fill(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_Left(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_Left(PlotArea.IDispatch, Left.d)
	COM_PutPropertyDouble(PlotArea, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_Top(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_Top(PlotArea.IDispatch, Top.d)
	COM_PutPropertyDouble(PlotArea, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_Width(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_Width(PlotArea.IDispatch, Width.d)
	COM_PutPropertyDouble(PlotArea, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get__InsideLeft(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"_InsideLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get__InsideTop(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"_InsideTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get__InsideWidth(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"_InsideWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get__InsideHeight(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"_InsideHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_InsideLeft(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"InsideLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_InsideLeft(PlotArea.IDispatch, InsideLeft.d)
	COM_PutPropertyDouble(PlotArea, @"InsideLeft", InsideLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_InsideTop(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"InsideTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_InsideTop(PlotArea.IDispatch, InsideTop.d)
	COM_PutPropertyDouble(PlotArea, @"InsideTop", InsideTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_InsideWidth(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"InsideWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_InsideWidth(PlotArea.IDispatch, InsideWidth.d)
	COM_PutPropertyDouble(PlotArea, @"InsideWidth", InsideWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_PlotArea_Get_InsideHeight(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(PlotArea, @"InsideHeight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_InsideHeight(PlotArea.IDispatch, InsideHeight.d)
	COM_PutPropertyDouble(PlotArea, @"InsideHeight", InsideHeight, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Get_Position(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PlotArea, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PlotArea_Put_Position(PlotArea.IDispatch, Position.l)
	COM_PutPropertyLong(PlotArea, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PlotArea_Get_Format(PlotArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PlotArea, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartArea
;- -------------------------
ProcedureDLL.i Excel_ChartArea_Get_Application(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Get_Creator(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartArea, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Parent(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ChartArea_Get_Name(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyString(ChartArea, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Select(ChartArea.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartArea, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Border(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Clear(ChartArea.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartArea, @"Clear", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_ClearContents(ChartArea.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartArea, @"ClearContents", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Copy(ChartArea.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartArea, @"Copy", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Font(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartArea_Get_Shadow(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartArea, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_Shadow(ChartArea.IDispatch, Shadow.w)
	COM_PutPropertyBool(ChartArea, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_ClearFormats(ChartArea.IDispatch, *result.VARIANT)
	COM_CallFunction(ChartArea, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartArea_Get_Height(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartArea, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_Height(ChartArea.IDispatch, Height.d)
	COM_PutPropertyDouble(ChartArea, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Interior(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Fill(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartArea_Get_Left(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartArea, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_Left(ChartArea.IDispatch, Left.d)
	COM_PutPropertyDouble(ChartArea, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartArea_Get_Top(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartArea, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_Top(ChartArea.IDispatch, Top.d)
	COM_PutPropertyDouble(ChartArea, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ChartArea_Get_Width(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ChartArea, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_Width(ChartArea.IDispatch, Width.d)
	COM_PutPropertyDouble(ChartArea, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Get_AutoScaleFont(ChartArea.IDispatch, *result.VARIANT)
	COM_GetProperty(ChartArea, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_AutoScaleFont(ChartArea.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(ChartArea, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartArea_Get_Format(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartArea, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ChartArea_Get_RoundedCorners(ChartArea.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ChartArea, @"RoundedCorners", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartArea_Put_RoundedCorners(ChartArea.IDispatch, RoundedCorners.w)
	COM_PutPropertyBool(ChartArea, @"RoundedCorners", RoundedCorners, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Legend
;- -------------------------
ProcedureDLL.i Excel_Legend_Get_Application(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Get_Creator(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Legend, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Parent(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Legend_Get_Name(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyString(Legend, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Select(Legend.IDispatch, *result.VARIANT)
	COM_CallFunction(Legend, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Border(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Delete(Legend.IDispatch, *result.VARIANT)
	COM_CallFunction(Legend, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Font(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_LegendEntries(Legend.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Legend, @"LegendEntries", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Get_Position(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Legend, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Position(Legend.IDispatch, Position.l)
	COM_PutPropertyLong(Legend, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Legend_Get_Shadow(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Legend, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Shadow(Legend.IDispatch, Shadow.w)
	COM_PutPropertyBool(Legend, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Clear(Legend.IDispatch, *result.VARIANT)
	COM_CallFunction(Legend, @"Clear", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Legend_Get_Height(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Legend, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Height(Legend.IDispatch, Height.d)
	COM_PutPropertyDouble(Legend, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Interior(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Fill(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Legend_Get_Left(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Legend, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Left(Legend.IDispatch, Left.d)
	COM_PutPropertyDouble(Legend, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Legend_Get_Top(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Legend, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Top(Legend.IDispatch, Top.d)
	COM_PutPropertyDouble(Legend, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_Legend_Get_Width(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(Legend, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_Width(Legend.IDispatch, Width.d)
	COM_PutPropertyDouble(Legend, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Get_AutoScaleFont(Legend.IDispatch, *result.VARIANT)
	COM_GetProperty(Legend, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_AutoScaleFont(Legend.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(Legend, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Legend_Get_IncludeInLayout(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Legend, @"IncludeInLayout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Legend_Put_IncludeInLayout(Legend.IDispatch, IncludeInLayout.w)
	COM_PutPropertyBool(Legend, @"IncludeInLayout", IncludeInLayout, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Legend_Get_Format(Legend.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Legend, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ErrorBars
;- -------------------------
ProcedureDLL.i Excel_ErrorBars_Get_Application(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorBars, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_Get_Creator(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ErrorBars, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ErrorBars_Get_Parent(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorBars, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ErrorBars_Get_Name(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyString(ErrorBars, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_Select(ErrorBars.IDispatch, *result.VARIANT)
	COM_CallFunction(ErrorBars, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ErrorBars_Get_Border(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorBars, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_Delete(ErrorBars.IDispatch, *result.VARIANT)
	COM_CallFunction(ErrorBars, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_ClearFormats(ErrorBars.IDispatch, *result.VARIANT)
	COM_CallFunction(ErrorBars, @"ClearFormats", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_Get_EndStyle(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ErrorBars, @"EndStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorBars_Put_EndStyle(ErrorBars.IDispatch, EndStyle.l)
	COM_PutPropertyLong(ErrorBars, @"EndStyle", EndStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ErrorBars_Get_Format(ErrorBars.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorBars, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DataTable
;- -------------------------
ProcedureDLL.i Excel_DataTable_Get_Application(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataTable, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Get_Creator(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DataTable, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataTable_Get_Parent(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataTable, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataTable_Get_ShowLegendKey(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataTable, @"ShowLegendKey", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Put_ShowLegendKey(DataTable.IDispatch, ShowLegendKey.w)
	COM_PutPropertyBool(DataTable, @"ShowLegendKey", ShowLegendKey, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataTable_Get_HasBorderHorizontal(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataTable, @"HasBorderHorizontal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Put_HasBorderHorizontal(DataTable.IDispatch, HasBorderHorizontal.w)
	COM_PutPropertyBool(DataTable, @"HasBorderHorizontal", HasBorderHorizontal, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataTable_Get_HasBorderVertical(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataTable, @"HasBorderVertical", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Put_HasBorderVertical(DataTable.IDispatch, HasBorderVertical.w)
	COM_PutPropertyBool(DataTable, @"HasBorderVertical", HasBorderVertical, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DataTable_Get_HasBorderOutline(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DataTable, @"HasBorderOutline", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Put_HasBorderOutline(DataTable.IDispatch, HasBorderOutline.w)
	COM_PutPropertyBool(DataTable, @"HasBorderOutline", HasBorderOutline, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataTable_Get_Border(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataTable, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataTable_Get_Font(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataTable, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Select(DataTable.IDispatch)
	COM_CallFunction(DataTable, @"Select", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Delete(DataTable.IDispatch)
	COM_CallFunction(DataTable, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Get_AutoScaleFont(DataTable.IDispatch, *result.VARIANT)
	COM_GetProperty(DataTable, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DataTable_Put_AutoScaleFont(DataTable.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(DataTable, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DataTable_Get_Format(DataTable.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DataTable, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Phonetic
;- -------------------------
ProcedureDLL.i Excel_Phonetic_Get_Application(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetic, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Get_Creator(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetic, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetic_Get_Parent(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetic, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Phonetic_Get_Visible(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Phonetic, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Put_Visible(Phonetic.IDispatch, Visible.w)
	COM_PutPropertyBool(Phonetic, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Get_CharacterType(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetic, @"CharacterType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Put_CharacterType(Phonetic.IDispatch, CharacterType.l)
	COM_PutPropertyLong(Phonetic, @"CharacterType", CharacterType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Get_Alignment(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetic, @"Alignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Put_Alignment(Phonetic.IDispatch, Alignment.l)
	COM_PutPropertyLong(Phonetic, @"Alignment", Alignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetic_Get_Font(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetic, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Phonetic_Get_Text(Phonetic.IDispatch)
	ProcedureReturn COM_GetPropertyString(Phonetic, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetic_Put_Text(Phonetic.IDispatch, Text.s)
	COM_PutPropertyString(Phonetic, @"Text", Text, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Shape
;- -------------------------
ProcedureDLL.i Excel_Shape_Get_Application(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Creator(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Parent(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Apply(Shape.IDispatch)
	COM_CallFunction(Shape, @"Apply", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Delete(Shape.IDispatch)
	COM_CallFunction(Shape, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Duplicate(Shape.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Shape, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Flip(Shape.IDispatch, FlipCmd.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = FlipCmd
	COM_CallFunction(Shape, @"Flip", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_IncrementLeft(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"IncrementLeft", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_IncrementRotation(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"IncrementRotation", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_IncrementTop(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"IncrementTop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_PickUp(Shape.IDispatch)
	COM_CallFunction(Shape, @"PickUp", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_RerouteConnections(Shape.IDispatch)
	COM_CallFunction(Shape, @"RerouteConnections", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_ScaleHeight(Shape.IDispatch, Factor.f, RelativeToOriginalSize.l, *Scale.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Scale, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = RelativeToOriginalSize
	args(2)\vt = #VT_R4 : args(2)\fltVal = Factor
	COM_CallFunction(Shape, @"ScaleHeight", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_ScaleWidth(Shape.IDispatch, Factor.f, RelativeToOriginalSize.l, *Scale.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Scale, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = RelativeToOriginalSize
	args(2)\vt = #VT_R4 : args(2)\fltVal = Factor
	COM_CallFunction(Shape, @"ScaleWidth", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Select(Shape.IDispatch, *Replace.VARIANT)
	COM_CallFunction(Shape, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_SetShapesDefaultProperties(Shape.IDispatch)
	COM_CallFunction(Shape, @"SetShapesDefaultProperties", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Ungroup(Shape.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(Shape, @"Ungroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_ZOrder(Shape.IDispatch, ZOrderCmd.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ZOrderCmd
	COM_CallFunction(Shape, @"ZOrder", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Adjustments(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Adjustments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_TextFrame(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"TextFrame", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_AutoShapeType(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"AutoShapeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_AutoShapeType(Shape.IDispatch, AutoShapeType.l)
	COM_PutPropertyLong(Shape, @"AutoShapeType", AutoShapeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Callout(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Callout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_ConnectionSiteCount(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"ConnectionSiteCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Connector(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Connector", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_ConnectorFormat(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"ConnectorFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Fill(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_GroupItems(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"GroupItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Shape_Get_Height(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Shape, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Height(Shape.IDispatch, Height.f)
	COM_PutPropertyFloat(Shape, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_HorizontalFlip(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"HorizontalFlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Shape_Get_Left(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Shape, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Left(Shape.IDispatch, Left.f)
	COM_PutPropertyFloat(Shape, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Line(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Line", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_LockAspectRatio(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"LockAspectRatio", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_LockAspectRatio(Shape.IDispatch, LockAspectRatio.l)
	COM_PutPropertyLong(Shape, @"LockAspectRatio", LockAspectRatio, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Shape_Get_Name(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyString(Shape, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Name(Shape.IDispatch, Name.s)
	COM_PutPropertyString(Shape, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Nodes(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Nodes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Shape_Get_Rotation(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Shape, @"Rotation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Rotation(Shape.IDispatch, Rotation.f)
	COM_PutPropertyFloat(Shape, @"Rotation", Rotation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_PictureFormat(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"PictureFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Shadow(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_TextEffect(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"TextEffect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_ThreeD(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"ThreeD", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Shape_Get_Top(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Shape, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Top(Shape.IDispatch, Top.f)
	COM_PutPropertyFloat(Shape, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Type(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_VerticalFlip(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"VerticalFlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Vertices(Shape.IDispatch, *result.VARIANT)
	COM_GetProperty(Shape, @"Vertices", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Visible(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Visible(Shape.IDispatch, Visible.l)
	COM_PutPropertyLong(Shape, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Shape_Get_Width(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Shape, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Width(Shape.IDispatch, Width.f)
	COM_PutPropertyFloat(Shape, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_ZOrderPosition(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"ZOrderPosition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Hyperlink(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Hyperlink", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_BlackWhiteMode(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"BlackWhiteMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_BlackWhiteMode(Shape.IDispatch, BlackWhiteMode.l)
	COM_PutPropertyLong(Shape, @"BlackWhiteMode", BlackWhiteMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_DrawingObject(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"DrawingObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Shape_Get_OnAction(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyString(Shape, @"OnAction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_OnAction(Shape.IDispatch, OnAction.s)
	COM_PutPropertyString(Shape, @"OnAction", OnAction, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Shape_Get_Locked(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Shape, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Locked(Shape.IDispatch, Locked.w)
	COM_PutPropertyBool(Shape, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_TopLeftCell(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"TopLeftCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_BottomRightCell(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"BottomRightCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Placement(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Placement", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_Placement(Shape.IDispatch, Placement.l)
	COM_PutPropertyLong(Shape, @"Placement", Placement, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Copy(Shape.IDispatch)
	COM_CallFunction(Shape, @"Copy", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Cut(Shape.IDispatch)
	COM_CallFunction(Shape, @"Cut", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_CopyPicture(Shape.IDispatch, *Appearance.VARIANT, *Format.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Format, @args(0))
	COM_VarClone(*Appearance, @args(1))
	COM_CallFunction(Shape, @"CopyPicture", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_ControlFormat(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"ControlFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_LinkFormat(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"LinkFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_OLEFormat(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"OLEFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_FormControlType(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"FormControlType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Shape_Get_AlternativeText(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyString(Shape, @"AlternativeText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_AlternativeText(Shape.IDispatch, AlternativeText.s)
	COM_PutPropertyString(Shape, @"AlternativeText", AlternativeText, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Script(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Script", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_DiagramNode(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"DiagramNode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_HasDiagramNode(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"HasDiagramNode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Diagram(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Diagram", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_HasDiagram(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"HasDiagram", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_Child(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"Child", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_ParentGroup(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"ParentGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_CanvasItems(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"CanvasItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_ID(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"ID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_CanvasCropLeft(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"CanvasCropLeft", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_CanvasCropTop(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"CanvasCropTop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_CanvasCropRight(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"CanvasCropRight", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_CanvasCropBottom(Shape.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(Shape, @"CanvasCropBottom", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Chart(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Chart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_HasChart(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"HasChart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_TextFrame2(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"TextFrame2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_ShapeStyle(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"ShapeStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_ShapeStyle(Shape.IDispatch, ShapeStyle.l)
	COM_PutPropertyLong(Shape, @"ShapeStyle", ShapeStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Get_BackgroundStyle(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shape, @"BackgroundStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shape_Put_BackgroundStyle(Shape.IDispatch, BackgroundStyle.l)
	COM_PutPropertyLong(Shape, @"BackgroundStyle", BackgroundStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_SoftEdge(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"SoftEdge", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Glow(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Glow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shape_Get_Reflection(Shape.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shape, @"Reflection", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Shapes
;- -------------------------
ProcedureDLL.i Excel_Shapes_Get_Application(Shapes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shapes, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shapes_Get_Creator(Shapes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shapes, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_Get_Parent(Shapes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Shapes, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shapes_Get_Count(Shapes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Shapes, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_Item(Shapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes__Default(Shapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_Get__NewEnum(Shapes.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Shapes, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddCallout(Shapes.IDispatch, Type.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddCallout", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddConnector(Shapes.IDispatch, Type.l, BeginX.f, BeginY.f, EndX.f, EndY.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = EndY
	args(1)\vt = #VT_R4 : args(1)\fltVal = EndX
	args(2)\vt = #VT_R4 : args(2)\fltVal = BeginY
	args(3)\vt = #VT_R4 : args(3)\fltVal = BeginX
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddConnector", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddCurve(Shapes.IDispatch, *SafeArrayOfPoints.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddCurve", *SafeArrayOfPoints, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddLabel(Shapes.IDispatch, Orientation.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Orientation
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddLabel", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddLine(Shapes.IDispatch, BeginX.f, BeginY.f, EndX.f, EndY.f)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R4 : args(0)\fltVal = EndY
	args(1)\vt = #VT_R4 : args(1)\fltVal = EndX
	args(2)\vt = #VT_R4 : args(2)\fltVal = BeginY
	args(3)\vt = #VT_R4 : args(3)\fltVal = BeginX
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddLine", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddPicture(Shapes.IDispatch, Filename.s, LinkToFile.l, SaveWithDocument.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(6)
	Protected.i r
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = SaveWithDocument
	args(5)\vt = #VT_I4 : args(5)\lVal = LinkToFile
	args(6)\vt = #VT_BSTR : args(6)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Shapes, @"AddPicture", @args(), 7, @_g_Excel_error)
	VariantClear_(@args(6))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Shapes_AddPolyline(Shapes.IDispatch, *SafeArrayOfPoints.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddPolyline", *SafeArrayOfPoints, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddShape(Shapes.IDispatch, Type.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddShape", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddTextEffect(Shapes.IDispatch, PresetTextEffect.l, Text.s, FontName.s, FontSize.f, FontBold.l, FontItalic.l, Left.f, Top.f)
	Dim args.VARIANT(7)
	Protected.i r
	args(0)\vt = #VT_R4 : args(0)\fltVal = Top
	args(1)\vt = #VT_R4 : args(1)\fltVal = Left
	args(2)\vt = #VT_I4 : args(2)\lVal = FontItalic
	args(3)\vt = #VT_I4 : args(3)\lVal = FontBold
	args(4)\vt = #VT_R4 : args(4)\fltVal = FontSize
	args(5)\vt = #VT_BSTR : args(5)\bstrVal = SysAllocString_(FontName)
	args(6)\vt = #VT_BSTR : args(6)\bstrVal = SysAllocString_(Text)
	args(7)\vt = #VT_I4 : args(7)\lVal = PresetTextEffect
	r = COM_CallFunctionDispatch(Shapes, @"AddTextEffect", @args(), 8, @_g_Excel_error)
	VariantClear_(@args(5))
	VariantClear_(@args(6))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Shapes_AddTextbox(Shapes.IDispatch, Orientation.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Orientation
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddTextbox", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_BuildFreeform(Shapes.IDispatch, EditingType.l, X1.f, Y1.f)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Y1
	args(1)\vt = #VT_R4 : args(1)\fltVal = X1
	args(2)\vt = #VT_I4 : args(2)\lVal = EditingType
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"BuildFreeform", @args(), 3, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_Get_Range(Shapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Shapes, @"Range", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Shapes_SelectAll(Shapes.IDispatch)
	COM_CallFunction(Shapes, @"SelectAll", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddFormControl(Shapes.IDispatch, Type.l, Left.l, Top.l, Width.l, Height.l)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_I4 : args(0)\lVal = Height
	args(1)\vt = #VT_I4 : args(1)\lVal = Width
	args(2)\vt = #VT_I4 : args(2)\lVal = Top
	args(3)\vt = #VT_I4 : args(3)\lVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddFormControl", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddOLEObject(Shapes.IDispatch, *ClassType.VARIANT, *Filename.VARIANT, *Link.VARIANT, *DisplayAsIcon.VARIANT, *IconFileName.VARIANT, *IconIndex.VARIANT, *IconLabel.VARIANT, *Left.VARIANT, *Top.VARIANT, *Width.VARIANT, *Height.VARIANT)
	Dim args.VARIANT(10)
	COM_VarClone(*Height, @args(0))
	COM_VarClone(*Width, @args(1))
	COM_VarClone(*Top, @args(2))
	COM_VarClone(*Left, @args(3))
	COM_VarClone(*IconLabel, @args(4))
	COM_VarClone(*IconIndex, @args(5))
	COM_VarClone(*IconFileName, @args(6))
	COM_VarClone(*DisplayAsIcon, @args(7))
	COM_VarClone(*Link, @args(8))
	COM_VarClone(*Filename, @args(9))
	COM_VarClone(*ClassType, @args(10))
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddOLEObject", @args(), 11, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddDiagram(Shapes.IDispatch, Type.l, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(4)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	args(4)\vt = #VT_I4 : args(4)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddDiagram", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddCanvas(Shapes.IDispatch, Left.f, Top.f, Width.f, Height.f)
	Dim args.VARIANT(3)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Height
	args(1)\vt = #VT_R4 : args(1)\fltVal = Width
	args(2)\vt = #VT_R4 : args(2)\fltVal = Top
	args(3)\vt = #VT_R4 : args(3)\fltVal = Left
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddCanvas", @args(), 4, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Shapes_AddChart(Shapes.IDispatch, *XlChartType.VARIANT, *Left.VARIANT, *Top.VARIANT, *Width.VARIANT, *Height.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Height, @args(0))
	COM_VarClone(*Width, @args(1))
	COM_VarClone(*Top, @args(2))
	COM_VarClone(*Left, @args(3))
	COM_VarClone(*XlChartType, @args(4))
	ProcedureReturn COM_CallFunctionDispatch(Shapes, @"AddChart", @args(), 5, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ShapeRange
;- -------------------------
ProcedureDLL.i Excel_ShapeRange_Get_Application(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Creator(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Parent(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Count(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Item(ShapeRange.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange__Default(ShapeRange.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get__NewEnum(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ShapeRange, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Align(ShapeRange.IDispatch, AlignCmd.l, RelativeTo.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = RelativeTo
	args(1)\vt = #VT_I4 : args(1)\lVal = AlignCmd
	COM_CallFunction(ShapeRange, @"Align", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Apply(ShapeRange.IDispatch)
	COM_CallFunction(ShapeRange, @"Apply", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Delete(ShapeRange.IDispatch)
	COM_CallFunction(ShapeRange, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Distribute(ShapeRange.IDispatch, DistributeCmd.l, RelativeTo.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = RelativeTo
	args(1)\vt = #VT_I4 : args(1)\lVal = DistributeCmd
	COM_CallFunction(ShapeRange, @"Distribute", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Duplicate(ShapeRange.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"Duplicate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Flip(ShapeRange.IDispatch, FlipCmd.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = FlipCmd
	COM_CallFunction(ShapeRange, @"Flip", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_IncrementLeft(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"IncrementLeft", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_IncrementRotation(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"IncrementRotation", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_IncrementTop(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"IncrementTop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Group(ShapeRange.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"Group", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_PickUp(ShapeRange.IDispatch)
	COM_CallFunction(ShapeRange, @"PickUp", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_RerouteConnections(ShapeRange.IDispatch)
	COM_CallFunction(ShapeRange, @"RerouteConnections", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Regroup(ShapeRange.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"Regroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_ScaleHeight(ShapeRange.IDispatch, Factor.f, RelativeToOriginalSize.l, *Scale.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Scale, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = RelativeToOriginalSize
	args(2)\vt = #VT_R4 : args(2)\fltVal = Factor
	COM_CallFunction(ShapeRange, @"ScaleHeight", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_ScaleWidth(ShapeRange.IDispatch, Factor.f, RelativeToOriginalSize.l, *Scale.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Scale, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = RelativeToOriginalSize
	args(2)\vt = #VT_R4 : args(2)\fltVal = Factor
	COM_CallFunction(ShapeRange, @"ScaleWidth", @args(), 3, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Select(ShapeRange.IDispatch, *Replace.VARIANT)
	COM_CallFunction(ShapeRange, @"Select", *Replace, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_SetShapesDefaultProperties(ShapeRange.IDispatch)
	COM_CallFunction(ShapeRange, @"SetShapesDefaultProperties", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Ungroup(ShapeRange.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(ShapeRange, @"Ungroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_ZOrder(ShapeRange.IDispatch, ZOrderCmd.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = ZOrderCmd
	COM_CallFunction(ShapeRange, @"ZOrder", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Adjustments(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Adjustments", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_TextFrame(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"TextFrame", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_AutoShapeType(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"AutoShapeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_AutoShapeType(ShapeRange.IDispatch, AutoShapeType.l)
	COM_PutPropertyLong(ShapeRange, @"AutoShapeType", AutoShapeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Callout(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Callout", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_ConnectionSiteCount(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"ConnectionSiteCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Connector(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Connector", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_ConnectorFormat(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"ConnectorFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Fill(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_GroupItems(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"GroupItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShapeRange_Get_Height(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShapeRange, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Height(ShapeRange.IDispatch, Height.f)
	COM_PutPropertyFloat(ShapeRange, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_HorizontalFlip(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"HorizontalFlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShapeRange_Get_Left(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShapeRange, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Left(ShapeRange.IDispatch, Left.f)
	COM_PutPropertyFloat(ShapeRange, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Line(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Line", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_LockAspectRatio(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"LockAspectRatio", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_LockAspectRatio(ShapeRange.IDispatch, LockAspectRatio.l)
	COM_PutPropertyLong(ShapeRange, @"LockAspectRatio", LockAspectRatio, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ShapeRange_Get_Name(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyString(ShapeRange, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Name(ShapeRange.IDispatch, Name.s)
	COM_PutPropertyString(ShapeRange, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Nodes(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Nodes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShapeRange_Get_Rotation(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShapeRange, @"Rotation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Rotation(ShapeRange.IDispatch, Rotation.f)
	COM_PutPropertyFloat(ShapeRange, @"Rotation", Rotation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_PictureFormat(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"PictureFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Shadow(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_TextEffect(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"TextEffect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_ThreeD(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"ThreeD", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShapeRange_Get_Top(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShapeRange, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Top(ShapeRange.IDispatch, Top.f)
	COM_PutPropertyFloat(ShapeRange, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Type(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_VerticalFlip(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"VerticalFlip", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Vertices(ShapeRange.IDispatch, *result.VARIANT)
	COM_GetProperty(ShapeRange, @"Vertices", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Visible(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Visible(ShapeRange.IDispatch, Visible.l)
	COM_PutPropertyLong(ShapeRange, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_ShapeRange_Get_Width(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(ShapeRange, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_Width(ShapeRange.IDispatch, Width.f)
	COM_PutPropertyFloat(ShapeRange, @"Width", Width, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_ZOrderPosition(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"ZOrderPosition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_BlackWhiteMode(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"BlackWhiteMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_BlackWhiteMode(ShapeRange.IDispatch, BlackWhiteMode.l)
	COM_PutPropertyLong(ShapeRange, @"BlackWhiteMode", BlackWhiteMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ShapeRange_Get_AlternativeText(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyString(ShapeRange, @"AlternativeText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_AlternativeText(ShapeRange.IDispatch, AlternativeText.s)
	COM_PutPropertyString(ShapeRange, @"AlternativeText", AlternativeText, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_DiagramNode(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"DiagramNode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_HasDiagramNode(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"HasDiagramNode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Diagram(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Diagram", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_HasDiagram(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"HasDiagram", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_Child(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"Child", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_ParentGroup(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"ParentGroup", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_CanvasItems(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"CanvasItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_ID(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"ID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_CanvasCropLeft(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"CanvasCropLeft", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_CanvasCropTop(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"CanvasCropTop", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_CanvasCropRight(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"CanvasCropRight", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_CanvasCropBottom(ShapeRange.IDispatch, Increment.f)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R4 : args(0)\fltVal = Increment
	COM_CallFunction(ShapeRange, @"CanvasCropBottom", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Chart(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Chart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_HasChart(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"HasChart", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_TextFrame2(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"TextFrame2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_ShapeStyle(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"ShapeStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_ShapeStyle(ShapeRange.IDispatch, ShapeStyle.l)
	COM_PutPropertyLong(ShapeRange, @"ShapeStyle", ShapeStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Get_BackgroundStyle(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ShapeRange, @"BackgroundStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ShapeRange_Put_BackgroundStyle(ShapeRange.IDispatch, BackgroundStyle.l)
	COM_PutPropertyLong(ShapeRange, @"BackgroundStyle", BackgroundStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_SoftEdge(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"SoftEdge", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Glow(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Glow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ShapeRange_Get_Reflection(ShapeRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ShapeRange, @"Reflection", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_GroupShapes
;- -------------------------
ProcedureDLL.i Excel_GroupShapes_Get_Application(GroupShapes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(GroupShapes, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_GroupShapes_Get_Creator(GroupShapes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(GroupShapes, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_GroupShapes_Get_Parent(GroupShapes.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(GroupShapes, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_GroupShapes_Get_Count(GroupShapes.IDispatch)
	ProcedureReturn COM_GetPropertyLong(GroupShapes, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_GroupShapes_Item(GroupShapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(GroupShapes, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_GroupShapes__Default(GroupShapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(GroupShapes, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_GroupShapes_Get__NewEnum(GroupShapes.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(GroupShapes, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_GroupShapes_Get_Range(GroupShapes.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(GroupShapes, @"Range", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TextFrame
;- -------------------------
ProcedureDLL.i Excel_TextFrame_Get_Application(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Get_Creator(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame_Get_Parent(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TextFrame, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame_Get_MarginBottom(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame, @"MarginBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_MarginBottom(TextFrame.IDispatch, MarginBottom.f)
	COM_PutPropertyFloat(TextFrame, @"MarginBottom", MarginBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame_Get_MarginLeft(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame, @"MarginLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_MarginLeft(TextFrame.IDispatch, MarginLeft.f)
	COM_PutPropertyFloat(TextFrame, @"MarginLeft", MarginLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame_Get_MarginRight(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame, @"MarginRight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_MarginRight(TextFrame.IDispatch, MarginRight.f)
	COM_PutPropertyFloat(TextFrame, @"MarginRight", MarginRight, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_TextFrame_Get_MarginTop(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(TextFrame, @"MarginTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_MarginTop(TextFrame.IDispatch, MarginTop.f)
	COM_PutPropertyFloat(TextFrame, @"MarginTop", MarginTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Get_Orientation(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_Orientation(TextFrame.IDispatch, Orientation.l)
	COM_PutPropertyLong(TextFrame, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TextFrame_Characters(TextFrame.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_CallFunctionDispatch(TextFrame, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Get_HorizontalAlignment(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame, @"HorizontalAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_HorizontalAlignment(TextFrame.IDispatch, HorizontalAlignment.l)
	COM_PutPropertyLong(TextFrame, @"HorizontalAlignment", HorizontalAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Get_VerticalAlignment(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame, @"VerticalAlignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_VerticalAlignment(TextFrame.IDispatch, VerticalAlignment.l)
	COM_PutPropertyLong(TextFrame, @"VerticalAlignment", VerticalAlignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TextFrame_Get_AutoSize(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TextFrame, @"AutoSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_AutoSize(TextFrame.IDispatch, AutoSize.w)
	COM_PutPropertyBool(TextFrame, @"AutoSize", AutoSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Get_ReadingOrder(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TextFrame, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_ReadingOrder(TextFrame.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(TextFrame, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TextFrame_Get_AutoMargins(TextFrame.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TextFrame, @"AutoMargins", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TextFrame_Put_AutoMargins(TextFrame.IDispatch, AutoMargins.w)
	COM_PutPropertyBool(TextFrame, @"AutoMargins", AutoMargins, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ConnectorFormat
;- -------------------------
ProcedureDLL.i Excel_ConnectorFormat_Get_Application(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConnectorFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_Creator(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ConnectorFormat_Get_Parent(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConnectorFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_BeginConnect(ConnectorFormat.IDispatch, ConnectedShape.IDispatch, ConnectionSite.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = ConnectionSite
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = ConnectedShape
	COM_CallFunction(ConnectorFormat, @"BeginConnect", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_BeginDisconnect(ConnectorFormat.IDispatch)
	COM_CallFunction(ConnectorFormat, @"BeginDisconnect", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_EndConnect(ConnectorFormat.IDispatch, ConnectedShape.IDispatch, ConnectionSite.l)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = ConnectionSite
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = ConnectedShape
	COM_CallFunction(ConnectorFormat, @"EndConnect", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_EndDisconnect(ConnectorFormat.IDispatch)
	COM_CallFunction(ConnectorFormat, @"EndDisconnect", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_BeginConnected(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"BeginConnected", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ConnectorFormat_Get_BeginConnectedShape(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConnectorFormat, @"BeginConnectedShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_BeginConnectionSite(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"BeginConnectionSite", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_EndConnected(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"EndConnected", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ConnectorFormat_Get_EndConnectedShape(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConnectorFormat, @"EndConnectedShape", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_EndConnectionSite(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"EndConnectionSite", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Get_Type(ConnectorFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConnectorFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConnectorFormat_Put_Type(ConnectorFormat.IDispatch, Type.l)
	COM_PutPropertyLong(ConnectorFormat, @"Type", Type, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FreeformBuilder
;- -------------------------
ProcedureDLL.i Excel_FreeformBuilder_Get_Application(FreeformBuilder.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FreeformBuilder, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FreeformBuilder_Get_Creator(FreeformBuilder.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FreeformBuilder, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FreeformBuilder_Get_Parent(FreeformBuilder.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FreeformBuilder, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FreeformBuilder_AddNodes(FreeformBuilder.IDispatch, SegmentType.l, EditingType.l, X1.f, Y1.f, *X2.VARIANT, *Y2.VARIANT, *X3.VARIANT, *Y3.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*Y3, @args(0))
	COM_VarClone(*X3, @args(1))
	COM_VarClone(*Y2, @args(2))
	COM_VarClone(*X2, @args(3))
	args(4)\vt = #VT_R4 : args(4)\fltVal = Y1
	args(5)\vt = #VT_R4 : args(5)\fltVal = X1
	args(6)\vt = #VT_I4 : args(6)\lVal = EditingType
	args(7)\vt = #VT_I4 : args(7)\lVal = SegmentType
	COM_CallFunction(FreeformBuilder, @"AddNodes", @args(), 8, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FreeformBuilder_ConvertToShape(FreeformBuilder.IDispatch)
	ProcedureReturn COM_CallFunctionDispatch(FreeformBuilder, @"ConvertToShape", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ControlFormat
;- -------------------------
ProcedureDLL.i Excel_ControlFormat_Get_Application(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ControlFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_Creator(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ControlFormat_Get_Parent(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ControlFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_AddItem(ControlFormat.IDispatch, Text.s, *Index.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Index, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Text)
	COM_CallFunction(ControlFormat, @"AddItem", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

ProcedureDLL.l Excel_ControlFormat_RemoveAllItems(ControlFormat.IDispatch)
	COM_CallFunction(ControlFormat, @"RemoveAllItems", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_RemoveItem(ControlFormat.IDispatch, Index.l, *Count.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Count, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = Index
	COM_CallFunction(ControlFormat, @"RemoveItem", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_DropDownLines(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"DropDownLines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_DropDownLines(ControlFormat.IDispatch, DropDownLines.l)
	COM_PutPropertyLong(ControlFormat, @"DropDownLines", DropDownLines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ControlFormat_Get_Enabled(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ControlFormat, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_Enabled(ControlFormat.IDispatch, Enabled.w)
	COM_PutPropertyBool(ControlFormat, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_LargeChange(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"LargeChange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_LargeChange(ControlFormat.IDispatch, LargeChange.l)
	COM_PutPropertyLong(ControlFormat, @"LargeChange", LargeChange, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ControlFormat_Get_LinkedCell(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(ControlFormat, @"LinkedCell", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_LinkedCell(ControlFormat.IDispatch, LinkedCell.s)
	COM_PutPropertyString(ControlFormat, @"LinkedCell", LinkedCell, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_List(ControlFormat.IDispatch, *Index.VARIANT, *result.VARIANT)
	COM_CallFunction(ControlFormat, @"List", *Index, 1, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_ListCount(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"ListCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_ListCount(ControlFormat.IDispatch, ListCount.l)
	COM_PutPropertyLong(ControlFormat, @"ListCount", ListCount, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ControlFormat_Get_ListFillRange(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(ControlFormat, @"ListFillRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_ListFillRange(ControlFormat.IDispatch, ListFillRange.s)
	COM_PutPropertyString(ControlFormat, @"ListFillRange", ListFillRange, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_ListIndex(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"ListIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_ListIndex(ControlFormat.IDispatch, ListIndex.l)
	COM_PutPropertyLong(ControlFormat, @"ListIndex", ListIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ControlFormat_Get_LockedText(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ControlFormat, @"LockedText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_LockedText(ControlFormat.IDispatch, LockedText.w)
	COM_PutPropertyBool(ControlFormat, @"LockedText", LockedText, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_Max(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"Max", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_Max(ControlFormat.IDispatch, Max.l)
	COM_PutPropertyLong(ControlFormat, @"Max", Max, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_Min(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"Min", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_Min(ControlFormat.IDispatch, Min.l)
	COM_PutPropertyLong(ControlFormat, @"Min", Min, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_MultiSelect(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"MultiSelect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_MultiSelect(ControlFormat.IDispatch, MultiSelect.l)
	COM_PutPropertyLong(ControlFormat, @"MultiSelect", MultiSelect, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ControlFormat_Get_PrintObject(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ControlFormat, @"PrintObject", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_PrintObject(ControlFormat.IDispatch, PrintObject.w)
	COM_PutPropertyBool(ControlFormat, @"PrintObject", PrintObject, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_SmallChange(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"SmallChange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_SmallChange(ControlFormat.IDispatch, SmallChange.l)
	COM_PutPropertyLong(ControlFormat, @"SmallChange", SmallChange, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get__Default(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put__Default(ControlFormat.IDispatch, _Default.l)
	COM_PutPropertyLong(ControlFormat, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Get_Value(ControlFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ControlFormat, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ControlFormat_Put_Value(ControlFormat.IDispatch, Value.l)
	COM_PutPropertyLong(ControlFormat, @"Value", Value, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEFormat
;- -------------------------
ProcedureDLL.i Excel_OLEFormat_Get_Application(OLEFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEFormat_Get_Creator(OLEFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEFormat_Get_Parent(OLEFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEFormat_Activate(OLEFormat.IDispatch)
	COM_CallFunction(OLEFormat, @"Activate", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEFormat_Get_Object(OLEFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEFormat, @"Object", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEFormat_Get_progID(OLEFormat.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEFormat, @"progID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEFormat_Verb(OLEFormat.IDispatch, *Verb.VARIANT)
	COM_CallFunction(OLEFormat, @"Verb", *Verb, 1, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LinkFormat
;- -------------------------
ProcedureDLL.i Excel_LinkFormat_Get_Application(LinkFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LinkFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinkFormat_Get_Creator(LinkFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LinkFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LinkFormat_Get_Parent(LinkFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LinkFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_LinkFormat_Get_AutoUpdate(LinkFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(LinkFormat, @"AutoUpdate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinkFormat_Put_AutoUpdate(LinkFormat.IDispatch, AutoUpdate.w)
	COM_PutPropertyBool(LinkFormat, @"AutoUpdate", AutoUpdate, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_LinkFormat_Get_Locked(LinkFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(LinkFormat, @"Locked", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinkFormat_Put_Locked(LinkFormat.IDispatch, Locked.w)
	COM_PutPropertyBool(LinkFormat, @"Locked", Locked, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinkFormat_Update(LinkFormat.IDispatch)
	COM_CallFunction(LinkFormat, @"Update", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PublishObjects
;- -------------------------
ProcedureDLL.i Excel_PublishObjects_Get_Application(PublishObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PublishObjects, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObjects_Get_Creator(PublishObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PublishObjects, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObjects_Get_Parent(PublishObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PublishObjects, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObjects_Add(PublishObjects.IDispatch, SourceType.l, Filename.s, *Sheet.VARIANT, *Source.VARIANT, *HtmlType.VARIANT, *DivID.VARIANT, *Title.VARIANT)
	Dim args.VARIANT(6)
	Protected.i r
	COM_VarClone(*Title, @args(0))
	COM_VarClone(*DivID, @args(1))
	COM_VarClone(*HtmlType, @args(2))
	COM_VarClone(*Source, @args(3))
	COM_VarClone(*Sheet, @args(4))
	args(5)\vt = #VT_BSTR : args(5)\bstrVal = SysAllocString_(Filename)
	args(6)\vt = #VT_I4 : args(6)\lVal = SourceType
	r = COM_CallFunctionDispatch(PublishObjects, @"Add", @args(), 7, @_g_Excel_error)
	VariantClear_(@args(5))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_PublishObjects_Get_Count(PublishObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PublishObjects, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObjects_Get_Item(PublishObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PublishObjects, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObjects_Get__Default(PublishObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PublishObjects, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PublishObjects_Get__NewEnum(PublishObjects.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(PublishObjects, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObjects_Delete(PublishObjects.IDispatch)
	COM_CallFunction(PublishObjects, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PublishObjects_Publish(PublishObjects.IDispatch)
	COM_CallFunction(PublishObjects, @"Publish", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEDBError
;- -------------------------
ProcedureDLL.i Excel_OLEDBError_Get_Application(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBError, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBError_Get_Creator(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBError, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBError_Get_Parent(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBError, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEDBError_Get_SqlState(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEDBError, @"SqlState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEDBError_Get_ErrorString(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEDBError, @"ErrorString", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBError_Get_Native(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBError, @"Native", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBError_Get_Number(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBError, @"Number", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBError_Get_Stage(OLEDBError.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBError, @"Stage", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEDBErrors
;- -------------------------
ProcedureDLL.i Excel_OLEDBErrors_Get_Application(OLEDBErrors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBErrors, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBErrors_Get_Creator(OLEDBErrors.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBErrors, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBErrors_Get_Parent(OLEDBErrors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBErrors, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBErrors_Get_Count(OLEDBErrors.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBErrors, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBErrors_Item(OLEDBErrors.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(OLEDBErrors, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBErrors_Get__Default(OLEDBErrors.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(OLEDBErrors, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBErrors__NewEnum(OLEDBErrors.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(OLEDBErrors, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Phonetics
;- -------------------------
ProcedureDLL.i Excel_Phonetics_Get_Application(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetics, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_Creator(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetics_Get_Parent(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetics, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_Count(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_Start(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"Start", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_Length(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"Length", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Phonetics_Get_Visible(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Phonetics, @"Visible", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Put_Visible(Phonetics.IDispatch, Visible.w)
	COM_PutPropertyBool(Phonetics, @"Visible", Visible, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_CharacterType(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"CharacterType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Put_CharacterType(Phonetics.IDispatch, CharacterType.l)
	COM_PutPropertyLong(Phonetics, @"CharacterType", CharacterType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Get_Alignment(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Phonetics, @"Alignment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Put_Alignment(Phonetics.IDispatch, Alignment.l)
	COM_PutPropertyLong(Phonetics, @"Alignment", Alignment, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetics_Get_Font(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Phonetics, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetics_Get_Item(Phonetics.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Phonetics, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Delete(Phonetics.IDispatch)
	COM_CallFunction(Phonetics, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Add(Phonetics.IDispatch, Start.l, Length.l, Text.s)
	Dim args.VARIANT(2)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Text)
	args(1)\vt = #VT_I4 : args(1)\lVal = Length
	args(2)\vt = #VT_I4 : args(2)\lVal = Start
	COM_CallFunction(Phonetics, @"Add", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.s Excel_Phonetics_Get_Text(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyString(Phonetics, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Phonetics_Put_Text(Phonetics.IDispatch, Text.s)
	COM_PutPropertyString(Phonetics, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetics_Get__Default(Phonetics.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(Phonetics, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Phonetics_Get__NewEnum(Phonetics.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Phonetics, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotLayout
;- -------------------------
ProcedureDLL.i Excel_PivotLayout_Get_Application(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLayout_Get_Creator(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLayout, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_Parent(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_ColumnFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"ColumnFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_DataFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"DataFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_PageFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"PageFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_RowFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"RowFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_HiddenFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"HiddenFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_VisibleFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"VisibleFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_PivotFields(PivotLayout.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"PivotFields", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_CubeFields(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"CubeFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_PivotCache(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"PivotCache", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLayout_Get_PivotTable(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLayout, @"PivotTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotLayout_Get_InnerDetail(PivotLayout.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotLayout, @"InnerDetail", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLayout_Put_InnerDetail(PivotLayout.IDispatch, InnerDetail.s)
	COM_PutPropertyString(PivotLayout, @"InnerDetail", InnerDetail, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLayout_AddFields(PivotLayout.IDispatch, *RowFields.VARIANT, *ColumnFields.VARIANT, *PageFields.VARIANT, *AppendField.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*AppendField, @args(0))
	COM_VarClone(*PageFields, @args(1))
	COM_VarClone(*ColumnFields, @args(2))
	COM_VarClone(*RowFields, @args(3))
	COM_CallFunction(PivotLayout, @"AddFields", @args(), 4, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DisplayUnitLabel
;- -------------------------
ProcedureDLL.i Excel_DisplayUnitLabel_Get_Application(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_Creator(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DisplayUnitLabel, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Parent(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DisplayUnitLabel_Get_Name(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DisplayUnitLabel, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Select(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_CallFunction(DisplayUnitLabel, @"Select", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Border(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Border", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Delete(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_CallFunction(DisplayUnitLabel, @"Delete", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Interior(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Fill(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DisplayUnitLabel_Get_Caption(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DisplayUnitLabel, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Caption(DisplayUnitLabel.IDispatch, Caption.s)
	COM_PutPropertyString(DisplayUnitLabel, @"Caption", Caption, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Characters(DisplayUnitLabel.IDispatch, *Start.VARIANT, *Length.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*Length, @args(0))
	COM_VarClone(*Start, @args(1))
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Characters", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Font(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_HorizontalAlignment(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DisplayUnitLabel, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_HorizontalAlignment(DisplayUnitLabel.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(DisplayUnitLabel, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_DisplayUnitLabel_Get_Left(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(DisplayUnitLabel, @"Left", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Left(DisplayUnitLabel.IDispatch, Left.d)
	COM_PutPropertyDouble(DisplayUnitLabel, @"Left", Left, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_Orientation(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DisplayUnitLabel, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Orientation(DisplayUnitLabel.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(DisplayUnitLabel, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_DisplayUnitLabel_Get_Shadow(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyBool(DisplayUnitLabel, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Shadow(DisplayUnitLabel.IDispatch, Shadow.w)
	COM_PutPropertyBool(DisplayUnitLabel, @"Shadow", Shadow, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_DisplayUnitLabel_Get_Text(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyString(DisplayUnitLabel, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Text(DisplayUnitLabel.IDispatch, Text.s)
	COM_PutPropertyString(DisplayUnitLabel, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_DisplayUnitLabel_Get_Top(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(DisplayUnitLabel, @"Top", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Top(DisplayUnitLabel.IDispatch, Top.d)
	COM_PutPropertyDouble(DisplayUnitLabel, @"Top", Top, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_VerticalAlignment(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DisplayUnitLabel, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_VerticalAlignment(DisplayUnitLabel.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(DisplayUnitLabel, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_ReadingOrder(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DisplayUnitLabel, @"ReadingOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_ReadingOrder(DisplayUnitLabel.IDispatch, ReadingOrder.l)
	COM_PutPropertyLong(DisplayUnitLabel, @"ReadingOrder", ReadingOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_AutoScaleFont(DisplayUnitLabel.IDispatch, *result.VARIANT)
	COM_GetProperty(DisplayUnitLabel, @"AutoScaleFont", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_AutoScaleFont(DisplayUnitLabel.IDispatch, *AutoScaleFont.VARIANT)
	COM_PutProperty(DisplayUnitLabel, @"AutoScaleFont", *AutoScaleFont, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel__Dummy21(DisplayUnitLabel.IDispatch)
	COM_CallFunction(DisplayUnitLabel, @"_Dummy21", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Get_Position(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DisplayUnitLabel, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DisplayUnitLabel_Put_Position(DisplayUnitLabel.IDispatch, Position.l)
	COM_PutPropertyLong(DisplayUnitLabel, @"Position", Position, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DisplayUnitLabel_Get_Format(DisplayUnitLabel.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DisplayUnitLabel, @"Format", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CellFormat
;- -------------------------
ProcedureDLL.i Excel_CellFormat_Get_Application(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CellFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_Creator(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CellFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CellFormat_Get_Parent(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CellFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CellFormat_Get_Borders(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CellFormat, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_Borders_(CellFormat.IDispatch, Borders.IDispatch)
	COM_PutPropertyDispatch(CellFormat, @"Borders", Borders, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CellFormat_Get_Font(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CellFormat, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_Font_(CellFormat.IDispatch, Font.IDispatch)
	COM_PutPropertyDispatch(CellFormat, @"Font", Font, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CellFormat_Get_Interior(CellFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CellFormat, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_Interior_(CellFormat.IDispatch, Interior.IDispatch)
	COM_PutPropertyDispatch(CellFormat, @"Interior", Interior, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_NumberFormat(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_NumberFormat(CellFormat.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(CellFormat, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_NumberFormatLocal(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"NumberFormatLocal", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_NumberFormatLocal(CellFormat.IDispatch, *NumberFormatLocal.VARIANT)
	COM_PutProperty(CellFormat, @"NumberFormatLocal", *NumberFormatLocal, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_AddIndent(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"AddIndent", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_AddIndent(CellFormat.IDispatch, *AddIndent.VARIANT)
	COM_PutProperty(CellFormat, @"AddIndent", *AddIndent, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_IndentLevel(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"IndentLevel", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_IndentLevel(CellFormat.IDispatch, *IndentLevel.VARIANT)
	COM_PutProperty(CellFormat, @"IndentLevel", *IndentLevel, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_HorizontalAlignment(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"HorizontalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_HorizontalAlignment(CellFormat.IDispatch, *HorizontalAlignment.VARIANT)
	COM_PutProperty(CellFormat, @"HorizontalAlignment", *HorizontalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_VerticalAlignment(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"VerticalAlignment", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_VerticalAlignment(CellFormat.IDispatch, *VerticalAlignment.VARIANT)
	COM_PutProperty(CellFormat, @"VerticalAlignment", *VerticalAlignment, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_Orientation(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"Orientation", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_Orientation(CellFormat.IDispatch, *Orientation.VARIANT)
	COM_PutProperty(CellFormat, @"Orientation", *Orientation, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_ShrinkToFit(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"ShrinkToFit", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_ShrinkToFit(CellFormat.IDispatch, *ShrinkToFit.VARIANT)
	COM_PutProperty(CellFormat, @"ShrinkToFit", *ShrinkToFit, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_WrapText(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"WrapText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_WrapText(CellFormat.IDispatch, *WrapText.VARIANT)
	COM_PutProperty(CellFormat, @"WrapText", *WrapText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_Locked(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"Locked", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_Locked(CellFormat.IDispatch, *Locked.VARIANT)
	COM_PutProperty(CellFormat, @"Locked", *Locked, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_FormulaHidden(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"FormulaHidden", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_FormulaHidden(CellFormat.IDispatch, *FormulaHidden.VARIANT)
	COM_PutProperty(CellFormat, @"FormulaHidden", *FormulaHidden, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Get_MergeCells(CellFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(CellFormat, @"MergeCells", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Put_MergeCells(CellFormat.IDispatch, *MergeCells.VARIANT)
	COM_PutProperty(CellFormat, @"MergeCells", *MergeCells, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CellFormat_Clear(CellFormat.IDispatch)
	COM_CallFunction(CellFormat, @"Clear", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_UsedObjects
;- -------------------------
ProcedureDLL.i Excel_UsedObjects_Get_Application(UsedObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UsedObjects, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UsedObjects_Get_Creator(UsedObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UsedObjects, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UsedObjects_Get_Parent(UsedObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UsedObjects, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UsedObjects_Get_Count(UsedObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UsedObjects, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UsedObjects_Get__NewEnum(UsedObjects.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(UsedObjects, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UsedObjects_Get__Default(UsedObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(UsedObjects, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UsedObjects_Get_Item(UsedObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(UsedObjects, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CustomProperties
;- -------------------------
ProcedureDLL.i Excel_CustomProperties_Get_Application(CustomProperties.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperties, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperties_Get_Creator(CustomProperties.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomProperties, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperties_Get_Parent(CustomProperties.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperties, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperties_Add(CustomProperties.IDispatch, Name.s, *Value.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*Value, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CustomProperties, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_CustomProperties_Get_Count(CustomProperties.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomProperties, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperties_Get__Default(CustomProperties.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperties, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperties_Get_Item(CustomProperties.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperties, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperties_Get__NewEnum(CustomProperties.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(CustomProperties, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CustomProperty
;- -------------------------
ProcedureDLL.i Excel_CustomProperty_Get_Application(CustomProperty.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperty, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Get_Creator(CustomProperty.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CustomProperty, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CustomProperty_Get_Parent(CustomProperty.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CustomProperty, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CustomProperty_Get_Name(CustomProperty.IDispatch)
	ProcedureReturn COM_GetPropertyString(CustomProperty, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Put_Name(CustomProperty.IDispatch, Name.s)
	COM_PutPropertyString(CustomProperty, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Get_Value(CustomProperty.IDispatch, *result.VARIANT)
	COM_GetProperty(CustomProperty, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Put_Value(CustomProperty.IDispatch, *Value.VARIANT)
	COM_PutProperty(CustomProperty, @"Value", *Value, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Get__Default(CustomProperty.IDispatch, *result.VARIANT)
	COM_GetProperty(CustomProperty, @"_Default", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CustomProperty_Delete(CustomProperty.IDispatch)
	COM_CallFunction(CustomProperty, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_CalculatedMembers
;- -------------------------
ProcedureDLL.i Excel_CalculatedMembers_Get_Application(CalculatedMembers.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMembers, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMembers_Get_Creator(CalculatedMembers.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedMembers, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMembers_Get_Parent(CalculatedMembers.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMembers, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMembers_Get_Count(CalculatedMembers.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedMembers, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMembers_Get_Item(CalculatedMembers.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMembers, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMembers_Get__Default(CalculatedMembers.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMembers, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMembers_Get__NewEnum(CalculatedMembers.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(CalculatedMembers, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMembers_Add(CalculatedMembers.IDispatch, Name.s, Formula.s, *SolveOrder.VARIANT, *Type.VARIANT)
	Dim args.VARIANT(3)
	Protected.i r
	COM_VarClone(*Type, @args(0))
	COM_VarClone(*SolveOrder, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Formula)
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(CalculatedMembers, @"Add", @args(), 4, @_g_Excel_error)
	VariantClear_(@args(2))
	VariantClear_(@args(3))
	ProcedureReturn r
EndProcedure

;- -------------------------
;- Excel_CalculatedMember
;- -------------------------
ProcedureDLL.i Excel_CalculatedMember_Get_Application(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMember, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMember_Get_Creator(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedMember, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_CalculatedMember_Get_Parent(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(CalculatedMember, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CalculatedMember_Get_Name(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyString(CalculatedMember, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CalculatedMember_Get_Formula(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyString(CalculatedMember, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CalculatedMember_Get_SourceName(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyString(CalculatedMember, @"SourceName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMember_Get_SolveOrder(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedMember, @"SolveOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_CalculatedMember_Get_IsValid(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyBool(CalculatedMember, @"IsValid", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_CalculatedMember_Get__Default(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyString(CalculatedMember, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMember_Delete(CalculatedMember.IDispatch)
	COM_CallFunction(CalculatedMember, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_CalculatedMember_Get_Type(CalculatedMember.IDispatch)
	ProcedureReturn COM_GetPropertyLong(CalculatedMember, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Watches
;- -------------------------
ProcedureDLL.i Excel_Watches_Get_Application(Watches.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Watches, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watches_Get_Creator(Watches.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Watches, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watches_Get_Parent(Watches.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Watches, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watches_Add(Watches.IDispatch, *Source.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Watches, @"Add", *Source, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watches_Get_Count(Watches.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Watches, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watches_Get__Default(Watches.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Watches, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watches_Get_Item(Watches.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Watches, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watches_Get__NewEnum(Watches.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Watches, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watches_Delete(Watches.IDispatch)
	COM_CallFunction(Watches, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Watch
;- -------------------------
ProcedureDLL.i Excel_Watch_Get_Application(Watch.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Watch, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watch_Get_Creator(Watch.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Watch, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Watch_Get_Parent(Watch.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Watch, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watch_Delete(Watch.IDispatch)
	COM_CallFunction(Watch, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Watch_Get_Source(Watch.IDispatch, *result.VARIANT)
	COM_GetProperty(Watch, @"Source", 0, 0, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotCell
;- -------------------------
ProcedureDLL.i Excel_PivotCell_Get_Application(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCell_Get_Creator(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCell, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_Parent(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCell_Get_PivotCellType(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCell, @"PivotCellType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_PivotTable(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"PivotTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_DataField(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"DataField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_PivotField(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"PivotField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_PivotItem(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"PivotItem", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_RowItems(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"RowItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_ColumnItems(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"ColumnItems", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_Range(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotCell_Get_Dummy18(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotCell, @"Dummy18", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotCell_Get_CustomSubtotalFunction(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotCell, @"CustomSubtotalFunction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_PivotRowLine(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"PivotRowLine", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotCell_Get_PivotColumnLine(PivotCell.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotCell, @"PivotColumnLine", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Graphic
;- -------------------------
ProcedureDLL.i Excel_Graphic_Get_Application(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Graphic, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Get_Creator(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Graphic, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Graphic_Get_Parent(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Graphic, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_Brightness(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"Brightness", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_Brightness(Graphic.IDispatch, Brightness.f)
	COM_PutPropertyFloat(Graphic, @"Brightness", Brightness, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Get_ColorType(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Graphic, @"ColorType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_ColorType(Graphic.IDispatch, ColorType.l)
	COM_PutPropertyLong(Graphic, @"ColorType", ColorType, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_Contrast(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"Contrast", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_Contrast(Graphic.IDispatch, Contrast.f)
	COM_PutPropertyFloat(Graphic, @"Contrast", Contrast, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_CropBottom(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"CropBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_CropBottom(Graphic.IDispatch, CropBottom.f)
	COM_PutPropertyFloat(Graphic, @"CropBottom", CropBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_CropLeft(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"CropLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_CropLeft(Graphic.IDispatch, CropLeft.f)
	COM_PutPropertyFloat(Graphic, @"CropLeft", CropLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_CropRight(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"CropRight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_CropRight(Graphic.IDispatch, CropRight.f)
	COM_PutPropertyFloat(Graphic, @"CropRight", CropRight, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_CropTop(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"CropTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_CropTop(Graphic.IDispatch, CropTop.f)
	COM_PutPropertyFloat(Graphic, @"CropTop", CropTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Graphic_Get_Filename(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyString(Graphic, @"Filename", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_Filename(Graphic.IDispatch, Filename.s)
	COM_PutPropertyString(Graphic, @"Filename", Filename, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_Height(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"Height", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_Height(Graphic.IDispatch, Height.f)
	COM_PutPropertyFloat(Graphic, @"Height", Height, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Get_LockAspectRatio(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Graphic, @"LockAspectRatio", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_LockAspectRatio(Graphic.IDispatch, LockAspectRatio.l)
	COM_PutPropertyLong(Graphic, @"LockAspectRatio", LockAspectRatio, @_g_Excel_error)
EndProcedure

ProcedureDLL.f Excel_Graphic_Get_Width(Graphic.IDispatch)
	ProcedureReturn COM_GetPropertyFloat(Graphic, @"Width", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Graphic_Put_Width(Graphic.IDispatch, Width.f)
	COM_PutPropertyFloat(Graphic, @"Width", Width, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AutoRecover
;- -------------------------
ProcedureDLL.i Excel_AutoRecover_Get_Application(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoRecover, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoRecover_Get_Creator(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AutoRecover, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AutoRecover_Get_Parent(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AutoRecover, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AutoRecover_Get_Enabled(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AutoRecover, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoRecover_Put_Enabled(AutoRecover.IDispatch, Enabled.w)
	COM_PutPropertyBool(AutoRecover, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoRecover_Get_Time(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AutoRecover, @"Time", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoRecover_Put_Time(AutoRecover.IDispatch, Time.l)
	COM_PutPropertyLong(AutoRecover, @"Time", Time, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_AutoRecover_Get_Path(AutoRecover.IDispatch)
	ProcedureReturn COM_GetPropertyString(AutoRecover, @"Path", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AutoRecover_Put_Path(AutoRecover.IDispatch, Path.s)
	COM_PutPropertyString(AutoRecover, @"Path", Path, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ErrorCheckingOptions
;- -------------------------
ProcedureDLL.i Excel_ErrorCheckingOptions_Get_Application(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorCheckingOptions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Get_Creator(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ErrorCheckingOptions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ErrorCheckingOptions_Get_Parent(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ErrorCheckingOptions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_BackgroundChecking(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"BackgroundChecking", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_BackgroundChecking(ErrorCheckingOptions.IDispatch, BackgroundChecking.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"BackgroundChecking", BackgroundChecking, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Get_IndicatorColorIndex(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ErrorCheckingOptions, @"IndicatorColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_IndicatorColorIndex(ErrorCheckingOptions.IDispatch, IndicatorColorIndex.l)
	COM_PutPropertyLong(ErrorCheckingOptions, @"IndicatorColorIndex", IndicatorColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_EvaluateToError(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"EvaluateToError", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_EvaluateToError(ErrorCheckingOptions.IDispatch, EvaluateToError.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"EvaluateToError", EvaluateToError, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_TextDate(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"TextDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_TextDate(ErrorCheckingOptions.IDispatch, TextDate.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"TextDate", TextDate, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_NumberAsText(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"NumberAsText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_NumberAsText(ErrorCheckingOptions.IDispatch, NumberAsText.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"NumberAsText", NumberAsText, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_InconsistentFormula(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"InconsistentFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_InconsistentFormula(ErrorCheckingOptions.IDispatch, InconsistentFormula.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"InconsistentFormula", InconsistentFormula, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_OmittedCells(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"OmittedCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_OmittedCells(ErrorCheckingOptions.IDispatch, OmittedCells.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"OmittedCells", OmittedCells, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_UnlockedFormulaCells(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"UnlockedFormulaCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_UnlockedFormulaCells(ErrorCheckingOptions.IDispatch, UnlockedFormulaCells.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"UnlockedFormulaCells", UnlockedFormulaCells, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_EmptyCellReferences(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"EmptyCellReferences", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_EmptyCellReferences(ErrorCheckingOptions.IDispatch, EmptyCellReferences.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"EmptyCellReferences", EmptyCellReferences, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_ListDataValidation(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"ListDataValidation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_ListDataValidation(ErrorCheckingOptions.IDispatch, ListDataValidation.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"ListDataValidation", ListDataValidation, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ErrorCheckingOptions_Get_InconsistentTableFormula(ErrorCheckingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ErrorCheckingOptions, @"InconsistentTableFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ErrorCheckingOptions_Put_InconsistentTableFormula(ErrorCheckingOptions.IDispatch, InconsistentTableFormula.w)
	COM_PutPropertyBool(ErrorCheckingOptions, @"InconsistentTableFormula", InconsistentTableFormula, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Errors
;- -------------------------
ProcedureDLL.i Excel_Errors_Get_Application(Errors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Errors, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Errors_Get_Creator(Errors.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Errors, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Errors_Get_Parent(Errors.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Errors, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Errors_Get_Item(Errors.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Errors, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Errors_Get__Default(Errors.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Errors, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Error
;- -------------------------
ProcedureDLL.i Excel_Error_Get_Application(Error.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Error, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Error_Get_Creator(Error.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Error, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Error_Get_Parent(Error.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Error, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Error_Get_Value(Error.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Error, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Error_Get_Ignore(Error.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Error, @"Ignore", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Error_Put_Ignore(Error.IDispatch, Ignore.w)
	COM_PutPropertyBool(Error, @"Ignore", Ignore, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTagAction
;- -------------------------
ProcedureDLL.i Excel_SmartTagAction_Get_Application(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagAction, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Get_Creator(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagAction, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagAction_Get_Parent(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagAction, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagAction_Get_Name(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagAction, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Execute(SmartTagAction.IDispatch)
	COM_CallFunction(SmartTagAction, @"Execute", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagAction_Get__Default(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagAction, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Get_Type(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagAction, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagAction_Get_PresentInPane(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagAction, @"PresentInPane", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagAction_Get_ExpandHelp(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagAction, @"ExpandHelp", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Put_ExpandHelp(SmartTagAction.IDispatch, ExpandHelp.w)
	COM_PutPropertyBool(SmartTagAction, @"ExpandHelp", ExpandHelp, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagAction_Get_CheckboxState(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagAction, @"CheckboxState", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Put_CheckboxState(SmartTagAction.IDispatch, CheckboxState.w)
	COM_PutPropertyBool(SmartTagAction, @"CheckboxState", CheckboxState, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagAction_Get_TextboxText(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagAction, @"TextboxText", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Put_TextboxText(SmartTagAction.IDispatch, TextboxText.s)
	COM_PutPropertyString(SmartTagAction, @"TextboxText", TextboxText, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Get_ListSelection(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagAction, @"ListSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Put_ListSelection(SmartTagAction.IDispatch, ListSelection.l)
	COM_PutPropertyLong(SmartTagAction, @"ListSelection", ListSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Get_RadioGroupSelection(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagAction, @"RadioGroupSelection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagAction_Put_RadioGroupSelection(SmartTagAction.IDispatch, RadioGroupSelection.l)
	COM_PutPropertyLong(SmartTagAction, @"RadioGroupSelection", RadioGroupSelection, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagAction_Get_ActiveXControl(SmartTagAction.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagAction, @"ActiveXControl", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTagActions
;- -------------------------
ProcedureDLL.i Excel_SmartTagActions_Get_Application(SmartTagActions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagActions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagActions_Get_Creator(SmartTagActions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagActions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagActions_Get_Parent(SmartTagActions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagActions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagActions_Get_Count(SmartTagActions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagActions, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagActions_Get__Default(SmartTagActions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagActions, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagActions_Get_Item(SmartTagActions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagActions, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagActions_Get__NewEnum(SmartTagActions.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(SmartTagActions, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTag
;- -------------------------
ProcedureDLL.i Excel_SmartTag_Get_Application(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTag, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTag_Get_Creator(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTag, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTag_Get_Parent(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTag, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTag_Get_DownloadURL(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTag, @"DownloadURL", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTag_Get_Name(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTag, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTag_Get__Default(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTag, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTag_Get_XML(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTag, @"XML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTag_Get_Range(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTag, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTag_Delete(SmartTag.IDispatch)
	COM_CallFunction(SmartTag, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTag_Get_SmartTagActions(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTag, @"SmartTagActions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTag_Get_Properties(SmartTag.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTag, @"Properties", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTags
;- -------------------------
ProcedureDLL.i Excel_SmartTags_Get_Application(SmartTags.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTags, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTags_Get_Creator(SmartTags.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTags, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTags_Get_Parent(SmartTags.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTags, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTags_Add(SmartTags.IDispatch, SmartTagType.s)
	Dim args.VARIANT(0)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(SmartTagType)
	r = COM_CallFunctionDispatch(SmartTags, @"Add", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_SmartTags_Get_Count(SmartTags.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTags, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTags_Get__Default(SmartTags.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SmartTags, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTags_Get__NewEnum(SmartTags.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(SmartTags, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTagRecognizer
;- -------------------------
ProcedureDLL.i Excel_SmartTagRecognizer_Get_Application(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizer, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagRecognizer_Get_Creator(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagRecognizer, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagRecognizer_Get_Parent(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizer, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagRecognizer_Get_Enabled(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagRecognizer, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagRecognizer_Put_Enabled(SmartTagRecognizer.IDispatch, Enabled.w)
	COM_PutPropertyBool(SmartTagRecognizer, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagRecognizer_Get_progID(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagRecognizer, @"progID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagRecognizer_Get__Default(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagRecognizer, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SmartTagRecognizer_Get_FullName(SmartTagRecognizer.IDispatch)
	ProcedureReturn COM_GetPropertyString(SmartTagRecognizer, @"FullName", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTagRecognizers
;- -------------------------
ProcedureDLL.i Excel_SmartTagRecognizers_Get_Application(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizers, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagRecognizers_Get_Creator(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagRecognizers, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagRecognizers_Get_Parent(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizers, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagRecognizers_Get_Count(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagRecognizers, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagRecognizers_Get_Item(SmartTagRecognizers.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizers, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagRecognizers_Get__Default(SmartTagRecognizers.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagRecognizers, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagRecognizers_Get__NewEnum(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(SmartTagRecognizers, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagRecognizers_Get_Recognize(SmartTagRecognizers.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagRecognizers, @"Recognize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagRecognizers_Put_Recognize(SmartTagRecognizers.IDispatch, Recognize.w)
	COM_PutPropertyBool(SmartTagRecognizers, @"Recognize", Recognize, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SmartTagOptions
;- -------------------------
ProcedureDLL.i Excel_SmartTagOptions_Get_Application(SmartTagOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagOptions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagOptions_Get_Creator(SmartTagOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagOptions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SmartTagOptions_Get_Parent(SmartTagOptions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SmartTagOptions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagOptions_Get_DisplaySmartTags(SmartTagOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SmartTagOptions, @"DisplaySmartTags", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagOptions_Put_DisplaySmartTags(SmartTagOptions.IDispatch, DisplaySmartTags.l)
	COM_PutPropertyLong(SmartTagOptions, @"DisplaySmartTags", DisplaySmartTags, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SmartTagOptions_Get_EmbedSmartTags(SmartTagOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SmartTagOptions, @"EmbedSmartTags", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SmartTagOptions_Put_EmbedSmartTags(SmartTagOptions.IDispatch, EmbedSmartTags.w)
	COM_PutPropertyBool(SmartTagOptions, @"EmbedSmartTags", EmbedSmartTags, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SpellingOptions
;- -------------------------
ProcedureDLL.l Excel_SpellingOptions_Get_DictLang(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SpellingOptions, @"DictLang", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_DictLang(SpellingOptions.IDispatch, DictLang.l)
	COM_PutPropertyLong(SpellingOptions, @"DictLang", DictLang, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_SpellingOptions_Get_UserDict(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyString(SpellingOptions, @"UserDict", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_UserDict(SpellingOptions.IDispatch, UserDict.s)
	COM_PutPropertyString(SpellingOptions, @"UserDict", UserDict, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_IgnoreCaps(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"IgnoreCaps", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_IgnoreCaps(SpellingOptions.IDispatch, IgnoreCaps.w)
	COM_PutPropertyBool(SpellingOptions, @"IgnoreCaps", IgnoreCaps, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_SuggestMainOnly(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"SuggestMainOnly", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_SuggestMainOnly(SpellingOptions.IDispatch, SuggestMainOnly.w)
	COM_PutPropertyBool(SpellingOptions, @"SuggestMainOnly", SuggestMainOnly, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_IgnoreMixedDigits(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"IgnoreMixedDigits", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_IgnoreMixedDigits(SpellingOptions.IDispatch, IgnoreMixedDigits.w)
	COM_PutPropertyBool(SpellingOptions, @"IgnoreMixedDigits", IgnoreMixedDigits, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_IgnoreFileNames(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"IgnoreFileNames", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_IgnoreFileNames(SpellingOptions.IDispatch, IgnoreFileNames.w)
	COM_PutPropertyBool(SpellingOptions, @"IgnoreFileNames", IgnoreFileNames, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_GermanPostReform(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"GermanPostReform", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_GermanPostReform(SpellingOptions.IDispatch, GermanPostReform.w)
	COM_PutPropertyBool(SpellingOptions, @"GermanPostReform", GermanPostReform, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_KoreanCombineAux(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"KoreanCombineAux", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_KoreanCombineAux(SpellingOptions.IDispatch, KoreanCombineAux.w)
	COM_PutPropertyBool(SpellingOptions, @"KoreanCombineAux", KoreanCombineAux, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_KoreanUseAutoChangeList(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"KoreanUseAutoChangeList", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_KoreanUseAutoChangeList(SpellingOptions.IDispatch, KoreanUseAutoChangeList.w)
	COM_PutPropertyBool(SpellingOptions, @"KoreanUseAutoChangeList", KoreanUseAutoChangeList, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_SpellingOptions_Get_KoreanProcessCompound(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyBool(SpellingOptions, @"KoreanProcessCompound", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_KoreanProcessCompound(SpellingOptions.IDispatch, KoreanProcessCompound.w)
	COM_PutPropertyBool(SpellingOptions, @"KoreanProcessCompound", KoreanProcessCompound, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Get_HebrewModes(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SpellingOptions, @"HebrewModes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_HebrewModes(SpellingOptions.IDispatch, HebrewModes.l)
	COM_PutPropertyLong(SpellingOptions, @"HebrewModes", HebrewModes, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Get_ArabicModes(SpellingOptions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SpellingOptions, @"ArabicModes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SpellingOptions_Put_ArabicModes(SpellingOptions.IDispatch, ArabicModes.l)
	COM_PutPropertyLong(SpellingOptions, @"ArabicModes", ArabicModes, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Speech
;- -------------------------
ProcedureDLL.l Excel_Speech_Speak(Speech.IDispatch, Text.s, *SpeakAsync.VARIANT, *SpeakXML.VARIANT, *Purge.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Purge, @args(0))
	COM_VarClone(*SpeakXML, @args(1))
	COM_VarClone(*SpeakAsync, @args(2))
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Text)
	COM_CallFunction(Speech, @"Speak", @args(), 4, 0, @_g_Excel_error)
	VariantClear_(@args(3))
EndProcedure

ProcedureDLL.l Excel_Speech_Get_Direction(Speech.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Speech, @"Direction", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Speech_Put_Direction(Speech.IDispatch, Direction.l)
	COM_PutPropertyLong(Speech, @"Direction", Direction, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Speech_Get_SpeakCellOnEnter(Speech.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Speech, @"SpeakCellOnEnter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Speech_Put_SpeakCellOnEnter(Speech.IDispatch, SpeakCellOnEnter.w)
	COM_PutPropertyBool(Speech, @"SpeakCellOnEnter", SpeakCellOnEnter, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Protection
;- -------------------------
ProcedureDLL.w Excel_Protection_Get_AllowFormattingCells(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowFormattingCells", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowFormattingColumns(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowFormattingColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowFormattingRows(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowFormattingRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowInsertingColumns(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowInsertingColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowInsertingRows(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowInsertingRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowInsertingHyperlinks(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowInsertingHyperlinks", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowDeletingColumns(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowDeletingColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowDeletingRows(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowDeletingRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowSorting(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowSorting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowFiltering(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowFiltering", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Protection_Get_AllowUsingPivotTables(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Protection, @"AllowUsingPivotTables", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Protection_Get_AllowEditRanges(Protection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Protection, @"AllowEditRanges", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotItemList
;- -------------------------
ProcedureDLL.i Excel_PivotItemList_Get_Application(PivotItemList.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItemList, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItemList_Get_Creator(PivotItemList.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItemList, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItemList_Get_Parent(PivotItemList.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotItemList, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotItemList_Get_Count(PivotItemList.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotItemList, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItemList_Item(PivotItemList.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(PivotItemList, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItemList_Get__Default(PivotItemList.IDispatch, *Field.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotItemList, @"_Default", *Field, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotItemList__NewEnum(PivotItemList.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(PivotItemList, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Tab
;- -------------------------
ProcedureDLL.i Excel_Tab_Get_Application(Tab.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Tab, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Get_Creator(Tab.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Tab, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Tab_Get_Parent(Tab.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Tab, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Get_Color(Tab.IDispatch, *result.VARIANT)
	COM_GetProperty(Tab, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Put_Color(Tab.IDispatch, *Color.VARIANT)
	COM_PutProperty(Tab, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Get_ColorIndex(Tab.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Tab, @"ColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Put_ColorIndex(Tab.IDispatch, ColorIndex.l)
	COM_PutPropertyLong(Tab, @"ColorIndex", ColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Get_ThemeColor(Tab.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Tab, @"ThemeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Put_ThemeColor(Tab.IDispatch, ThemeColor.l)
	COM_PutPropertyLong(Tab, @"ThemeColor", ThemeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Get_TintAndShade(Tab.IDispatch, *result.VARIANT)
	COM_GetProperty(Tab, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Tab_Put_TintAndShade(Tab.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(Tab, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AllowEditRanges
;- -------------------------
ProcedureDLL.l Excel_AllowEditRanges_Get_Count(AllowEditRanges.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AllowEditRanges, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AllowEditRanges_Get_Item(AllowEditRanges.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(AllowEditRanges, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AllowEditRanges_Add(AllowEditRanges.IDispatch, Title.s, Range.IDispatch, *Password.VARIANT)
	Dim args.VARIANT(2)
	Protected.i r
	COM_VarClone(*Password, @args(0))
	args(1)\vt = #VT_DISPATCH : args(1)\pdispVal = Range
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(Title)
	r = COM_CallFunctionDispatch(AllowEditRanges, @"Add", @args(), 3, @_g_Excel_error)
	VariantClear_(@args(2))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_AllowEditRanges_Get__Default(AllowEditRanges.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(AllowEditRanges, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AllowEditRanges_Get__NewEnum(AllowEditRanges.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(AllowEditRanges, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AllowEditRange
;- -------------------------
ProcedureDLL.s Excel_AllowEditRange_Get_Title(AllowEditRange.IDispatch)
	ProcedureReturn COM_GetPropertyString(AllowEditRange, @"Title", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AllowEditRange_Put_Title(AllowEditRange.IDispatch, Title.s)
	COM_PutPropertyString(AllowEditRange, @"Title", Title, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AllowEditRange_Get_Range(AllowEditRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AllowEditRange, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AllowEditRange_Put_Range_(AllowEditRange.IDispatch, Range.IDispatch)
	COM_PutPropertyDispatch(AllowEditRange, @"Range", Range, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AllowEditRange_ChangePassword(AllowEditRange.IDispatch, Password.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Password)
	COM_CallFunction(AllowEditRange, @"ChangePassword", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_AllowEditRange_Delete(AllowEditRange.IDispatch)
	COM_CallFunction(AllowEditRange, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AllowEditRange_Unprotect(AllowEditRange.IDispatch, *Password.VARIANT)
	COM_CallFunction(AllowEditRange, @"Unprotect", *Password, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AllowEditRange_Get_Users(AllowEditRange.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AllowEditRange, @"Users", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_UserAccessList
;- -------------------------
ProcedureDLL.l Excel_UserAccessList_Get_Count(UserAccessList.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UserAccessList, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UserAccessList_Get_Item(UserAccessList.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(UserAccessList, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UserAccessList_Add(UserAccessList.IDispatch, Name.s, AllowEdit.w)
	Dim args.VARIANT(1)
	Protected.i r
	args(0)\vt = #VT_BOOL : args(0)\boolVal = AllowEdit
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(UserAccessList, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_UserAccessList_DeleteAll(UserAccessList.IDispatch)
	COM_CallFunction(UserAccessList, @"DeleteAll", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UserAccessList_Get__Default(UserAccessList.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(UserAccessList, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UserAccessList_Get__NewEnum(UserAccessList.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(UserAccessList, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_UserAccess
;- -------------------------
ProcedureDLL.s Excel_UserAccess_Get_Name(UserAccess.IDispatch)
	ProcedureReturn COM_GetPropertyString(UserAccess, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_UserAccess_Get_AllowEdit(UserAccess.IDispatch)
	ProcedureReturn COM_GetPropertyBool(UserAccess, @"AllowEdit", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UserAccess_Put_AllowEdit(UserAccess.IDispatch, AllowEdit.w)
	COM_PutPropertyBool(UserAccess, @"AllowEdit", AllowEdit, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UserAccess_Delete(UserAccess.IDispatch)
	COM_CallFunction(UserAccess, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_RTD
;- -------------------------
ProcedureDLL.l Excel_RTD_Get_ThrottleInterval(RTD.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RTD, @"ThrottleInterval", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RTD_Put_ThrottleInterval(RTD.IDispatch, ThrottleInterval.l)
	COM_PutPropertyLong(RTD, @"ThrottleInterval", ThrottleInterval, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RTD_RefreshData(RTD.IDispatch)
	COM_CallFunction(RTD, @"RefreshData", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RTD_RestartServers(RTD.IDispatch)
	COM_CallFunction(RTD, @"RestartServers", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListObjects
;- -------------------------
ProcedureDLL.i Excel_ListObjects_Get_Application(ListObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObjects, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObjects_Get_Creator(ListObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListObjects, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects_Get_Parent(ListObjects.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObjects, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects__Add(ListObjects.IDispatch, SourceType.l, *Source.VARIANT, *LinkSource.VARIANT, XlListObjectHasHeaders.l, *Destination.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*Destination, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = XlListObjectHasHeaders
	COM_VarClone(*LinkSource, @args(2))
	COM_VarClone(*Source, @args(3))
	args(4)\vt = #VT_I4 : args(4)\lVal = SourceType
	ProcedureReturn COM_CallFunctionDispatch(ListObjects, @"_Add", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects_Get__Default(ListObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListObjects, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects_Get__NewEnum(ListObjects.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ListObjects, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects_Get_Item(ListObjects.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListObjects, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObjects_Get_Count(ListObjects.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListObjects, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObjects_Add(ListObjects.IDispatch, SourceType.l, *Source.VARIANT, *LinkSource.VARIANT, XlListObjectHasHeaders.l, *Destination.VARIANT, *TableStyleName.VARIANT)
	Dim args.VARIANT(5)
	COM_VarClone(*TableStyleName, @args(0))
	COM_VarClone(*Destination, @args(1))
	args(2)\vt = #VT_I4 : args(2)\lVal = XlListObjectHasHeaders
	COM_VarClone(*LinkSource, @args(3))
	COM_VarClone(*Source, @args(4))
	args(5)\vt = #VT_I4 : args(5)\lVal = SourceType
	ProcedureReturn COM_CallFunctionDispatch(ListObjects, @"Add", @args(), 6, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListObject
;- -------------------------
ProcedureDLL.i Excel_ListObject_Get_Application(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Get_Creator(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListObject, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_Parent(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Delete(ListObject.IDispatch)
	COM_CallFunction(ListObject, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Publish(ListObject.IDispatch, *Target.VARIANT, LinkSource.w)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_BOOL : args(0)\boolVal = LinkSource
	COM_VarClone(*Target, @args(1))
	ProcedureReturn COM_CallFunctionString(ListObject, @"Publish", @args(), 2, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Refresh(ListObject.IDispatch)
	COM_CallFunction(ListObject, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Unlink(ListObject.IDispatch)
	COM_CallFunction(ListObject, @"Unlink", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Unlist(ListObject.IDispatch)
	COM_CallFunction(ListObject, @"Unlist", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_UpdateChanges(ListObject.IDispatch, iConflictType.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = iConflictType
	COM_CallFunction(ListObject, @"UpdateChanges", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Resize(ListObject.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(ListObject, @"Resize", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Get__Default(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListObject, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_Active(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"Active", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_DataBodyRange(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"DataBodyRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_DisplayRightToLeft(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"DisplayRightToLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_HeaderRowRange(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"HeaderRowRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_InsertRowRange(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"InsertRowRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_ListColumns(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"ListColumns", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_ListRows(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"ListRows", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Get_Name(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListObject, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_Name(ListObject.IDispatch, Name.s)
	COM_PutPropertyString(ListObject, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_QueryTable(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"QueryTable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_Range(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowAutoFilter(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowAutoFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowAutoFilter(ListObject.IDispatch, ShowAutoFilter.w)
	COM_PutPropertyBool(ListObject, @"ShowAutoFilter", ShowAutoFilter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowTotals(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowTotals", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowTotals(ListObject.IDispatch, ShowTotals.w)
	COM_PutPropertyBool(ListObject, @"ShowTotals", ShowTotals, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Get_SourceType(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListObject, @"SourceType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_TotalsRowRange(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"TotalsRowRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Get_SharePointURL(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListObject, @"SharePointURL", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_XmlMap(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"XmlMap", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Get_DisplayName(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListObject, @"DisplayName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_DisplayName(ListObject.IDispatch, DisplayName.s)
	COM_PutPropertyString(ListObject, @"DisplayName", DisplayName, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowHeaders(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowHeaders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowHeaders(ListObject.IDispatch, ShowHeaders.w)
	COM_PutPropertyBool(ListObject, @"ShowHeaders", ShowHeaders, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_AutoFilter(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"AutoFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Get_TableStyle(ListObject.IDispatch, *result.VARIANT)
	COM_GetProperty(ListObject, @"TableStyle", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_TableStyle(ListObject.IDispatch, *TableStyle.VARIANT)
	COM_PutProperty(ListObject, @"TableStyle", *TableStyle, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowTableStyleFirstColumn(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowTableStyleFirstColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowTableStyleFirstColumn(ListObject.IDispatch, ShowTableStyleFirstColumn.w)
	COM_PutPropertyBool(ListObject, @"ShowTableStyleFirstColumn", ShowTableStyleFirstColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowTableStyleLastColumn(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowTableStyleLastColumn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowTableStyleLastColumn(ListObject.IDispatch, ShowTableStyleLastColumn.w)
	COM_PutPropertyBool(ListObject, @"ShowTableStyleLastColumn", ShowTableStyleLastColumn, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowTableStyleRowStripes(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowTableStyleRowStripes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowTableStyleRowStripes(ListObject.IDispatch, ShowTableStyleRowStripes.w)
	COM_PutPropertyBool(ListObject, @"ShowTableStyleRowStripes", ShowTableStyleRowStripes, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListObject_Get_ShowTableStyleColumnStripes(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListObject, @"ShowTableStyleColumnStripes", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_ShowTableStyleColumnStripes(ListObject.IDispatch, ShowTableStyleColumnStripes.w)
	COM_PutPropertyBool(ListObject, @"ShowTableStyleColumnStripes", ShowTableStyleColumnStripes, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListObject_Get_Sort(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListObject, @"Sort", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListObject_Get_Comment(ListObject.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListObject, @"Comment", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_Put_Comment(ListObject.IDispatch, Comment.s)
	COM_PutPropertyString(ListObject, @"Comment", Comment, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListObject_ExportToVisio(ListObject.IDispatch)
	COM_CallFunction(ListObject, @"ExportToVisio", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListColumns
;- -------------------------
ProcedureDLL.i Excel_ListColumns_Get_Application(ListColumns.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumns, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumns_Get_Creator(ListColumns.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListColumns, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumns_Get_Parent(ListColumns.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumns, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumns_Add(ListColumns.IDispatch, *Position.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ListColumns, @"Add", *Position, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumns_Get__Default(ListColumns.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListColumns, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumns_Get__NewEnum(ListColumns.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ListColumns, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumns_Get_Item(ListColumns.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListColumns, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumns_Get_Count(ListColumns.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListColumns, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListColumn
;- -------------------------
ProcedureDLL.i Excel_ListColumn_Get_Application(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Get_Creator(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListColumn, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_Parent(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Delete(ListColumn.IDispatch)
	COM_CallFunction(ListColumn, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListColumn_Get__Default(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListColumn, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_ListDataFormat(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"ListDataFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Get_Index(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListColumn, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListColumn_Get_Name(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListColumn, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Put_Name(ListColumn.IDispatch, Name.s)
	COM_PutPropertyString(ListColumn, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_Range(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Get_TotalsCalculation(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListColumn, @"TotalsCalculation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListColumn_Put_TotalsCalculation(ListColumn.IDispatch, TotalsCalculation.l)
	COM_PutPropertyLong(ListColumn, @"TotalsCalculation", TotalsCalculation, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_XPath(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"XPath", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ListColumn_Get_SharePointFormula(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyString(ListColumn, @"SharePointFormula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_DataBodyRange(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"DataBodyRange", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListColumn_Get_Total(ListColumn.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListColumn, @"Total", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListRows
;- -------------------------
ProcedureDLL.i Excel_ListRows_Get_Application(ListRows.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListRows, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListRows_Get_Creator(ListRows.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListRows, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows_Get_Parent(ListRows.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListRows, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows__Add(ListRows.IDispatch, *Position.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ListRows, @"_Add", *Position, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows_Get__Default(ListRows.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListRows, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows_Get__NewEnum(ListRows.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ListRows, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows_Get_Item(ListRows.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ListRows, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListRows_Get_Count(ListRows.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListRows, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRows_Add(ListRows.IDispatch, *Position.VARIANT, *AlwaysInsert.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*AlwaysInsert, @args(0))
	COM_VarClone(*Position, @args(1))
	ProcedureReturn COM_CallFunctionDispatch(ListRows, @"Add", @args(), 2, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListRow
;- -------------------------
ProcedureDLL.i Excel_ListRow_Get_Application(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListRow, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListRow_Get_Creator(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListRow, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRow_Get_Parent(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListRow, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListRow_Delete(ListRow.IDispatch)
	COM_CallFunction(ListRow, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListRow_Get_Index(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListRow, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListRow_Get_InvalidData(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListRow, @"InvalidData", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListRow_Get_Range(ListRow.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListRow, @"Range", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlNamespace
;- -------------------------
ProcedureDLL.i Excel_XmlNamespace_Get_Application(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespace, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlNamespace_Get_Creator(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlNamespace, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlNamespace_Get_Parent(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespace, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlNamespace_Get__Default(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlNamespace, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlNamespace_Get_Uri(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlNamespace, @"Uri", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlNamespace_Get_Prefix(XmlNamespace.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlNamespace, @"Prefix", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlNamespaces
;- -------------------------
ProcedureDLL.i Excel_XmlNamespaces_Get_Application(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespaces, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlNamespaces_Get_Creator(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlNamespaces, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlNamespaces_Get_Parent(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespaces, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlNamespaces_Get__Default(XmlNamespaces.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespaces, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlNamespaces_Get_Item(XmlNamespaces.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlNamespaces, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlNamespaces_Get_Count(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlNamespaces, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlNamespaces_Get_Value(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlNamespaces, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlNamespaces_Get__NewEnum(XmlNamespaces.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(XmlNamespaces, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlNamespaces_InstallManifest(XmlNamespaces.IDispatch, Path.s, *InstallForAllUsers.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*InstallForAllUsers, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Path)
	COM_CallFunction(XmlNamespaces, @"InstallManifest", @args(), 2, 0, @_g_Excel_error)
	VariantClear_(@args(1))
EndProcedure

;- -------------------------
;- Excel_XmlDataBinding
;- -------------------------
ProcedureDLL.i Excel_XmlDataBinding_Get_Application(XmlDataBinding.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlDataBinding, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlDataBinding_Get_Creator(XmlDataBinding.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlDataBinding, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlDataBinding_Get_Parent(XmlDataBinding.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlDataBinding, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlDataBinding_Get__Default(XmlDataBinding.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlDataBinding, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlDataBinding_Refresh(XmlDataBinding.IDispatch)
	ProcedureReturn COM_CallFunctionLong(XmlDataBinding, @"Refresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlDataBinding_LoadSettings(XmlDataBinding.IDispatch, Url.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Url)
	COM_CallFunction(XmlDataBinding, @"LoadSettings", @args(), 1, 0, @_g_Excel_error)
	VariantClear_(@args(0))
EndProcedure

ProcedureDLL.l Excel_XmlDataBinding_ClearSettings(XmlDataBinding.IDispatch)
	COM_CallFunction(XmlDataBinding, @"ClearSettings", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlDataBinding_Get_SourceUrl(XmlDataBinding.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlDataBinding, @"SourceUrl", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlSchema
;- -------------------------
ProcedureDLL.i Excel_XmlSchema_Get_Application(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchema, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlSchema_Get_Creator(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlSchema, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchema_Get_Parent(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchema, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchema_Get_Namespace(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchema, @"Namespace", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlSchema_Get_XML(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlSchema, @"XML", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlSchema_Get_Name(XmlSchema.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlSchema, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlSchemas
;- -------------------------
ProcedureDLL.i Excel_XmlSchemas_Get_Application(XmlSchemas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchemas, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlSchemas_Get_Creator(XmlSchemas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlSchemas, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchemas_Get_Parent(XmlSchemas.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchemas, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchemas_Get__Default(XmlSchemas.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchemas, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchemas_Get_Item(XmlSchemas.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlSchemas, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlSchemas_Get_Count(XmlSchemas.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlSchemas, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlSchemas_Get__NewEnum(XmlSchemas.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(XmlSchemas, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlMap
;- -------------------------
ProcedureDLL.i Excel_XmlMap_Get_Application(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Get_Creator(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlMap, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMap_Get_Parent(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlMap_Get__Default(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlMap, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlMap_Get_Name(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlMap, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_Name(XmlMap.IDispatch, Name.s)
	COM_PutPropertyString(XmlMap, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_IsExportable(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"IsExportable", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_ShowImportExportValidationErrors(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"ShowImportExportValidationErrors", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_ShowImportExportValidationErrors(XmlMap.IDispatch, ShowImportExportValidationErrors.w)
	COM_PutPropertyBool(XmlMap, @"ShowImportExportValidationErrors", ShowImportExportValidationErrors, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_SaveDataSourceDefinition(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"SaveDataSourceDefinition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_SaveDataSourceDefinition(XmlMap.IDispatch, SaveDataSourceDefinition.w)
	COM_PutPropertyBool(XmlMap, @"SaveDataSourceDefinition", SaveDataSourceDefinition, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_AdjustColumnWidth(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"AdjustColumnWidth", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_AdjustColumnWidth(XmlMap.IDispatch, AdjustColumnWidth.w)
	COM_PutPropertyBool(XmlMap, @"AdjustColumnWidth", AdjustColumnWidth, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_PreserveColumnFilter(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"PreserveColumnFilter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_PreserveColumnFilter(XmlMap.IDispatch, PreserveColumnFilter.w)
	COM_PutPropertyBool(XmlMap, @"PreserveColumnFilter", PreserveColumnFilter, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_PreserveNumberFormatting(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"PreserveNumberFormatting", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_PreserveNumberFormatting(XmlMap.IDispatch, PreserveNumberFormatting.w)
	COM_PutPropertyBool(XmlMap, @"PreserveNumberFormatting", PreserveNumberFormatting, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XmlMap_Get_AppendOnImport(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XmlMap, @"AppendOnImport", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Put_AppendOnImport(XmlMap.IDispatch, AppendOnImport.w)
	COM_PutPropertyBool(XmlMap, @"AppendOnImport", AppendOnImport, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XmlMap_Get_RootElementName(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyString(XmlMap, @"RootElementName", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMap_Get_RootElementNamespace(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"RootElementNamespace", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMap_Get_Schemas(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"Schemas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMap_Get_DataBinding(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"DataBinding", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Delete(XmlMap.IDispatch)
	COM_CallFunction(XmlMap, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMap_Import(XmlMap.IDispatch, Url.s, *Overwrite.VARIANT)
	Dim args.VARIANT(1)
	Protected.l r
	COM_VarClone(*Overwrite, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Url)
	r = COM_CallFunctionLong(XmlMap, @"Import", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_XmlMap_ImportXml(XmlMap.IDispatch, XmlData.s, *Overwrite.VARIANT)
	Dim args.VARIANT(1)
	Protected.l r
	COM_VarClone(*Overwrite, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(XmlData)
	r = COM_CallFunctionLong(XmlMap, @"ImportXml", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_XmlMap_Export(XmlMap.IDispatch, Url.s, *Overwrite.VARIANT)
	Dim args.VARIANT(1)
	Protected.l r
	COM_VarClone(*Overwrite, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Url)
	r = COM_CallFunctionLong(XmlMap, @"Export", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_XmlMap_ExportXml(XmlMap.IDispatch, _Data.s)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(_Data)
	ProcedureReturn COM_CallFunctionLong(XmlMap, @"ExportXml", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMap_Get_WorkbookConnection(XmlMap.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMap, @"WorkbookConnection", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XmlMaps
;- -------------------------
ProcedureDLL.i Excel_XmlMaps_Get_Application(XmlMaps.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMaps, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMaps_Get_Creator(XmlMaps.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlMaps, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMaps_Get_Parent(XmlMaps.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XmlMaps, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMaps_Add(XmlMaps.IDispatch, Schema.s, *RootElementName.VARIANT)
	Dim args.VARIANT(1)
	Protected.i r
	COM_VarClone(*RootElementName, @args(0))
	args(1)\vt = #VT_BSTR : args(1)\bstrVal = SysAllocString_(Schema)
	r = COM_CallFunctionDispatch(XmlMaps, @"Add", @args(), 2, @_g_Excel_error)
	VariantClear_(@args(1))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_XmlMaps_Get__Default(XmlMaps.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlMaps, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMaps_Get_Item(XmlMaps.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(XmlMaps, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XmlMaps_Get_Count(XmlMaps.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XmlMaps, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XmlMaps_Get__NewEnum(XmlMaps.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(XmlMaps, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ListDataFormat
;- -------------------------
ProcedureDLL.i Excel_ListDataFormat_Get_Application(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListDataFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_Creator(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ListDataFormat_Get_Parent(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ListDataFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get__Default(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_Choices(ListDataFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(ListDataFormat, @"Choices", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_DecimalPlaces(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"DecimalPlaces", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_DefaultValue(ListDataFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(ListDataFormat, @"DefaultValue", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListDataFormat_Get_IsPercent(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListDataFormat, @"IsPercent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_lcid(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"lcid", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_MaxCharacters(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"MaxCharacters", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_MaxNumber(ListDataFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(ListDataFormat, @"MaxNumber", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_MinNumber(ListDataFormat.IDispatch, *result.VARIANT)
	COM_GetProperty(ListDataFormat, @"MinNumber", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListDataFormat_Get_Required(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListDataFormat, @"Required", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ListDataFormat_Get_Type(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ListDataFormat, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListDataFormat_Get_ReadOnly(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListDataFormat, @"ReadOnly", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ListDataFormat_Get_AllowFillIn(ListDataFormat.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ListDataFormat, @"AllowFillIn", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_XPath
;- -------------------------
ProcedureDLL.i Excel_XPath_Get_Application(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XPath, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XPath_Get_Creator(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyLong(XPath, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XPath_Get_Parent(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XPath, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XPath_Get__Default(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyString(XPath, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_XPath_Get_Value(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyString(XPath, @"Value", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_XPath_Get_Map(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(XPath, @"Map", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_XPath_SetValue(XPath.IDispatch, Map.IDispatch, _XPath.s, *SelectionNamespace.VARIANT, *Repeating.VARIANT)
	Dim args.VARIANT(3)
	COM_VarClone(*Repeating, @args(0))
	COM_VarClone(*SelectionNamespace, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(_XPath)
	args(3)\vt = #VT_DISPATCH : args(3)\pdispVal = Map
	COM_CallFunction(XPath, @"SetValue", @args(), 4, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.l Excel_XPath_Clear(XPath.IDispatch)
	COM_CallFunction(XPath, @"Clear", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_XPath_Get_Repeating(XPath.IDispatch)
	ProcedureReturn COM_GetPropertyBool(XPath, @"Repeating", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotLineCells
;- -------------------------
ProcedureDLL.i Excel_PivotLineCells_Get_Application(PivotLineCells.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLineCells, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLineCells_Get_Creator(PivotLineCells.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLineCells, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLineCells_Get_Parent(PivotLineCells.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLineCells, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLineCells_Get__Default(PivotLineCells.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLineCells, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLineCells_Get__NewEnum(PivotLineCells.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(PivotLineCells, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLineCells_Get_Item(PivotLineCells.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLineCells, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLineCells_Get_Count(PivotLineCells.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLineCells, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotLine
;- -------------------------
ProcedureDLL.i Excel_PivotLine_Get_Application(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLine, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLine_Get_Creator(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLine, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLine_Get_Parent(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLine, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLine_Get_LineType(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLine, @"LineType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLine_Get_Position(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLine, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLine_Get_PivotLineCells(PivotLine.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLine, @"PivotLineCells", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotLines
;- -------------------------
ProcedureDLL.i Excel_PivotLines_Get_Application(PivotLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLines, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLines_Get_Creator(PivotLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLines, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLines_Get_Parent(PivotLines.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotLines, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLines_Get__Default(PivotLines.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLines, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLines_Get__NewEnum(PivotLines.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(PivotLines, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotLines_Get_Item(PivotLines.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotLines, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotLines_Get_Count(PivotLines.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotLines, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotAxis
;- -------------------------
ProcedureDLL.i Excel_PivotAxis_Get_Application(PivotAxis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotAxis, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotAxis_Get_Creator(PivotAxis.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotAxis, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotAxis_Get_Parent(PivotAxis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotAxis, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotAxis_Get_PivotLines(PivotAxis.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotAxis, @"PivotLines", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotFilter
;- -------------------------
ProcedureDLL.i Excel_PivotFilter_Get_Application(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Get_Creator(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFilter, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilter_Get_Parent(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Get_Order(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFilter, @"Order", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Put_Order(PivotFilter.IDispatch, Order.l)
	COM_PutPropertyLong(PivotFilter, @"Order", Order, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Get_FilterType(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFilter, @"FilterType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFilter_Get_Name(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFilter, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_PivotFilter_Get_Description(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyString(PivotFilter, @"Description", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Delete(PivotFilter.IDispatch)
	COM_CallFunction(PivotFilter, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotFilter_Get_Active(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotFilter, @"Active", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilter_Get_PivotField(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"PivotField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilter_Get_DataField(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"DataField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilter_Get_DataCubeField(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"DataCubeField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Get_Value1(PivotFilter.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotFilter, @"Value1", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilter_Get_Value2(PivotFilter.IDispatch, *result.VARIANT)
	COM_GetProperty(PivotFilter, @"Value2", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilter_Get_MemberPropertyField(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilter, @"MemberPropertyField", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_PivotFilter_Get_IsMemberPropertyFilter(PivotFilter.IDispatch)
	ProcedureReturn COM_GetPropertyBool(PivotFilter, @"IsMemberPropertyFilter", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_PivotFilters
;- -------------------------
ProcedureDLL.i Excel_PivotFilters_Get_Application(PivotFilters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilters, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilters_Get_Creator(PivotFilters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFilters, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilters_Get_Parent(PivotFilters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilters, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilters_Get__Default(PivotFilters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilters, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilters_Get__NewEnum(PivotFilters.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(PivotFilters, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilters_Get_Item(PivotFilters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(PivotFilters, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_PivotFilters_Get_Count(PivotFilters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(PivotFilters, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_PivotFilters_Add(PivotFilters.IDispatch, Type.l, *DataField.VARIANT, *Value1.VARIANT, *Value2.VARIANT, *Order.VARIANT, *Name.VARIANT, *Description.VARIANT, *MemberPropertyField.VARIANT)
	Dim args.VARIANT(7)
	COM_VarClone(*MemberPropertyField, @args(0))
	COM_VarClone(*Description, @args(1))
	COM_VarClone(*Name, @args(2))
	COM_VarClone(*Order, @args(3))
	COM_VarClone(*Value2, @args(4))
	COM_VarClone(*Value1, @args(5))
	COM_VarClone(*DataField, @args(6))
	args(7)\vt = #VT_I4 : args(7)\lVal = Type
	ProcedureReturn COM_CallFunctionDispatch(PivotFilters, @"Add", @args(), 8, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_WorkbookConnection
;- -------------------------
ProcedureDLL.i Excel_WorkbookConnection_Get_Application(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorkbookConnection, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Get_Creator(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WorkbookConnection, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorkbookConnection_Get_Parent(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorkbookConnection, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorkbookConnection_Get_Name(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(WorkbookConnection, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Put_Name(WorkbookConnection.IDispatch, Name.s)
	COM_PutPropertyString(WorkbookConnection, @"Name", Name, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorkbookConnection_Get_Description(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(WorkbookConnection, @"Description", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Put_Description(WorkbookConnection.IDispatch, Description.s)
	COM_PutPropertyString(WorkbookConnection, @"Description", Description, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_WorkbookConnection_Get__Default(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(WorkbookConnection, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Put__Default(WorkbookConnection.IDispatch, _Default.s)
	COM_PutPropertyString(WorkbookConnection, @"_Default", _Default, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Get_Type(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WorkbookConnection, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorkbookConnection_Get_OLEDBConnection(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorkbookConnection, @"OLEDBConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorkbookConnection_Get_ODBCConnection(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorkbookConnection, @"ODBCConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorkbookConnection_Get_Ranges(WorkbookConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorkbookConnection, @"Ranges", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Delete(WorkbookConnection.IDispatch)
	COM_CallFunction(WorkbookConnection, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorkbookConnection_Refresh(WorkbookConnection.IDispatch)
	COM_CallFunction(WorkbookConnection, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Connections
;- -------------------------
ProcedureDLL.i Excel_Connections_Get_Application(Connections.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Connections, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Connections_Get_Creator(Connections.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Connections, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Connections_Get_Parent(Connections.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Connections, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Connections_Get_Count(Connections.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Connections, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Connections_AddFromFile(Connections.IDispatch, Filename.s)
	Dim args.VARIANT(0)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(Filename)
	r = COM_CallFunctionDispatch(Connections, @"AddFromFile", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Connections_Add(Connections.IDispatch, Name.s, Description.s, *ConnectionString.VARIANT, *CommandText.VARIANT, *lCmdtype.VARIANT)
	Dim args.VARIANT(4)
	Protected.i r
	COM_VarClone(*lCmdtype, @args(0))
	COM_VarClone(*CommandText, @args(1))
	COM_VarClone(*ConnectionString, @args(2))
	args(3)\vt = #VT_BSTR : args(3)\bstrVal = SysAllocString_(Description)
	args(4)\vt = #VT_BSTR : args(4)\bstrVal = SysAllocString_(Name)
	r = COM_CallFunctionDispatch(Connections, @"Add", @args(), 5, @_g_Excel_error)
	VariantClear_(@args(3))
	VariantClear_(@args(4))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_Connections_Item(Connections.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(Connections, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Connections_Get__Default(Connections.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Connections, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Connections_Get__NewEnum(Connections.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Connections, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_WorksheetView
;- -------------------------
ProcedureDLL.i Excel_WorksheetView_Get_Application(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorksheetView, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Get_Creator(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyLong(WorksheetView, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorksheetView_Get_Parent(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorksheetView, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_WorksheetView_Get_Sheet(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(WorksheetView, @"Sheet", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetView_Get_DisplayGridlines(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WorksheetView, @"DisplayGridlines", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Put_DisplayGridlines(WorksheetView.IDispatch, DisplayGridlines.w)
	COM_PutPropertyBool(WorksheetView, @"DisplayGridlines", DisplayGridlines, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetView_Get_DisplayFormulas(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WorksheetView, @"DisplayFormulas", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Put_DisplayFormulas(WorksheetView.IDispatch, DisplayFormulas.w)
	COM_PutPropertyBool(WorksheetView, @"DisplayFormulas", DisplayFormulas, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetView_Get_DisplayHeadings(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WorksheetView, @"DisplayHeadings", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Put_DisplayHeadings(WorksheetView.IDispatch, DisplayHeadings.w)
	COM_PutPropertyBool(WorksheetView, @"DisplayHeadings", DisplayHeadings, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetView_Get_DisplayOutline(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WorksheetView, @"DisplayOutline", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Put_DisplayOutline(WorksheetView.IDispatch, DisplayOutline.w)
	COM_PutPropertyBool(WorksheetView, @"DisplayOutline", DisplayOutline, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_WorksheetView_Get_DisplayZeros(WorksheetView.IDispatch)
	ProcedureReturn COM_GetPropertyBool(WorksheetView, @"DisplayZeros", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_WorksheetView_Put_DisplayZeros(WorksheetView.IDispatch, DisplayZeros.w)
	COM_PutPropertyBool(WorksheetView, @"DisplayZeros", DisplayZeros, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartView
;- -------------------------
ProcedureDLL.i Excel_ChartView_Get_Application(ChartView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartView, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartView_Get_Creator(ChartView.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartView, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartView_Get_Parent(ChartView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartView, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartView_Get_Sheet(ChartView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartView, @"Sheet", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ModuleView
;- -------------------------
ProcedureDLL.i Excel_ModuleView_Get_Application(ModuleView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ModuleView, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ModuleView_Get_Creator(ModuleView.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ModuleView, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ModuleView_Get_Parent(ModuleView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ModuleView, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ModuleView_Get_Sheet(ModuleView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ModuleView, @"Sheet", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_DialogSheetView
;- -------------------------
ProcedureDLL.i Excel_DialogSheetView_Get_Application(DialogSheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DialogSheetView, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_DialogSheetView_Get_Creator(DialogSheetView.IDispatch)
	ProcedureReturn COM_GetPropertyLong(DialogSheetView, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DialogSheetView_Get_Parent(DialogSheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DialogSheetView, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_DialogSheetView_Get_Sheet(DialogSheetView.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(DialogSheetView, @"Sheet", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SheetViews
;- -------------------------
ProcedureDLL.i Excel_SheetViews_Get_Application(SheetViews.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SheetViews, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SheetViews_Get_Creator(SheetViews.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SheetViews, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SheetViews_Get_Parent(SheetViews.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SheetViews, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SheetViews_Get_Count(SheetViews.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SheetViews, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SheetViews__NewEnum(SheetViews.IDispatch)
	ProcedureReturn COM_CallFunctionUnknown(SheetViews, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SheetViews_Get_Item(SheetViews.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SheetViews, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SheetViews_Get__Default(SheetViews.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SheetViews, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_OLEDBConnection
;- -------------------------
ProcedureDLL.i Excel_OLEDBConnection_Get_Application(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBConnection, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_Creator(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBConnection_Get_Parent(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBConnection, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_OLEDBConnection_Get_ADOConnection(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(OLEDBConnection, @"ADOConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_BackgroundQuery(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"BackgroundQuery", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_BackgroundQuery(OLEDBConnection.IDispatch, BackgroundQuery.w)
	COM_PutPropertyBool(OLEDBConnection, @"BackgroundQuery", BackgroundQuery, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_CancelRefresh(OLEDBConnection.IDispatch)
	COM_CallFunction(OLEDBConnection, @"CancelRefresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_CommandText(OLEDBConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEDBConnection, @"CommandText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_CommandText(OLEDBConnection.IDispatch, *CommandText.VARIANT)
	COM_PutProperty(OLEDBConnection, @"CommandText", *CommandText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_CommandType(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"CommandType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_CommandType(OLEDBConnection.IDispatch, CommandType.l)
	COM_PutPropertyLong(OLEDBConnection, @"CommandType", CommandType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_Connection(OLEDBConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEDBConnection, @"Connection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_Connection(OLEDBConnection.IDispatch, *Connection.VARIANT)
	COM_PutProperty(OLEDBConnection, @"Connection", *Connection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_EnableRefresh(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"EnableRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_EnableRefresh(OLEDBConnection.IDispatch, EnableRefresh.w)
	COM_PutPropertyBool(OLEDBConnection, @"EnableRefresh", EnableRefresh, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_LocalConnection(OLEDBConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(OLEDBConnection, @"LocalConnection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_LocalConnection(OLEDBConnection.IDispatch, *LocalConnection.VARIANT)
	COM_PutProperty(OLEDBConnection, @"LocalConnection", *LocalConnection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_MaintainConnection(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"MaintainConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_MaintainConnection(OLEDBConnection.IDispatch, MaintainConnection.w)
	COM_PutPropertyBool(OLEDBConnection, @"MaintainConnection", MaintainConnection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_MakeConnection(OLEDBConnection.IDispatch)
	COM_CallFunction(OLEDBConnection, @"MakeConnection", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Refresh(OLEDBConnection.IDispatch)
	COM_CallFunction(OLEDBConnection, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_OLEDBConnection_Get_RefreshDate(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(OLEDBConnection, @"RefreshDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_Refreshing(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"Refreshing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_RefreshOnFileOpen(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"RefreshOnFileOpen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_RefreshOnFileOpen(OLEDBConnection.IDispatch, RefreshOnFileOpen.w)
	COM_PutPropertyBool(OLEDBConnection, @"RefreshOnFileOpen", RefreshOnFileOpen, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_RefreshPeriod(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"RefreshPeriod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_RefreshPeriod(OLEDBConnection.IDispatch, RefreshPeriod.l)
	COM_PutPropertyLong(OLEDBConnection, @"RefreshPeriod", RefreshPeriod, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_RobustConnect(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"RobustConnect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_RobustConnect(OLEDBConnection.IDispatch, RobustConnect.l)
	COM_PutPropertyLong(OLEDBConnection, @"RobustConnect", RobustConnect, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_SaveAsODC(OLEDBConnection.IDispatch, ODCFileName.s, *Description.VARIANT, *Keywords.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Keywords, @args(0))
	COM_VarClone(*Description, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(ODCFileName)
	COM_CallFunction(OLEDBConnection, @"SaveAsODC", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_SavePassword(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"SavePassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_SavePassword(OLEDBConnection.IDispatch, SavePassword.w)
	COM_PutPropertyBool(OLEDBConnection, @"SavePassword", SavePassword, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEDBConnection_Get_SourceConnectionFile(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEDBConnection, @"SourceConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_SourceConnectionFile(OLEDBConnection.IDispatch, SourceConnectionFile.s)
	COM_PutPropertyString(OLEDBConnection, @"SourceConnectionFile", SourceConnectionFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEDBConnection_Get_SourceDataFile(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEDBConnection, @"SourceDataFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_SourceDataFile(OLEDBConnection.IDispatch, SourceDataFile.s)
	COM_PutPropertyString(OLEDBConnection, @"SourceDataFile", SourceDataFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_OLAP(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"OLAP", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_UseLocalConnection(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"UseLocalConnection", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_UseLocalConnection(OLEDBConnection.IDispatch, UseLocalConnection.w)
	COM_PutPropertyBool(OLEDBConnection, @"UseLocalConnection", UseLocalConnection, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_MaxDrillthroughRecords(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"MaxDrillthroughRecords", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_MaxDrillthroughRecords(OLEDBConnection.IDispatch, MaxDrillthroughRecords.l)
	COM_PutPropertyLong(OLEDBConnection, @"MaxDrillthroughRecords", MaxDrillthroughRecords, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_IsConnected(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"IsConnected", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Get_ServerCredentialsMethod(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(OLEDBConnection, @"ServerCredentialsMethod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerCredentialsMethod(OLEDBConnection.IDispatch, ServerCredentialsMethod.l)
	COM_PutPropertyLong(OLEDBConnection, @"ServerCredentialsMethod", ServerCredentialsMethod, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_OLEDBConnection_Get_ServerSSOApplicationID(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(OLEDBConnection, @"ServerSSOApplicationID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerSSOApplicationID(OLEDBConnection.IDispatch, ServerSSOApplicationID.s)
	COM_PutPropertyString(OLEDBConnection, @"ServerSSOApplicationID", ServerSSOApplicationID, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_AlwaysUseConnectionFile(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"AlwaysUseConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_AlwaysUseConnectionFile(OLEDBConnection.IDispatch, AlwaysUseConnectionFile.w)
	COM_PutPropertyBool(OLEDBConnection, @"AlwaysUseConnectionFile", AlwaysUseConnectionFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_ServerFillColor(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"ServerFillColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerFillColor(OLEDBConnection.IDispatch, ServerFillColor.w)
	COM_PutPropertyBool(OLEDBConnection, @"ServerFillColor", ServerFillColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_ServerFontStyle(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"ServerFontStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerFontStyle(OLEDBConnection.IDispatch, ServerFontStyle.w)
	COM_PutPropertyBool(OLEDBConnection, @"ServerFontStyle", ServerFontStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_ServerNumberFormat(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"ServerNumberFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerNumberFormat(OLEDBConnection.IDispatch, ServerNumberFormat.w)
	COM_PutPropertyBool(OLEDBConnection, @"ServerNumberFormat", ServerNumberFormat, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_ServerTextColor(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"ServerTextColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_ServerTextColor(OLEDBConnection.IDispatch, ServerTextColor.w)
	COM_PutPropertyBool(OLEDBConnection, @"ServerTextColor", ServerTextColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_OLEDBConnection_Get_RetrieveInOfficeUILang(OLEDBConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(OLEDBConnection, @"RetrieveInOfficeUILang", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_OLEDBConnection_Put_RetrieveInOfficeUILang(OLEDBConnection.IDispatch, RetrieveInOfficeUILang.w)
	COM_PutPropertyBool(OLEDBConnection, @"RetrieveInOfficeUILang", RetrieveInOfficeUILang, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ODBCConnection
;- -------------------------
ProcedureDLL.i Excel_ODBCConnection_Get_Application(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCConnection, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_Creator(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCConnection, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ODBCConnection_Get_Parent(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ODBCConnection, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_BackgroundQuery(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"BackgroundQuery", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_BackgroundQuery(ODBCConnection.IDispatch, BackgroundQuery.w)
	COM_PutPropertyBool(ODBCConnection, @"BackgroundQuery", BackgroundQuery, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_CancelRefresh(ODBCConnection.IDispatch)
	COM_CallFunction(ODBCConnection, @"CancelRefresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_CommandText(ODBCConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(ODBCConnection, @"CommandText", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_CommandText(ODBCConnection.IDispatch, *CommandText.VARIANT)
	COM_PutProperty(ODBCConnection, @"CommandText", *CommandText, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_CommandType(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCConnection, @"CommandType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_CommandType(ODBCConnection.IDispatch, CommandType.l)
	COM_PutPropertyLong(ODBCConnection, @"CommandType", CommandType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_Connection(ODBCConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(ODBCConnection, @"Connection", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_Connection(ODBCConnection.IDispatch, *Connection.VARIANT)
	COM_PutProperty(ODBCConnection, @"Connection", *Connection, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_EnableRefresh(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"EnableRefresh", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_EnableRefresh(ODBCConnection.IDispatch, EnableRefresh.w)
	COM_PutPropertyBool(ODBCConnection, @"EnableRefresh", EnableRefresh, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Refresh(ODBCConnection.IDispatch)
	COM_CallFunction(ODBCConnection, @"Refresh", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ODBCConnection_Get_RefreshDate(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ODBCConnection, @"RefreshDate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_Refreshing(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"Refreshing", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_RefreshOnFileOpen(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"RefreshOnFileOpen", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_RefreshOnFileOpen(ODBCConnection.IDispatch, RefreshOnFileOpen.w)
	COM_PutPropertyBool(ODBCConnection, @"RefreshOnFileOpen", RefreshOnFileOpen, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_RefreshPeriod(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCConnection, @"RefreshPeriod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_RefreshPeriod(ODBCConnection.IDispatch, RefreshPeriod.l)
	COM_PutPropertyLong(ODBCConnection, @"RefreshPeriod", RefreshPeriod, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_RobustConnect(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCConnection, @"RobustConnect", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_RobustConnect(ODBCConnection.IDispatch, RobustConnect.l)
	COM_PutPropertyLong(ODBCConnection, @"RobustConnect", RobustConnect, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_SaveAsODC(ODBCConnection.IDispatch, ODCFileName.s, *Description.VARIANT, *Keywords.VARIANT)
	Dim args.VARIANT(2)
	COM_VarClone(*Keywords, @args(0))
	COM_VarClone(*Description, @args(1))
	args(2)\vt = #VT_BSTR : args(2)\bstrVal = SysAllocString_(ODCFileName)
	COM_CallFunction(ODBCConnection, @"SaveAsODC", @args(), 3, 0, @_g_Excel_error)
	VariantClear_(@args(2))
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_SavePassword(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"SavePassword", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_SavePassword(ODBCConnection.IDispatch, SavePassword.w)
	COM_PutPropertyBool(ODBCConnection, @"SavePassword", SavePassword, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ODBCConnection_Get_SourceConnectionFile(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(ODBCConnection, @"SourceConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_SourceConnectionFile(ODBCConnection.IDispatch, SourceConnectionFile.s)
	COM_PutPropertyString(ODBCConnection, @"SourceConnectionFile", SourceConnectionFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_SourceData(ODBCConnection.IDispatch, *result.VARIANT)
	COM_GetProperty(ODBCConnection, @"SourceData", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_SourceData(ODBCConnection.IDispatch, *SourceData.VARIANT)
	COM_PutProperty(ODBCConnection, @"SourceData", *SourceData, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ODBCConnection_Get_SourceDataFile(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(ODBCConnection, @"SourceDataFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_SourceDataFile(ODBCConnection.IDispatch, SourceDataFile.s)
	COM_PutPropertyString(ODBCConnection, @"SourceDataFile", SourceDataFile, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Get_ServerCredentialsMethod(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ODBCConnection, @"ServerCredentialsMethod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_ServerCredentialsMethod(ODBCConnection.IDispatch, ServerCredentialsMethod.l)
	COM_PutPropertyLong(ODBCConnection, @"ServerCredentialsMethod", ServerCredentialsMethod, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ODBCConnection_Get_ServerSSOApplicationID(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyString(ODBCConnection, @"ServerSSOApplicationID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_ServerSSOApplicationID(ODBCConnection.IDispatch, ServerSSOApplicationID.s)
	COM_PutPropertyString(ODBCConnection, @"ServerSSOApplicationID", ServerSSOApplicationID, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ODBCConnection_Get_AlwaysUseConnectionFile(ODBCConnection.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ODBCConnection, @"AlwaysUseConnectionFile", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ODBCConnection_Put_AlwaysUseConnectionFile(ODBCConnection.IDispatch, AlwaysUseConnectionFile.w)
	COM_PutPropertyBool(ODBCConnection, @"AlwaysUseConnectionFile", AlwaysUseConnectionFile, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Action
;- -------------------------
ProcedureDLL.i Excel_Action_Get_Application(Action.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Action, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Action_Get_Creator(Action.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Action, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Action_Get_Parent(Action.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Action, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Action_Get_Name(Action.IDispatch)
	ProcedureReturn COM_GetPropertyString(Action, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Action_Get_Caption(Action.IDispatch)
	ProcedureReturn COM_GetPropertyString(Action, @"Caption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Action_Get_Type(Action.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Action, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Action_Get_Coordinate(Action.IDispatch)
	ProcedureReturn COM_GetPropertyString(Action, @"Coordinate", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Action_Get_Content(Action.IDispatch)
	ProcedureReturn COM_GetPropertyString(Action, @"Content", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Action_Execute(Action.IDispatch)
	COM_CallFunction(Action, @"Execute", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Actions
;- -------------------------
ProcedureDLL.i Excel_Actions_Get_Application(Actions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Actions, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Actions_Get_Creator(Actions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Actions, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Actions_Get_Parent(Actions.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Actions, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Actions_Get__Default(Actions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Actions, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Actions_Get__NewEnum(Actions.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Actions, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Actions_Get_Item(Actions.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Actions, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Actions_Get_Count(Actions.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Actions, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FormatColor
;- -------------------------
ProcedureDLL.i Excel_FormatColor_Get_Application(FormatColor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatColor, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Get_Creator(FormatColor.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatColor, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FormatColor_Get_Parent(FormatColor.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FormatColor, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Get_Color(FormatColor.IDispatch, *result.VARIANT)
	COM_GetProperty(FormatColor, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Put_Color(FormatColor.IDispatch, *Color.VARIANT)
	COM_PutProperty(FormatColor, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Get_ColorIndex(FormatColor.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FormatColor, @"ColorIndex", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Put_ColorIndex(FormatColor.IDispatch, ColorIndex.l)
	COM_PutPropertyLong(FormatColor, @"ColorIndex", ColorIndex, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Get_ThemeColor(FormatColor.IDispatch, *result.VARIANT)
	COM_GetProperty(FormatColor, @"ThemeColor", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Put_ThemeColor(FormatColor.IDispatch, *ThemeColor.VARIANT)
	COM_PutProperty(FormatColor, @"ThemeColor", *ThemeColor, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Get_TintAndShade(FormatColor.IDispatch, *result.VARIANT)
	COM_GetProperty(FormatColor, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FormatColor_Put_TintAndShade(FormatColor.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(FormatColor, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ConditionValue
;- -------------------------
ProcedureDLL.i Excel_ConditionValue_Get_Application(ConditionValue.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConditionValue, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConditionValue_Get_Creator(ConditionValue.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConditionValue, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ConditionValue_Get_Parent(ConditionValue.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ConditionValue, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConditionValue_Modify(ConditionValue.IDispatch, newtype.l, *newvalue.VARIANT)
	Dim args.VARIANT(1)
	COM_VarClone(*newvalue, @args(0))
	args(1)\vt = #VT_I4 : args(1)\lVal = newtype
	COM_CallFunction(ConditionValue, @"Modify", @args(), 2, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConditionValue_Get_Type(ConditionValue.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ConditionValue, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ConditionValue_Get_Value(ConditionValue.IDispatch, *result.VARIANT)
	COM_GetProperty(ConditionValue, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorScale
;- -------------------------
ProcedureDLL.i Excel_ColorScale_Get_Application(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorScale, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Get_Creator(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScale, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScale_Get_Parent(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorScale, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Get_Priority(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScale, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Put_Priority(ColorScale.IDispatch, Priority.l)
	COM_PutPropertyLong(ColorScale, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ColorScale_Get_StopIfTrue(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ColorScale, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScale_Get_AppliesTo(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorScale, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_ColorScale_Get_Formula(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyString(ColorScale, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Put_Formula(ColorScale.IDispatch, Formula.s)
	COM_PutPropertyString(ColorScale, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Get_Type(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScale, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_SetFirstPriority(ColorScale.IDispatch)
	COM_CallFunction(ColorScale, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_SetLastPriority(ColorScale.IDispatch)
	COM_CallFunction(ColorScale, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Delete(ColorScale.IDispatch)
	COM_CallFunction(ColorScale, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_ModifyAppliesToRange(ColorScale.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(ColorScale, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_ColorScale_Get_PTCondition(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyBool(ColorScale, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Get_ScopeType(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScale, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScale_Put_ScopeType(ColorScale.IDispatch, ScopeType.l)
	COM_PutPropertyLong(ColorScale, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScale_Get_ColorScaleCriteria(ColorScale.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorScale, @"ColorScaleCriteria", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorScaleCriteria
;- -------------------------
ProcedureDLL.l Excel_ColorScaleCriteria_Get_Count(ColorScaleCriteria.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScaleCriteria, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScaleCriteria_Get__Default(ColorScaleCriteria.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ColorScaleCriteria, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScaleCriteria_Get__NewEnum(ColorScaleCriteria.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ColorScaleCriteria, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScaleCriteria_Get_Item(ColorScaleCriteria.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ColorScaleCriteria, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorScaleCriterion
;- -------------------------
ProcedureDLL.l Excel_ColorScaleCriterion_Get_Index(ColorScaleCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScaleCriterion, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScaleCriterion_Get_Type(ColorScaleCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorScaleCriterion, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScaleCriterion_Put_Type(ColorScaleCriterion.IDispatch, Type.l)
	COM_PutPropertyLong(ColorScaleCriterion, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScaleCriterion_Get_Value(ColorScaleCriterion.IDispatch, *result.VARIANT)
	COM_GetProperty(ColorScaleCriterion, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorScaleCriterion_Put_Value(ColorScaleCriterion.IDispatch, *Value.VARIANT)
	COM_PutProperty(ColorScaleCriterion, @"Value", *Value, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorScaleCriterion_Get_FormatColor(ColorScaleCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorScaleCriterion, @"FormatColor", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Databar
;- -------------------------
ProcedureDLL.i Excel_Databar_Get_Application(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_Creator(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Databar_Get_Parent(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_Priority(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_Priority(Databar.IDispatch, Priority.l)
	COM_PutPropertyLong(Databar, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Databar_Get_StopIfTrue(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Databar, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Databar_Get_AppliesTo(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Databar_Get_MinPoint(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"MinPoint", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Databar_Get_MaxPoint(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"MaxPoint", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_PercentMin(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"PercentMin", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_PercentMin(Databar.IDispatch, PercentMin.l)
	COM_PutPropertyLong(Databar, @"PercentMin", PercentMin, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_PercentMax(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"PercentMax", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_PercentMax(Databar.IDispatch, PercentMax.l)
	COM_PutPropertyLong(Databar, @"PercentMax", PercentMax, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Databar_Get_BarColor(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Databar, @"BarColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Databar_Get_ShowValue(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Databar, @"ShowValue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_ShowValue(Databar.IDispatch, ShowValue.w)
	COM_PutPropertyBool(Databar, @"ShowValue", ShowValue, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_Databar_Get_Formula(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyString(Databar, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_Formula(Databar.IDispatch, Formula.s)
	COM_PutPropertyString(Databar, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_Type(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_SetFirstPriority(Databar.IDispatch)
	COM_CallFunction(Databar, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_SetLastPriority(Databar.IDispatch)
	COM_CallFunction(Databar, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Delete(Databar.IDispatch)
	COM_CallFunction(Databar, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_ModifyAppliesToRange(Databar.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(Databar, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Databar_Get_PTCondition(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Databar, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Get_ScopeType(Databar.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Databar, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Databar_Put_ScopeType(Databar.IDispatch, ScopeType.l)
	COM_PutPropertyLong(Databar, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IconSetCondition
;- -------------------------
ProcedureDLL.i Excel_IconSetCondition_Get_Application(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSetCondition, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Get_Creator(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSetCondition, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSetCondition_Get_Parent(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSetCondition, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Get_Priority(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSetCondition, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_Priority(IconSetCondition.IDispatch, Priority.l)
	COM_PutPropertyLong(IconSetCondition, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_IconSetCondition_Get_StopIfTrue(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(IconSetCondition, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSetCondition_Get_AppliesTo(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSetCondition, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Get_Type(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSetCondition, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_ModifyAppliesToRange(IconSetCondition.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(IconSetCondition, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_IconSetCondition_Get_PTCondition(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(IconSetCondition, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Get_ScopeType(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSetCondition, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_ScopeType(IconSetCondition.IDispatch, ScopeType.l)
	COM_PutPropertyLong(IconSetCondition, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_SetFirstPriority(IconSetCondition.IDispatch)
	COM_CallFunction(IconSetCondition, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_SetLastPriority(IconSetCondition.IDispatch)
	COM_CallFunction(IconSetCondition, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Delete(IconSetCondition.IDispatch)
	COM_CallFunction(IconSetCondition, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_IconSetCondition_Get_ReverseOrder(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(IconSetCondition, @"ReverseOrder", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_ReverseOrder(IconSetCondition.IDispatch, ReverseOrder.w)
	COM_PutPropertyBool(IconSetCondition, @"ReverseOrder", ReverseOrder, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_IconSetCondition_Get_PercentileValues(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(IconSetCondition, @"PercentileValues", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_PercentileValues(IconSetCondition.IDispatch, PercentileValues.w)
	COM_PutPropertyBool(IconSetCondition, @"PercentileValues", PercentileValues, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_IconSetCondition_Get_ShowIconOnly(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyBool(IconSetCondition, @"ShowIconOnly", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_ShowIconOnly(IconSetCondition.IDispatch, ShowIconOnly.w)
	COM_PutPropertyBool(IconSetCondition, @"ShowIconOnly", ShowIconOnly, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_IconSetCondition_Get_Formula(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyString(IconSetCondition, @"Formula", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_Formula(IconSetCondition.IDispatch, Formula.s)
	COM_PutPropertyString(IconSetCondition, @"Formula", Formula, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Get_IconSet(IconSetCondition.IDispatch, *result.VARIANT)
	COM_GetProperty(IconSetCondition, @"IconSet", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSetCondition_Put_IconSet(IconSetCondition.IDispatch, *IconSet.VARIANT)
	COM_PutProperty(IconSetCondition, @"IconSet", *IconSet, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSetCondition_Get_IconCriteria(IconSetCondition.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSetCondition, @"IconCriteria", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IconCriteria
;- -------------------------
ProcedureDLL.l Excel_IconCriteria_Get_Count(IconCriteria.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconCriteria, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconCriteria_Get__Default(IconCriteria.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconCriteria, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconCriteria_Get__NewEnum(IconCriteria.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(IconCriteria, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconCriteria_Get_Item(IconCriteria.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconCriteria, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IconCriterion
;- -------------------------
ProcedureDLL.l Excel_IconCriterion_Get_Index(IconCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconCriterion, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Get_Type(IconCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconCriterion, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Put_Type(IconCriterion.IDispatch, Type.l)
	COM_PutPropertyLong(IconCriterion, @"Type", Type, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Get_Value(IconCriterion.IDispatch, *result.VARIANT)
	COM_GetProperty(IconCriterion, @"Value", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Put_Value(IconCriterion.IDispatch, *Value.VARIANT)
	COM_PutProperty(IconCriterion, @"Value", *Value, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Get_Operator(IconCriterion.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconCriterion, @"Operator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconCriterion_Put_Operator(IconCriterion.IDispatch, Operator.l)
	COM_PutPropertyLong(IconCriterion, @"Operator", Operator, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Icon
;- -------------------------
ProcedureDLL.i Excel_Icon_Get_Application(Icon.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Icon, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Icon_Get_Creator(Icon.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Icon, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Icon_Get_Parent(Icon.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Icon, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Icon_Get_Index(Icon.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Icon, @"Index", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IconSet
;- -------------------------
ProcedureDLL.i Excel_IconSet_Get_Application(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSet, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSet_Get_Creator(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSet, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSet_Get_Parent(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSet, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSet_Get_ID(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSet, @"ID", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSet_Get_Count(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSet, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSet_Get__Default(IconSet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconSet, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSet_Get__NewEnum(IconSet.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(IconSet, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSet_Get_Item(IconSet.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconSet, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_IconSets
;- -------------------------
ProcedureDLL.i Excel_IconSets_Get_Application(IconSets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSets, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSets_Get_Creator(IconSets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSets, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSets_Get_Parent(IconSets.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(IconSets, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_IconSets_Get_Count(IconSets.IDispatch)
	ProcedureReturn COM_GetPropertyLong(IconSets, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSets_Get__Default(IconSets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconSets, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSets_Get__NewEnum(IconSets.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(IconSets, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_IconSets_Get_Item(IconSets.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(IconSets, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Top10
;- -------------------------
ProcedureDLL.i Excel_Top10_Get_Application(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_Creator(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Top10_Get_Parent(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_Priority(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_Priority(Top10.IDispatch, Priority.l)
	COM_PutPropertyLong(Top10, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Top10_Get_StopIfTrue(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Top10, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_StopIfTrue(Top10.IDispatch, StopIfTrue.w)
	COM_PutPropertyBool(Top10, @"StopIfTrue", StopIfTrue, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Top10_Get_AppliesTo(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_TopBottom(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"TopBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_TopBottom(Top10.IDispatch, TopBottom.l)
	COM_PutPropertyLong(Top10, @"TopBottom", TopBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_Rank(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"Rank", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_Rank(Top10.IDispatch, Rank.l)
	COM_PutPropertyLong(Top10, @"Rank", Rank, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Top10_Get_Percent(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Top10, @"Percent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_Percent(Top10.IDispatch, Percent.w)
	COM_PutPropertyBool(Top10, @"Percent", Percent, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Top10_Get_Interior(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Top10_Get_Borders(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Top10_Get_Font(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Top10, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_Type(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_NumberFormat(Top10.IDispatch, *result.VARIANT)
	COM_GetProperty(Top10, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_NumberFormat(Top10.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(Top10, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_SetFirstPriority(Top10.IDispatch)
	COM_CallFunction(Top10, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_SetLastPriority(Top10.IDispatch)
	COM_CallFunction(Top10, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Delete(Top10.IDispatch)
	COM_CallFunction(Top10, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_ModifyAppliesToRange(Top10.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(Top10, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Top10_Get_PTCondition(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Top10, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_ScopeType(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_ScopeType(Top10.IDispatch, ScopeType.l)
	COM_PutPropertyLong(Top10, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Get_CalcFor(Top10.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Top10, @"CalcFor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Top10_Put_CalcFor(Top10.IDispatch, CalcFor.l)
	COM_PutPropertyLong(Top10, @"CalcFor", CalcFor, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_AboveAverage
;- -------------------------
ProcedureDLL.i Excel_AboveAverage_Get_Application(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_Creator(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AboveAverage_Get_Parent(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_Priority(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_Priority(AboveAverage.IDispatch, Priority.l)
	COM_PutPropertyLong(AboveAverage, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AboveAverage_Get_StopIfTrue(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AboveAverage, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_StopIfTrue(AboveAverage.IDispatch, StopIfTrue.w)
	COM_PutPropertyBool(AboveAverage, @"StopIfTrue", StopIfTrue, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AboveAverage_Get_AppliesTo(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_AboveBelow(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"AboveBelow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_AboveBelow(AboveAverage.IDispatch, AboveBelow.l)
	COM_PutPropertyLong(AboveAverage, @"AboveBelow", AboveBelow, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AboveAverage_Get_Interior(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AboveAverage_Get_Borders(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_AboveAverage_Get_Font(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(AboveAverage, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_Type(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_NumberFormat(AboveAverage.IDispatch, *result.VARIANT)
	COM_GetProperty(AboveAverage, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_NumberFormat(AboveAverage.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(AboveAverage, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_SetFirstPriority(AboveAverage.IDispatch)
	COM_CallFunction(AboveAverage, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_SetLastPriority(AboveAverage.IDispatch)
	COM_CallFunction(AboveAverage, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Delete(AboveAverage.IDispatch)
	COM_CallFunction(AboveAverage, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_ModifyAppliesToRange(AboveAverage.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(AboveAverage, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_AboveAverage_Get_PTCondition(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyBool(AboveAverage, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_ScopeType(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_ScopeType(AboveAverage.IDispatch, ScopeType.l)
	COM_PutPropertyLong(AboveAverage, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_CalcFor(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"CalcFor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_CalcFor(AboveAverage.IDispatch, CalcFor.l)
	COM_PutPropertyLong(AboveAverage, @"CalcFor", CalcFor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Get_NumStdDev(AboveAverage.IDispatch)
	ProcedureReturn COM_GetPropertyLong(AboveAverage, @"NumStdDev", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_AboveAverage_Put_NumStdDev(AboveAverage.IDispatch, NumStdDev.l)
	COM_PutPropertyLong(AboveAverage, @"NumStdDev", NumStdDev, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_UniqueValues
;- -------------------------
ProcedureDLL.i Excel_UniqueValues_Get_Application(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_Creator(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UniqueValues, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UniqueValues_Get_Parent(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_Priority(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UniqueValues, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Put_Priority(UniqueValues.IDispatch, Priority.l)
	COM_PutPropertyLong(UniqueValues, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_UniqueValues_Get_StopIfTrue(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyBool(UniqueValues, @"StopIfTrue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Put_StopIfTrue(UniqueValues.IDispatch, StopIfTrue.w)
	COM_PutPropertyBool(UniqueValues, @"StopIfTrue", StopIfTrue, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UniqueValues_Get_AppliesTo(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"AppliesTo", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_DupeUnique(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UniqueValues, @"DupeUnique", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Put_DupeUnique(UniqueValues.IDispatch, DupeUnique.l)
	COM_PutPropertyLong(UniqueValues, @"DupeUnique", DupeUnique, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UniqueValues_Get_Interior(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UniqueValues_Get_Borders(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_UniqueValues_Get_Font(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(UniqueValues, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_Type(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UniqueValues, @"Type", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_NumberFormat(UniqueValues.IDispatch, *result.VARIANT)
	COM_GetProperty(UniqueValues, @"NumberFormat", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Put_NumberFormat(UniqueValues.IDispatch, *NumberFormat.VARIANT)
	COM_PutProperty(UniqueValues, @"NumberFormat", *NumberFormat, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_SetFirstPriority(UniqueValues.IDispatch)
	COM_CallFunction(UniqueValues, @"SetFirstPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_SetLastPriority(UniqueValues.IDispatch)
	COM_CallFunction(UniqueValues, @"SetLastPriority", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Delete(UniqueValues.IDispatch)
	COM_CallFunction(UniqueValues, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_ModifyAppliesToRange(UniqueValues.IDispatch, Range.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Range
	COM_CallFunction(UniqueValues, @"ModifyAppliesToRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_UniqueValues_Get_PTCondition(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyBool(UniqueValues, @"PTCondition", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Get_ScopeType(UniqueValues.IDispatch)
	ProcedureReturn COM_GetPropertyLong(UniqueValues, @"ScopeType", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_UniqueValues_Put_ScopeType(UniqueValues.IDispatch, ScopeType.l)
	COM_PutPropertyLong(UniqueValues, @"ScopeType", ScopeType, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Ranges
;- -------------------------
ProcedureDLL.i Excel_Ranges_Get_Application(Ranges.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Ranges, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Ranges_Get_Creator(Ranges.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Ranges, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Ranges_Get_Parent(Ranges.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Ranges, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Ranges_Get__Default(Ranges.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Ranges, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Ranges_Get__NewEnum(Ranges.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Ranges, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Ranges_Get_Item(Ranges.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Ranges, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Ranges_Get_Count(Ranges.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Ranges, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_HeaderFooter
;- -------------------------
ProcedureDLL.s Excel_HeaderFooter_Get_Text(HeaderFooter.IDispatch)
	ProcedureReturn COM_GetPropertyString(HeaderFooter, @"Text", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_HeaderFooter_Put_Text(HeaderFooter.IDispatch, Text.s)
	COM_PutPropertyString(HeaderFooter, @"Text", Text, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_HeaderFooter_Get_Picture(HeaderFooter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(HeaderFooter, @"Picture", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Page
;- -------------------------
ProcedureDLL.i Excel_Page_Get_LeftHeader(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"LeftHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Page_Get_CenterHeader(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"CenterHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Page_Get_RightHeader(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"RightHeader", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Page_Get_LeftFooter(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"LeftFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Page_Get_CenterFooter(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"CenterFooter", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Page_Get_RightFooter(Page.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Page, @"RightFooter", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Pages
;- -------------------------
ProcedureDLL.i Excel_Pages_Get_Item(Pages.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Pages, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Pages_Get__Default(Pages.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(Pages, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Pages_Get_Count(Pages.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Pages, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Pages_Get__NewEnum(Pages.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(Pages, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ServerViewableItems
;- -------------------------
ProcedureDLL.i Excel_ServerViewableItems_Get_Application(ServerViewableItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ServerViewableItems, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ServerViewableItems_Get_Creator(ServerViewableItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ServerViewableItems, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ServerViewableItems_Get_Parent(ServerViewableItems.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ServerViewableItems, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ServerViewableItems_Get_Count(ServerViewableItems.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ServerViewableItems, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ServerViewableItems_Add(ServerViewableItems.IDispatch, *Obj.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ServerViewableItems, @"Add", *Obj, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ServerViewableItems_Delete(ServerViewableItems.IDispatch, *Index.VARIANT)
	COM_CallFunction(ServerViewableItems, @"Delete", *Index, 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ServerViewableItems_DeleteAll(ServerViewableItems.IDispatch)
	COM_CallFunction(ServerViewableItems, @"DeleteAll", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ServerViewableItems_Item(ServerViewableItems.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ServerViewableItems, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ServerViewableItems_Get__Default(ServerViewableItems.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ServerViewableItems, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ServerViewableItems_Get__NewEnum(ServerViewableItems.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ServerViewableItems, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TableStyleElement
;- -------------------------
ProcedureDLL.i Excel_TableStyleElement_Get_Application(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElement, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElement_Get_Creator(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyleElement, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElement_Get_Parent(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElement, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TableStyleElement_Get_HasFormat(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TableStyleElement, @"HasFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElement_Get_Interior(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElement, @"Interior", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElement_Get_Borders(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElement, @"Borders", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElement_Get_Font(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElement, @"Font", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElement_Get_StripeSize(TableStyleElement.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyleElement, @"StripeSize", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElement_Put_StripeSize(TableStyleElement.IDispatch, StripeSize.l)
	COM_PutPropertyLong(TableStyleElement, @"StripeSize", StripeSize, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElement_Clear(TableStyleElement.IDispatch)
	COM_CallFunction(TableStyleElement, @"Clear", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TableStyleElements
;- -------------------------
ProcedureDLL.i Excel_TableStyleElements_Get_Application(TableStyleElements.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElements, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElements_Get_Creator(TableStyleElements.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyleElements, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElements_Get_Parent(TableStyleElements.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElements, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyleElements_Get_Count(TableStyleElements.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyleElements, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElements_Item(TableStyleElements.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_CallFunctionDispatch(TableStyleElements, @"Item", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElements_Get__Default(TableStyleElements.IDispatch, Index.l)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_I4 : args(0)\lVal = Index
	ProcedureReturn COM_GetPropertyDispatch(TableStyleElements, @"_Default", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyleElements_Get__NewEnum(TableStyleElements.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(TableStyleElements, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TableStyle
;- -------------------------
ProcedureDLL.i Excel_TableStyle_Get_Application(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyle, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyle_Get_Creator(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyle, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyle_Get_Parent(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyle, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TableStyle_Get__Default(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyString(TableStyle, @"_Default", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TableStyle_Get_Name(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyString(TableStyle, @"Name", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_TableStyle_Get_NameLocal(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyString(TableStyle, @"NameLocal", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TableStyle_Get_BuiltIn(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TableStyle, @"BuiltIn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyle_Get_TableStyleElements(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyle, @"TableStyleElements", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TableStyle_Get_ShowAsAvailableTableStyle(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TableStyle, @"ShowAsAvailableTableStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyle_Put_ShowAsAvailableTableStyle(TableStyle.IDispatch, ShowAsAvailableTableStyle.w)
	COM_PutPropertyBool(TableStyle, @"ShowAsAvailableTableStyle", ShowAsAvailableTableStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_TableStyle_Get_ShowAsAvailablePivotTableStyle(TableStyle.IDispatch)
	ProcedureReturn COM_GetPropertyBool(TableStyle, @"ShowAsAvailablePivotTableStyle", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyle_Put_ShowAsAvailablePivotTableStyle(TableStyle.IDispatch, ShowAsAvailablePivotTableStyle.w)
	COM_PutPropertyBool(TableStyle, @"ShowAsAvailablePivotTableStyle", ShowAsAvailablePivotTableStyle, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyle_Delete(TableStyle.IDispatch)
	COM_CallFunction(TableStyle, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyle_Duplicate(TableStyle.IDispatch, *NewTableStyleName.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(TableStyle, @"Duplicate", *NewTableStyleName, 1, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_TableStyles
;- -------------------------
ProcedureDLL.i Excel_TableStyles_Get_Application(TableStyles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyles, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyles_Get_Creator(TableStyles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyles, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyles_Get_Parent(TableStyles.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(TableStyles, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_TableStyles_Get_Count(TableStyles.IDispatch)
	ProcedureReturn COM_GetPropertyLong(TableStyles, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyles_Add(TableStyles.IDispatch, TableStyleName.s)
	Dim args.VARIANT(0)
	Protected.i r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(TableStyleName)
	r = COM_CallFunctionDispatch(TableStyles, @"Add", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.i Excel_TableStyles_Item(TableStyles.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(TableStyles, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyles_Get__Default(TableStyles.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(TableStyles, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_TableStyles_Get__NewEnum(TableStyles.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(TableStyles, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SortField
;- -------------------------
ProcedureDLL.i Excel_SortField_Get_Application(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortField, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_Creator(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortField, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortField_Get_Parent(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortField, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_SortOn(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortField, @"SortOn", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Put_SortOn(SortField.IDispatch, SortOn.l)
	COM_PutPropertyLong(SortField, @"SortOn", SortOn, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortField_Get_SortOnValue(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortField, @"SortOnValue", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortField_Get_Key(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortField, @"Key", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_Order(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortField, @"Order", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Put_Order(SortField.IDispatch, Order.l)
	COM_PutPropertyLong(SortField, @"Order", Order, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_CustomOrder(SortField.IDispatch, *result.VARIANT)
	COM_GetProperty(SortField, @"CustomOrder", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Put_CustomOrder(SortField.IDispatch, *CustomOrder.VARIANT)
	COM_PutProperty(SortField, @"CustomOrder", *CustomOrder, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_DataOption(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortField, @"DataOption", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Put_DataOption(SortField.IDispatch, DataOption.l)
	COM_PutPropertyLong(SortField, @"DataOption", DataOption, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Get_Priority(SortField.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortField, @"Priority", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Put_Priority(SortField.IDispatch, Priority.l)
	COM_PutPropertyLong(SortField, @"Priority", Priority, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_Delete(SortField.IDispatch)
	COM_CallFunction(SortField, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_ModifyKey(SortField.IDispatch, Key.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Key
	COM_CallFunction(SortField, @"ModifyKey", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortField_SetIcon(SortField.IDispatch, Icon.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Icon
	COM_CallFunction(SortField, @"SetIcon", @args(), 1, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_SortFields
;- -------------------------
ProcedureDLL.i Excel_SortFields_Get_Application(SortFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortFields, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortFields_Get_Creator(SortFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortFields, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortFields_Get_Parent(SortFields.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(SortFields, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortFields_Add(SortFields.IDispatch, Key.IDispatch, *SortOn.VARIANT, *Order.VARIANT, *CustomOrder.VARIANT, *DataOption.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*DataOption, @args(0))
	COM_VarClone(*CustomOrder, @args(1))
	COM_VarClone(*Order, @args(2))
	COM_VarClone(*SortOn, @args(3))
	args(4)\vt = #VT_DISPATCH : args(4)\pdispVal = Key
	ProcedureReturn COM_CallFunctionDispatch(SortFields, @"Add", @args(), 5, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortFields_Get_Item(SortFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SortFields, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortFields_Get_Count(SortFields.IDispatch)
	ProcedureReturn COM_GetPropertyLong(SortFields, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_SortFields_Clear(SortFields.IDispatch)
	COM_CallFunction(SortFields, @"Clear", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortFields_Get__Default(SortFields.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(SortFields, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_SortFields_Get__NewEnum(SortFields.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(SortFields, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Sort
;- -------------------------
ProcedureDLL.i Excel_Sort_Get_Application(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sort, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Get_Creator(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sort, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sort_Get_Parent(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sort, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sort_Get_Rng(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sort, @"Rng", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Get_Header(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sort, @"Header", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Put_Header(Sort.IDispatch, Header.l)
	COM_PutPropertyLong(Sort, @"Header", Header, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_Sort_Get_MatchCase(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyBool(Sort, @"MatchCase", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Put_MatchCase(Sort.IDispatch, MatchCase.w)
	COM_PutPropertyBool(Sort, @"MatchCase", MatchCase, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Get_Orientation(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sort, @"Orientation", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Put_Orientation(Sort.IDispatch, Orientation.l)
	COM_PutPropertyLong(Sort, @"Orientation", Orientation, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Get_SortMethod(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Sort, @"SortMethod", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Put_SortMethod(Sort.IDispatch, SortMethod.l)
	COM_PutPropertyLong(Sort, @"SortMethod", SortMethod, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Sort_Get_SortFields(Sort.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Sort, @"SortFields", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_SetRange(Sort.IDispatch, Rng.IDispatch)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_DISPATCH : args(0)\pdispVal = Rng
	COM_CallFunction(Sort, @"SetRange", @args(), 1, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Sort_Apply(Sort.IDispatch)
	COM_CallFunction(Sort, @"Apply", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_Research
;- -------------------------
ProcedureDLL.i Excel_Research_Get_Application(Research.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Research, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Research_Get_Creator(Research.IDispatch)
	ProcedureReturn COM_GetPropertyLong(Research, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_Research_Get_Parent(Research.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(Research, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_Research_Query(Research.IDispatch, ServiceID.s, *QueryString.VARIANT, *QueryLanguage.VARIANT, *UseSelection.VARIANT, *LaunchQuery.VARIANT, *result.VARIANT)
	Dim args.VARIANT(4)
	COM_VarClone(*LaunchQuery, @args(0))
	COM_VarClone(*UseSelection, @args(1))
	COM_VarClone(*QueryLanguage, @args(2))
	COM_VarClone(*QueryString, @args(3))
	args(4)\vt = #VT_BSTR : args(4)\bstrVal = SysAllocString_(ServiceID)
	COM_CallFunction(Research, @"Query", @args(), 5, *result, @_g_Excel_error)
	VariantClear_(@args(4))
EndProcedure

ProcedureDLL.w Excel_Research_IsResearchService(Research.IDispatch, ServiceID.s)
	Dim args.VARIANT(0)
	Protected.w r
	args(0)\vt = #VT_BSTR : args(0)\bstrVal = SysAllocString_(ServiceID)
	r = COM_CallFunctionBool(Research, @"IsResearchService", @args(), 1, @_g_Excel_error)
	VariantClear_(@args(0))
	ProcedureReturn r
EndProcedure

ProcedureDLL.l Excel_Research_SetLanguagePair(Research.IDispatch, LanguageFrom.l, LanguageTo.l, *result.VARIANT)
	Dim args.VARIANT(1)
	args(0)\vt = #VT_I4 : args(0)\lVal = LanguageTo
	args(1)\vt = #VT_I4 : args(1)\lVal = LanguageFrom
	COM_CallFunction(Research, @"SetLanguagePair", @args(), 2, *result, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorStop
;- -------------------------
ProcedureDLL.i Excel_ColorStop_Get_Application(ColorStop.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorStop, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Get_Creator(ColorStop.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorStop, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStop_Get_Parent(ColorStop.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorStop, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Delete(ColorStop.IDispatch)
	COM_CallFunction(ColorStop, @"Delete", 0, 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Get_Color(ColorStop.IDispatch, *result.VARIANT)
	COM_GetProperty(ColorStop, @"Color", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Put_Color(ColorStop.IDispatch, *Color.VARIANT)
	COM_PutProperty(ColorStop, @"Color", *Color, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Get_ThemeColor(ColorStop.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorStop, @"ThemeColor", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Put_ThemeColor(ColorStop.IDispatch, ThemeColor.l)
	COM_PutPropertyLong(ColorStop, @"ThemeColor", ThemeColor, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Get_TintAndShade(ColorStop.IDispatch, *result.VARIANT)
	COM_GetProperty(ColorStop, @"TintAndShade", 0, 0, *result, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Put_TintAndShade(ColorStop.IDispatch, *TintAndShade.VARIANT)
	COM_PutProperty(ColorStop, @"TintAndShade", *TintAndShade, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_ColorStop_Get_Position(ColorStop.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(ColorStop, @"Position", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStop_Put_Position(ColorStop.IDispatch, Position.d)
	COM_PutPropertyDouble(ColorStop, @"Position", Position, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ColorStops
;- -------------------------
ProcedureDLL.i Excel_ColorStops_Get_Application(ColorStops.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorStops, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStops_Get_Creator(ColorStops.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorStops, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStops_Get_Parent(ColorStops.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ColorStops, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStops_Get_Count(ColorStops.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ColorStops, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStops_Add(ColorStops.IDispatch, Position.d)
	Dim args.VARIANT(0)
	args(0)\vt = #VT_R8 : args(0)\dblVal = Position
	ProcedureReturn COM_CallFunctionDispatch(ColorStops, @"Add", @args(), 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStops_Item(ColorStops.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_CallFunctionDispatch(ColorStops, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStops_Get__Default(ColorStops.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(ColorStops, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ColorStops_Get__NewEnum(ColorStops.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(ColorStops, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ColorStops_Clear(ColorStops.IDispatch)
	COM_CallFunction(ColorStops, @"Clear", 0, 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_LinearGradient
;- -------------------------
ProcedureDLL.i Excel_LinearGradient_Get_Application(LinearGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LinearGradient, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinearGradient_Get_Creator(LinearGradient.IDispatch)
	ProcedureReturn COM_GetPropertyLong(LinearGradient, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LinearGradient_Get_Parent(LinearGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LinearGradient, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_LinearGradient_Get_ColorStops(LinearGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(LinearGradient, @"ColorStops", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_LinearGradient_Get_Degree(LinearGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(LinearGradient, @"Degree", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_LinearGradient_Put_Degree(LinearGradient.IDispatch, Degree.d)
	COM_PutPropertyDouble(LinearGradient, @"Degree", Degree, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_RectangularGradient
;- -------------------------
ProcedureDLL.i Excel_RectangularGradient_Get_Application(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RectangularGradient, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RectangularGradient_Get_Creator(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyLong(RectangularGradient, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RectangularGradient_Get_Parent(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RectangularGradient, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_RectangularGradient_Get_ColorStops(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(RectangularGradient, @"ColorStops", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_RectangularGradient_Get_RectangleTop(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(RectangularGradient, @"RectangleTop", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RectangularGradient_Put_RectangleTop(RectangularGradient.IDispatch, RectangleTop.d)
	COM_PutPropertyDouble(RectangularGradient, @"RectangleTop", RectangleTop, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_RectangularGradient_Get_RectangleBottom(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(RectangularGradient, @"RectangleBottom", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RectangularGradient_Put_RectangleBottom(RectangularGradient.IDispatch, RectangleBottom.d)
	COM_PutPropertyDouble(RectangularGradient, @"RectangleBottom", RectangleBottom, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_RectangularGradient_Get_RectangleLeft(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(RectangularGradient, @"RectangleLeft", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RectangularGradient_Put_RectangleLeft(RectangularGradient.IDispatch, RectangleLeft.d)
	COM_PutPropertyDouble(RectangularGradient, @"RectangleLeft", RectangleLeft, @_g_Excel_error)
EndProcedure

ProcedureDLL.d Excel_RectangularGradient_Get_RectangleRight(RectangularGradient.IDispatch)
	ProcedureReturn COM_GetPropertyDouble(RectangularGradient, @"RectangleRight", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_RectangularGradient_Put_RectangleRight(RectangularGradient.IDispatch, RectangleRight.d)
	COM_PutPropertyDouble(RectangularGradient, @"RectangleRight", RectangleRight, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_MultiThreadedCalculation
;- -------------------------
ProcedureDLL.i Excel_MultiThreadedCalculation_Get_Application(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(MultiThreadedCalculation, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Get_Creator(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(MultiThreadedCalculation, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_MultiThreadedCalculation_Get_Parent(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(MultiThreadedCalculation, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.w Excel_MultiThreadedCalculation_Get_Enabled(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyBool(MultiThreadedCalculation, @"Enabled", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Put_Enabled(MultiThreadedCalculation.IDispatch, Enabled.w)
	COM_PutPropertyBool(MultiThreadedCalculation, @"Enabled", Enabled, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Get_ThreadMode(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(MultiThreadedCalculation, @"ThreadMode", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Put_ThreadMode(MultiThreadedCalculation.IDispatch, ThreadMode.l)
	COM_PutPropertyLong(MultiThreadedCalculation, @"ThreadMode", ThreadMode, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Get_ThreadCount(MultiThreadedCalculation.IDispatch)
	ProcedureReturn COM_GetPropertyLong(MultiThreadedCalculation, @"ThreadCount", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_MultiThreadedCalculation_Put_ThreadCount(MultiThreadedCalculation.IDispatch, ThreadCount.l)
	COM_PutPropertyLong(MultiThreadedCalculation, @"ThreadCount", ThreadCount, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_ChartFormat
;- -------------------------
ProcedureDLL.i Excel_ChartFormat_Get_Application(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_ChartFormat_Get_Creator(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyLong(ChartFormat, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_Parent(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_Fill(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Fill", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_Glow(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Glow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_Line(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Line", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_PictureFormat(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"PictureFormat", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_Shadow(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"Shadow", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_SoftEdge(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"SoftEdge", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_TextFrame2(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"TextFrame2", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_ChartFormat_Get_ThreeD(ChartFormat.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(ChartFormat, @"ThreeD", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FileExportConverter
;- -------------------------
ProcedureDLL.i Excel_FileExportConverter_Get_Application(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverter, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FileExportConverter_Get_Creator(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FileExportConverter, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FileExportConverter_Get_Parent(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverter, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FileExportConverter_Get_Extensions(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyString(FileExportConverter, @"Extensions", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.s Excel_FileExportConverter_Get_Description(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyString(FileExportConverter, @"Description", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FileExportConverter_Get_FileFormat(FileExportConverter.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FileExportConverter, @"FileFormat", 0, 0, @_g_Excel_error)
EndProcedure

;- -------------------------
;- Excel_FileExportConverters
;- -------------------------
ProcedureDLL.i Excel_FileExportConverters_Get_Application(FileExportConverters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverters, @"Application", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FileExportConverters_Get_Creator(FileExportConverters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FileExportConverters, @"Creator", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FileExportConverters_Get_Parent(FileExportConverters.IDispatch)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverters, @"Parent", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.l Excel_FileExportConverters_Get_Count(FileExportConverters.IDispatch)
	ProcedureReturn COM_GetPropertyLong(FileExportConverters, @"Count", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FileExportConverters_Get__Default(FileExportConverters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverters, @"_Default", *Index, 1, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FileExportConverters_Get__NewEnum(FileExportConverters.IDispatch)
	ProcedureReturn COM_GetPropertyUnknown(FileExportConverters, @"_NewEnum", 0, 0, @_g_Excel_error)
EndProcedure

ProcedureDLL.i Excel_FileExportConverters_Get_Item(FileExportConverters.IDispatch, *Index.VARIANT)
	ProcedureReturn COM_GetPropertyDispatch(FileExportConverters, @"Item", *Index, 1, @_g_Excel_error)
EndProcedure

